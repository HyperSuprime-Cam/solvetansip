# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SLVTS_SWIG', [dirname(__file__)])
        except ImportError:
            import _SLVTS_SWIG
            return _SLVTS_SWIG
        if fp is not None:
            try:
                _mod = imp.load_module('_SLVTS_SWIG', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _SLVTS_SWIG = swig_import_helper()
    del swig_import_helper
else:
    import _SLVTS_SWIG
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SLVTS_SWIG.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _SLVTS_SWIG.SwigPyIterator_value(self)
    def incr(self, n = 1): return _SLVTS_SWIG.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _SLVTS_SWIG.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _SLVTS_SWIG.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _SLVTS_SWIG.SwigPyIterator_equal(self, *args)
    def copy(self): return _SLVTS_SWIG.SwigPyIterator_copy(self)
    def next(self): return _SLVTS_SWIG.SwigPyIterator_next(self)
    def __next__(self): return _SLVTS_SWIG.SwigPyIterator___next__(self)
    def previous(self): return _SLVTS_SWIG.SwigPyIterator_previous(self)
    def advance(self, *args): return _SLVTS_SWIG.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _SLVTS_SWIG.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _SLVTS_SWIG.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _SLVTS_SWIG.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _SLVTS_SWIG.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _SLVTS_SWIG.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _SLVTS_SWIG.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _SLVTS_SWIG.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VS, name)
    __repr__ = _swig_repr
    def iterator(self): return _SLVTS_SWIG.VS_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _SLVTS_SWIG.VS___nonzero__(self)
    def __bool__(self): return _SLVTS_SWIG.VS___bool__(self)
    def __len__(self): return _SLVTS_SWIG.VS___len__(self)
    def pop(self): return _SLVTS_SWIG.VS_pop(self)
    def __getslice__(self, *args): return _SLVTS_SWIG.VS___getslice__(self, *args)
    def __setslice__(self, *args): return _SLVTS_SWIG.VS___setslice__(self, *args)
    def __delslice__(self, *args): return _SLVTS_SWIG.VS___delslice__(self, *args)
    def __delitem__(self, *args): return _SLVTS_SWIG.VS___delitem__(self, *args)
    def __getitem__(self, *args): return _SLVTS_SWIG.VS___getitem__(self, *args)
    def __setitem__(self, *args): return _SLVTS_SWIG.VS___setitem__(self, *args)
    def append(self, *args): return _SLVTS_SWIG.VS_append(self, *args)
    def empty(self): return _SLVTS_SWIG.VS_empty(self)
    def size(self): return _SLVTS_SWIG.VS_size(self)
    def clear(self): return _SLVTS_SWIG.VS_clear(self)
    def swap(self, *args): return _SLVTS_SWIG.VS_swap(self, *args)
    def get_allocator(self): return _SLVTS_SWIG.VS_get_allocator(self)
    def begin(self): return _SLVTS_SWIG.VS_begin(self)
    def end(self): return _SLVTS_SWIG.VS_end(self)
    def rbegin(self): return _SLVTS_SWIG.VS_rbegin(self)
    def rend(self): return _SLVTS_SWIG.VS_rend(self)
    def pop_back(self): return _SLVTS_SWIG.VS_pop_back(self)
    def erase(self, *args): return _SLVTS_SWIG.VS_erase(self, *args)
    def __init__(self, *args): 
        this = _SLVTS_SWIG.new_VS(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _SLVTS_SWIG.VS_push_back(self, *args)
    def front(self): return _SLVTS_SWIG.VS_front(self)
    def back(self): return _SLVTS_SWIG.VS_back(self)
    def assign(self, *args): return _SLVTS_SWIG.VS_assign(self, *args)
    def resize(self, *args): return _SLVTS_SWIG.VS_resize(self, *args)
    def insert(self, *args): return _SLVTS_SWIG.VS_insert(self, *args)
    def reserve(self, *args): return _SLVTS_SWIG.VS_reserve(self, *args)
    def capacity(self): return _SLVTS_SWIG.VS_capacity(self)
    __swig_destroy__ = _SLVTS_SWIG.delete_VS
    __del__ = lambda self : None;
VS_swigregister = _SLVTS_SWIG.VS_swigregister
VS_swigregister(VS)

class VVS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VVS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VVS, name)
    __repr__ = _swig_repr
    def iterator(self): return _SLVTS_SWIG.VVS_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _SLVTS_SWIG.VVS___nonzero__(self)
    def __bool__(self): return _SLVTS_SWIG.VVS___bool__(self)
    def __len__(self): return _SLVTS_SWIG.VVS___len__(self)
    def pop(self): return _SLVTS_SWIG.VVS_pop(self)
    def __getslice__(self, *args): return _SLVTS_SWIG.VVS___getslice__(self, *args)
    def __setslice__(self, *args): return _SLVTS_SWIG.VVS___setslice__(self, *args)
    def __delslice__(self, *args): return _SLVTS_SWIG.VVS___delslice__(self, *args)
    def __delitem__(self, *args): return _SLVTS_SWIG.VVS___delitem__(self, *args)
    def __getitem__(self, *args): return _SLVTS_SWIG.VVS___getitem__(self, *args)
    def __setitem__(self, *args): return _SLVTS_SWIG.VVS___setitem__(self, *args)
    def append(self, *args): return _SLVTS_SWIG.VVS_append(self, *args)
    def empty(self): return _SLVTS_SWIG.VVS_empty(self)
    def size(self): return _SLVTS_SWIG.VVS_size(self)
    def clear(self): return _SLVTS_SWIG.VVS_clear(self)
    def swap(self, *args): return _SLVTS_SWIG.VVS_swap(self, *args)
    def get_allocator(self): return _SLVTS_SWIG.VVS_get_allocator(self)
    def begin(self): return _SLVTS_SWIG.VVS_begin(self)
    def end(self): return _SLVTS_SWIG.VVS_end(self)
    def rbegin(self): return _SLVTS_SWIG.VVS_rbegin(self)
    def rend(self): return _SLVTS_SWIG.VVS_rend(self)
    def pop_back(self): return _SLVTS_SWIG.VVS_pop_back(self)
    def erase(self, *args): return _SLVTS_SWIG.VVS_erase(self, *args)
    def __init__(self, *args): 
        this = _SLVTS_SWIG.new_VVS(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _SLVTS_SWIG.VVS_push_back(self, *args)
    def front(self): return _SLVTS_SWIG.VVS_front(self)
    def back(self): return _SLVTS_SWIG.VVS_back(self)
    def assign(self, *args): return _SLVTS_SWIG.VVS_assign(self, *args)
    def resize(self, *args): return _SLVTS_SWIG.VVS_resize(self, *args)
    def insert(self, *args): return _SLVTS_SWIG.VVS_insert(self, *args)
    def reserve(self, *args): return _SLVTS_SWIG.VVS_reserve(self, *args)
    def capacity(self): return _SLVTS_SWIG.VVS_capacity(self)
    __swig_destroy__ = _SLVTS_SWIG.delete_VVS
    __del__ = lambda self : None;
VVS_swigregister = _SLVTS_SWIG.VVS_swigregister
VVS_swigregister(VVS)

class VVVS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VVVS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VVVS, name)
    __repr__ = _swig_repr
    def iterator(self): return _SLVTS_SWIG.VVVS_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _SLVTS_SWIG.VVVS___nonzero__(self)
    def __bool__(self): return _SLVTS_SWIG.VVVS___bool__(self)
    def __len__(self): return _SLVTS_SWIG.VVVS___len__(self)
    def pop(self): return _SLVTS_SWIG.VVVS_pop(self)
    def __getslice__(self, *args): return _SLVTS_SWIG.VVVS___getslice__(self, *args)
    def __setslice__(self, *args): return _SLVTS_SWIG.VVVS___setslice__(self, *args)
    def __delslice__(self, *args): return _SLVTS_SWIG.VVVS___delslice__(self, *args)
    def __delitem__(self, *args): return _SLVTS_SWIG.VVVS___delitem__(self, *args)
    def __getitem__(self, *args): return _SLVTS_SWIG.VVVS___getitem__(self, *args)
    def __setitem__(self, *args): return _SLVTS_SWIG.VVVS___setitem__(self, *args)
    def append(self, *args): return _SLVTS_SWIG.VVVS_append(self, *args)
    def empty(self): return _SLVTS_SWIG.VVVS_empty(self)
    def size(self): return _SLVTS_SWIG.VVVS_size(self)
    def clear(self): return _SLVTS_SWIG.VVVS_clear(self)
    def swap(self, *args): return _SLVTS_SWIG.VVVS_swap(self, *args)
    def get_allocator(self): return _SLVTS_SWIG.VVVS_get_allocator(self)
    def begin(self): return _SLVTS_SWIG.VVVS_begin(self)
    def end(self): return _SLVTS_SWIG.VVVS_end(self)
    def rbegin(self): return _SLVTS_SWIG.VVVS_rbegin(self)
    def rend(self): return _SLVTS_SWIG.VVVS_rend(self)
    def pop_back(self): return _SLVTS_SWIG.VVVS_pop_back(self)
    def erase(self, *args): return _SLVTS_SWIG.VVVS_erase(self, *args)
    def __init__(self, *args): 
        this = _SLVTS_SWIG.new_VVVS(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _SLVTS_SWIG.VVVS_push_back(self, *args)
    def front(self): return _SLVTS_SWIG.VVVS_front(self)
    def back(self): return _SLVTS_SWIG.VVVS_back(self)
    def assign(self, *args): return _SLVTS_SWIG.VVVS_assign(self, *args)
    def resize(self, *args): return _SLVTS_SWIG.VVVS_resize(self, *args)
    def insert(self, *args): return _SLVTS_SWIG.VVVS_insert(self, *args)
    def reserve(self, *args): return _SLVTS_SWIG.VVVS_reserve(self, *args)
    def capacity(self): return _SLVTS_SWIG.VVVS_capacity(self)
    __swig_destroy__ = _SLVTS_SWIG.delete_VVVS
    __del__ = lambda self : None;
VVVS_swigregister = _SLVTS_SWIG.VVVS_swigregister
VVVS_swigregister(VVVS)

class VSLVTS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VSLVTS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSLVTS, name)
    __repr__ = _swig_repr
    def iterator(self): return _SLVTS_SWIG.VSLVTS_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _SLVTS_SWIG.VSLVTS___nonzero__(self)
    def __bool__(self): return _SLVTS_SWIG.VSLVTS___bool__(self)
    def __len__(self): return _SLVTS_SWIG.VSLVTS___len__(self)
    def pop(self): return _SLVTS_SWIG.VSLVTS_pop(self)
    def __getslice__(self, *args): return _SLVTS_SWIG.VSLVTS___getslice__(self, *args)
    def __setslice__(self, *args): return _SLVTS_SWIG.VSLVTS___setslice__(self, *args)
    def __delslice__(self, *args): return _SLVTS_SWIG.VSLVTS___delslice__(self, *args)
    def __delitem__(self, *args): return _SLVTS_SWIG.VSLVTS___delitem__(self, *args)
    def __getitem__(self, *args): return _SLVTS_SWIG.VSLVTS___getitem__(self, *args)
    def __setitem__(self, *args): return _SLVTS_SWIG.VSLVTS___setitem__(self, *args)
    def append(self, *args): return _SLVTS_SWIG.VSLVTS_append(self, *args)
    def empty(self): return _SLVTS_SWIG.VSLVTS_empty(self)
    def size(self): return _SLVTS_SWIG.VSLVTS_size(self)
    def clear(self): return _SLVTS_SWIG.VSLVTS_clear(self)
    def swap(self, *args): return _SLVTS_SWIG.VSLVTS_swap(self, *args)
    def get_allocator(self): return _SLVTS_SWIG.VSLVTS_get_allocator(self)
    def begin(self): return _SLVTS_SWIG.VSLVTS_begin(self)
    def end(self): return _SLVTS_SWIG.VSLVTS_end(self)
    def rbegin(self): return _SLVTS_SWIG.VSLVTS_rbegin(self)
    def rend(self): return _SLVTS_SWIG.VSLVTS_rend(self)
    def pop_back(self): return _SLVTS_SWIG.VSLVTS_pop_back(self)
    def erase(self, *args): return _SLVTS_SWIG.VSLVTS_erase(self, *args)
    def __init__(self, *args): 
        this = _SLVTS_SWIG.new_VSLVTS(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _SLVTS_SWIG.VSLVTS_push_back(self, *args)
    def front(self): return _SLVTS_SWIG.VSLVTS_front(self)
    def back(self): return _SLVTS_SWIG.VSLVTS_back(self)
    def assign(self, *args): return _SLVTS_SWIG.VSLVTS_assign(self, *args)
    def resize(self, *args): return _SLVTS_SWIG.VSLVTS_resize(self, *args)
    def insert(self, *args): return _SLVTS_SWIG.VSLVTS_insert(self, *args)
    def reserve(self, *args): return _SLVTS_SWIG.VSLVTS_reserve(self, *args)
    def capacity(self): return _SLVTS_SWIG.VSLVTS_capacity(self)
    __swig_destroy__ = _SLVTS_SWIG.delete_VSLVTS
    __del__ = lambda self : None;
VSLVTS_swigregister = _SLVTS_SWIG.VSLVTS_swigregister
VSLVTS_swigregister(VSLVTS)


def SOLVETANSIP(*args):
  return _SLVTS_SWIG.SOLVETANSIP(*args)
SOLVETANSIP = _SLVTS_SWIG.SOLVETANSIP
class VD(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VD, name)
    __repr__ = _swig_repr
    def iterator(self): return _SLVTS_SWIG.VD_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _SLVTS_SWIG.VD___nonzero__(self)
    def __bool__(self): return _SLVTS_SWIG.VD___bool__(self)
    def __len__(self): return _SLVTS_SWIG.VD___len__(self)
    def pop(self): return _SLVTS_SWIG.VD_pop(self)
    def __getslice__(self, *args): return _SLVTS_SWIG.VD___getslice__(self, *args)
    def __setslice__(self, *args): return _SLVTS_SWIG.VD___setslice__(self, *args)
    def __delslice__(self, *args): return _SLVTS_SWIG.VD___delslice__(self, *args)
    def __delitem__(self, *args): return _SLVTS_SWIG.VD___delitem__(self, *args)
    def __getitem__(self, *args): return _SLVTS_SWIG.VD___getitem__(self, *args)
    def __setitem__(self, *args): return _SLVTS_SWIG.VD___setitem__(self, *args)
    def append(self, *args): return _SLVTS_SWIG.VD_append(self, *args)
    def empty(self): return _SLVTS_SWIG.VD_empty(self)
    def size(self): return _SLVTS_SWIG.VD_size(self)
    def clear(self): return _SLVTS_SWIG.VD_clear(self)
    def swap(self, *args): return _SLVTS_SWIG.VD_swap(self, *args)
    def get_allocator(self): return _SLVTS_SWIG.VD_get_allocator(self)
    def begin(self): return _SLVTS_SWIG.VD_begin(self)
    def end(self): return _SLVTS_SWIG.VD_end(self)
    def rbegin(self): return _SLVTS_SWIG.VD_rbegin(self)
    def rend(self): return _SLVTS_SWIG.VD_rend(self)
    def pop_back(self): return _SLVTS_SWIG.VD_pop_back(self)
    def erase(self, *args): return _SLVTS_SWIG.VD_erase(self, *args)
    def __init__(self, *args): 
        this = _SLVTS_SWIG.new_VD(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _SLVTS_SWIG.VD_push_back(self, *args)
    def front(self): return _SLVTS_SWIG.VD_front(self)
    def back(self): return _SLVTS_SWIG.VD_back(self)
    def assign(self, *args): return _SLVTS_SWIG.VD_assign(self, *args)
    def resize(self, *args): return _SLVTS_SWIG.VD_resize(self, *args)
    def insert(self, *args): return _SLVTS_SWIG.VD_insert(self, *args)
    def reserve(self, *args): return _SLVTS_SWIG.VD_reserve(self, *args)
    def capacity(self): return _SLVTS_SWIG.VD_capacity(self)
    __swig_destroy__ = _SLVTS_SWIG.delete_VD
    __del__ = lambda self : None;
VD_swigregister = _SLVTS_SWIG.VD_swigregister
VD_swigregister(VD)

class VVD(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VVD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VVD, name)
    __repr__ = _swig_repr
    def iterator(self): return _SLVTS_SWIG.VVD_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _SLVTS_SWIG.VVD___nonzero__(self)
    def __bool__(self): return _SLVTS_SWIG.VVD___bool__(self)
    def __len__(self): return _SLVTS_SWIG.VVD___len__(self)
    def pop(self): return _SLVTS_SWIG.VVD_pop(self)
    def __getslice__(self, *args): return _SLVTS_SWIG.VVD___getslice__(self, *args)
    def __setslice__(self, *args): return _SLVTS_SWIG.VVD___setslice__(self, *args)
    def __delslice__(self, *args): return _SLVTS_SWIG.VVD___delslice__(self, *args)
    def __delitem__(self, *args): return _SLVTS_SWIG.VVD___delitem__(self, *args)
    def __getitem__(self, *args): return _SLVTS_SWIG.VVD___getitem__(self, *args)
    def __setitem__(self, *args): return _SLVTS_SWIG.VVD___setitem__(self, *args)
    def append(self, *args): return _SLVTS_SWIG.VVD_append(self, *args)
    def empty(self): return _SLVTS_SWIG.VVD_empty(self)
    def size(self): return _SLVTS_SWIG.VVD_size(self)
    def clear(self): return _SLVTS_SWIG.VVD_clear(self)
    def swap(self, *args): return _SLVTS_SWIG.VVD_swap(self, *args)
    def get_allocator(self): return _SLVTS_SWIG.VVD_get_allocator(self)
    def begin(self): return _SLVTS_SWIG.VVD_begin(self)
    def end(self): return _SLVTS_SWIG.VVD_end(self)
    def rbegin(self): return _SLVTS_SWIG.VVD_rbegin(self)
    def rend(self): return _SLVTS_SWIG.VVD_rend(self)
    def pop_back(self): return _SLVTS_SWIG.VVD_pop_back(self)
    def erase(self, *args): return _SLVTS_SWIG.VVD_erase(self, *args)
    def __init__(self, *args): 
        this = _SLVTS_SWIG.new_VVD(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _SLVTS_SWIG.VVD_push_back(self, *args)
    def front(self): return _SLVTS_SWIG.VVD_front(self)
    def back(self): return _SLVTS_SWIG.VVD_back(self)
    def assign(self, *args): return _SLVTS_SWIG.VVD_assign(self, *args)
    def resize(self, *args): return _SLVTS_SWIG.VVD_resize(self, *args)
    def insert(self, *args): return _SLVTS_SWIG.VVD_insert(self, *args)
    def reserve(self, *args): return _SLVTS_SWIG.VVD_reserve(self, *args)
    def capacity(self): return _SLVTS_SWIG.VVD_capacity(self)
    __swig_destroy__ = _SLVTS_SWIG.delete_VVD
    __del__ = lambda self : None;
VVD_swigregister = _SLVTS_SWIG.VVD_swigregister
VVD_swigregister(VVD)

class VI(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VI, name)
    __repr__ = _swig_repr
    def iterator(self): return _SLVTS_SWIG.VI_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _SLVTS_SWIG.VI___nonzero__(self)
    def __bool__(self): return _SLVTS_SWIG.VI___bool__(self)
    def __len__(self): return _SLVTS_SWIG.VI___len__(self)
    def pop(self): return _SLVTS_SWIG.VI_pop(self)
    def __getslice__(self, *args): return _SLVTS_SWIG.VI___getslice__(self, *args)
    def __setslice__(self, *args): return _SLVTS_SWIG.VI___setslice__(self, *args)
    def __delslice__(self, *args): return _SLVTS_SWIG.VI___delslice__(self, *args)
    def __delitem__(self, *args): return _SLVTS_SWIG.VI___delitem__(self, *args)
    def __getitem__(self, *args): return _SLVTS_SWIG.VI___getitem__(self, *args)
    def __setitem__(self, *args): return _SLVTS_SWIG.VI___setitem__(self, *args)
    def append(self, *args): return _SLVTS_SWIG.VI_append(self, *args)
    def empty(self): return _SLVTS_SWIG.VI_empty(self)
    def size(self): return _SLVTS_SWIG.VI_size(self)
    def clear(self): return _SLVTS_SWIG.VI_clear(self)
    def swap(self, *args): return _SLVTS_SWIG.VI_swap(self, *args)
    def get_allocator(self): return _SLVTS_SWIG.VI_get_allocator(self)
    def begin(self): return _SLVTS_SWIG.VI_begin(self)
    def end(self): return _SLVTS_SWIG.VI_end(self)
    def rbegin(self): return _SLVTS_SWIG.VI_rbegin(self)
    def rend(self): return _SLVTS_SWIG.VI_rend(self)
    def pop_back(self): return _SLVTS_SWIG.VI_pop_back(self)
    def erase(self, *args): return _SLVTS_SWIG.VI_erase(self, *args)
    def __init__(self, *args): 
        this = _SLVTS_SWIG.new_VI(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _SLVTS_SWIG.VI_push_back(self, *args)
    def front(self): return _SLVTS_SWIG.VI_front(self)
    def back(self): return _SLVTS_SWIG.VI_back(self)
    def assign(self, *args): return _SLVTS_SWIG.VI_assign(self, *args)
    def resize(self, *args): return _SLVTS_SWIG.VI_resize(self, *args)
    def insert(self, *args): return _SLVTS_SWIG.VI_insert(self, *args)
    def reserve(self, *args): return _SLVTS_SWIG.VI_reserve(self, *args)
    def capacity(self): return _SLVTS_SWIG.VI_capacity(self)
    __swig_destroy__ = _SLVTS_SWIG.delete_VI
    __del__ = lambda self : None;
VI_swigregister = _SLVTS_SWIG.VI_swigregister
VI_swigregister(VI)

class VLLI(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VLLI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VLLI, name)
    __repr__ = _swig_repr
    def iterator(self): return _SLVTS_SWIG.VLLI_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _SLVTS_SWIG.VLLI___nonzero__(self)
    def __bool__(self): return _SLVTS_SWIG.VLLI___bool__(self)
    def __len__(self): return _SLVTS_SWIG.VLLI___len__(self)
    def pop(self): return _SLVTS_SWIG.VLLI_pop(self)
    def __getslice__(self, *args): return _SLVTS_SWIG.VLLI___getslice__(self, *args)
    def __setslice__(self, *args): return _SLVTS_SWIG.VLLI___setslice__(self, *args)
    def __delslice__(self, *args): return _SLVTS_SWIG.VLLI___delslice__(self, *args)
    def __delitem__(self, *args): return _SLVTS_SWIG.VLLI___delitem__(self, *args)
    def __getitem__(self, *args): return _SLVTS_SWIG.VLLI___getitem__(self, *args)
    def __setitem__(self, *args): return _SLVTS_SWIG.VLLI___setitem__(self, *args)
    def append(self, *args): return _SLVTS_SWIG.VLLI_append(self, *args)
    def empty(self): return _SLVTS_SWIG.VLLI_empty(self)
    def size(self): return _SLVTS_SWIG.VLLI_size(self)
    def clear(self): return _SLVTS_SWIG.VLLI_clear(self)
    def swap(self, *args): return _SLVTS_SWIG.VLLI_swap(self, *args)
    def get_allocator(self): return _SLVTS_SWIG.VLLI_get_allocator(self)
    def begin(self): return _SLVTS_SWIG.VLLI_begin(self)
    def end(self): return _SLVTS_SWIG.VLLI_end(self)
    def rbegin(self): return _SLVTS_SWIG.VLLI_rbegin(self)
    def rend(self): return _SLVTS_SWIG.VLLI_rend(self)
    def pop_back(self): return _SLVTS_SWIG.VLLI_pop_back(self)
    def erase(self, *args): return _SLVTS_SWIG.VLLI_erase(self, *args)
    def __init__(self, *args): 
        this = _SLVTS_SWIG.new_VLLI(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _SLVTS_SWIG.VLLI_push_back(self, *args)
    def front(self): return _SLVTS_SWIG.VLLI_front(self)
    def back(self): return _SLVTS_SWIG.VLLI_back(self)
    def assign(self, *args): return _SLVTS_SWIG.VLLI_assign(self, *args)
    def resize(self, *args): return _SLVTS_SWIG.VLLI_resize(self, *args)
    def insert(self, *args): return _SLVTS_SWIG.VLLI_insert(self, *args)
    def reserve(self, *args): return _SLVTS_SWIG.VLLI_reserve(self, *args)
    def capacity(self): return _SLVTS_SWIG.VLLI_capacity(self)
    __swig_destroy__ = _SLVTS_SWIG.delete_VLLI
    __del__ = lambda self : None;
VLLI_swigregister = _SLVTS_SWIG.VLLI_swigregister
VLLI_swigregister(VLLI)


def GET_SUM_MODECR(*args):
  return _SLVTS_SWIG.GET_SUM_MODECR(*args)
GET_SUM_MODECR = _SLVTS_SWIG.GET_SUM_MODECR

def GET_SUM_MODEREJ(*args):
  return _SLVTS_SWIG.GET_SUM_MODEREJ(*args)
GET_SUM_MODEREJ = _SLVTS_SWIG.GET_SUM_MODEREJ

def GET_SUM_MODECCD(*args):
  return _SLVTS_SWIG.GET_SUM_MODECCD(*args)
GET_SUM_MODECCD = _SLVTS_SWIG.GET_SUM_MODECCD

def GET_SUM_NUMCCD(*args):
  return _SLVTS_SWIG.GET_SUM_NUMCCD(*args)
GET_SUM_NUMCCD = _SLVTS_SWIG.GET_SUM_NUMCCD

def GET_SUM_NUMREF(*args):
  return _SLVTS_SWIG.GET_SUM_NUMREF(*args)
GET_SUM_NUMREF = _SLVTS_SWIG.GET_SUM_NUMREF

def GET_SUM_NUMFIT(*args):
  return _SLVTS_SWIG.GET_SUM_NUMFIT(*args)
GET_SUM_NUMFIT = _SLVTS_SWIG.GET_SUM_NUMFIT

def GET_SUM_CRPIX(*args):
  return _SLVTS_SWIG.GET_SUM_CRPIX(*args)
GET_SUM_CRPIX = _SLVTS_SWIG.GET_SUM_CRPIX

def GET_SUM_CRVAL(*args):
  return _SLVTS_SWIG.GET_SUM_CRVAL(*args)
GET_SUM_CRVAL = _SLVTS_SWIG.GET_SUM_CRVAL

def GET_SUM_OAPIX(*args):
  return _SLVTS_SWIG.GET_SUM_OAPIX(*args)
GET_SUM_OAPIX = _SLVTS_SWIG.GET_SUM_OAPIX

def GET_SUM_CD(*args):
  return _SLVTS_SWIG.GET_SUM_CD(*args)
GET_SUM_CD = _SLVTS_SWIG.GET_SUM_CD

def GET_SUM_ANGLE(*args):
  return _SLVTS_SWIG.GET_SUM_ANGLE(*args)
GET_SUM_ANGLE = _SLVTS_SWIG.GET_SUM_ANGLE

def GET_SUM_MAX_CRPIX_G(*args):
  return _SLVTS_SWIG.GET_SUM_MAX_CRPIX_G(*args)
GET_SUM_MAX_CRPIX_G = _SLVTS_SWIG.GET_SUM_MAX_CRPIX_G

def GET_SUM_CD_CORANGLE(*args):
  return _SLVTS_SWIG.GET_SUM_CD_CORANGLE(*args)
GET_SUM_CD_CORANGLE = _SLVTS_SWIG.GET_SUM_CD_CORANGLE

def GET_SUM_RMSASIP(*args):
  return _SLVTS_SWIG.GET_SUM_RMSASIP(*args)
GET_SUM_RMSASIP = _SLVTS_SWIG.GET_SUM_RMSASIP

def GET_SUM_RMSPSIP(*args):
  return _SLVTS_SWIG.GET_SUM_RMSPSIP(*args)
GET_SUM_RMSPSIP = _SLVTS_SWIG.GET_SUM_RMSPSIP

def GET_CCD_ID(*args):
  return _SLVTS_SWIG.GET_CCD_ID(*args)
GET_CCD_ID = _SLVTS_SWIG.GET_CCD_ID

def GET_CCD_NUMREF(*args):
  return _SLVTS_SWIG.GET_CCD_NUMREF(*args)
GET_CCD_NUMREF = _SLVTS_SWIG.GET_CCD_NUMREF

def GET_CCD_NUMFIT(*args):
  return _SLVTS_SWIG.GET_CCD_NUMFIT(*args)
GET_CCD_NUMFIT = _SLVTS_SWIG.GET_CCD_NUMFIT

def GET_CCD_ORDERSIP(*args):
  return _SLVTS_SWIG.GET_CCD_ORDERSIP(*args)
GET_CCD_ORDERSIP = _SLVTS_SWIG.GET_CCD_ORDERSIP

def GET_CCD_ORDERPSIP(*args):
  return _SLVTS_SWIG.GET_CCD_ORDERPSIP(*args)
GET_CCD_ORDERPSIP = _SLVTS_SWIG.GET_CCD_ORDERPSIP

def GET_CCD_GPOS_L(*args):
  return _SLVTS_SWIG.GET_CCD_GPOS_L(*args)
GET_CCD_GPOS_L = _SLVTS_SWIG.GET_CCD_GPOS_L

def GET_CCD_GPOS_C(*args):
  return _SLVTS_SWIG.GET_CCD_GPOS_C(*args)
GET_CCD_GPOS_C = _SLVTS_SWIG.GET_CCD_GPOS_C

def GET_CCD_CR(*args):
  return _SLVTS_SWIG.GET_CCD_CR(*args)
GET_CCD_CR = _SLVTS_SWIG.GET_CCD_CR

def GET_CCD_OA(*args):
  return _SLVTS_SWIG.GET_CCD_OA(*args)
GET_CCD_OA = _SLVTS_SWIG.GET_CCD_OA

def GET_CCD_CD(*args):
  return _SLVTS_SWIG.GET_CCD_CD(*args)
GET_CCD_CD = _SLVTS_SWIG.GET_CCD_CD

def GET_CCD_ERRSIP(*args):
  return _SLVTS_SWIG.GET_CCD_ERRSIP(*args)
GET_CCD_ERRSIP = _SLVTS_SWIG.GET_CCD_ERRSIP

def GET_CCD_ERRPSIP(*args):
  return _SLVTS_SWIG.GET_CCD_ERRPSIP(*args)
GET_CCD_ERRPSIP = _SLVTS_SWIG.GET_CCD_ERRPSIP

def GET_CCD_COEFSIPA(*args):
  return _SLVTS_SWIG.GET_CCD_COEFSIPA(*args)
GET_CCD_COEFSIPA = _SLVTS_SWIG.GET_CCD_COEFSIPA

def GET_CCD_COEFSIPB(*args):
  return _SLVTS_SWIG.GET_CCD_COEFSIPB(*args)
GET_CCD_COEFSIPB = _SLVTS_SWIG.GET_CCD_COEFSIPB

def GET_CCD_COEFPSIPA(*args):
  return _SLVTS_SWIG.GET_CCD_COEFPSIPA(*args)
GET_CCD_COEFPSIPA = _SLVTS_SWIG.GET_CCD_COEFPSIPA

def GET_CCD_COEFPSIPB(*args):
  return _SLVTS_SWIG.GET_CCD_COEFPSIPB(*args)
GET_CCD_COEFPSIPB = _SLVTS_SWIG.GET_CCD_COEFPSIPB

def GET_REF_ID(*args):
  return _SLVTS_SWIG.GET_REF_ID(*args)
GET_REF_ID = _SLVTS_SWIG.GET_REF_ID

def GET_REF_CID(*args):
  return _SLVTS_SWIG.GET_REF_CID(*args)
GET_REF_CID = _SLVTS_SWIG.GET_REF_CID

def GET_REF_FLAG(*args):
  return _SLVTS_SWIG.GET_REF_FLAG(*args)
GET_REF_FLAG = _SLVTS_SWIG.GET_REF_FLAG

def GET_REF_POS_CELESTIAL_RADEC(*args):
  return _SLVTS_SWIG.GET_REF_POS_CELESTIAL_RADEC(*args)
GET_REF_POS_CELESTIAL_RADEC = _SLVTS_SWIG.GET_REF_POS_CELESTIAL_RADEC

def GET_REF_POS_CELESTIAL_IMWLD(*args):
  return _SLVTS_SWIG.GET_REF_POS_CELESTIAL_IMWLD(*args)
GET_REF_POS_CELESTIAL_IMWLD = _SLVTS_SWIG.GET_REF_POS_CELESTIAL_IMWLD

def GET_REF_POS_CELESTIAL_IMPIX_L(*args):
  return _SLVTS_SWIG.GET_REF_POS_CELESTIAL_IMPIX_L(*args)
GET_REF_POS_CELESTIAL_IMPIX_L = _SLVTS_SWIG.GET_REF_POS_CELESTIAL_IMPIX_L

def GET_REF_POS_CELESTIAL_IMPIX_G(*args):
  return _SLVTS_SWIG.GET_REF_POS_CELESTIAL_IMPIX_G(*args)
GET_REF_POS_CELESTIAL_IMPIX_G = _SLVTS_SWIG.GET_REF_POS_CELESTIAL_IMPIX_G

def GET_REF_POS_CELESTIAL_CRPIX_L(*args):
  return _SLVTS_SWIG.GET_REF_POS_CELESTIAL_CRPIX_L(*args)
GET_REF_POS_CELESTIAL_CRPIX_L = _SLVTS_SWIG.GET_REF_POS_CELESTIAL_CRPIX_L

def GET_REF_POS_CELESTIAL_CRPIX_G(*args):
  return _SLVTS_SWIG.GET_REF_POS_CELESTIAL_CRPIX_G(*args)
GET_REF_POS_CELESTIAL_CRPIX_G = _SLVTS_SWIG.GET_REF_POS_CELESTIAL_CRPIX_G

def GET_REF_POS_CELESTIAL_LOCAL_L(*args):
  return _SLVTS_SWIG.GET_REF_POS_CELESTIAL_LOCAL_L(*args)
GET_REF_POS_CELESTIAL_LOCAL_L = _SLVTS_SWIG.GET_REF_POS_CELESTIAL_LOCAL_L

def GET_REF_POS_CELESTIAL_LOCAL_G(*args):
  return _SLVTS_SWIG.GET_REF_POS_CELESTIAL_LOCAL_G(*args)
GET_REF_POS_CELESTIAL_LOCAL_G = _SLVTS_SWIG.GET_REF_POS_CELESTIAL_LOCAL_G

def GET_REF_POS_CELESTIAL_LOCAL_C(*args):
  return _SLVTS_SWIG.GET_REF_POS_CELESTIAL_LOCAL_C(*args)
GET_REF_POS_CELESTIAL_LOCAL_C = _SLVTS_SWIG.GET_REF_POS_CELESTIAL_LOCAL_C

def GET_REF_POS_CELESTIAL_PSIP_CRPIX_L(*args):
  return _SLVTS_SWIG.GET_REF_POS_CELESTIAL_PSIP_CRPIX_L(*args)
GET_REF_POS_CELESTIAL_PSIP_CRPIX_L = _SLVTS_SWIG.GET_REF_POS_CELESTIAL_PSIP_CRPIX_L

def GET_REF_POS_CELESTIAL_PSIP_CRPIX_G(*args):
  return _SLVTS_SWIG.GET_REF_POS_CELESTIAL_PSIP_CRPIX_G(*args)
GET_REF_POS_CELESTIAL_PSIP_CRPIX_G = _SLVTS_SWIG.GET_REF_POS_CELESTIAL_PSIP_CRPIX_G

def GET_REF_POS_CELESTIAL_PSIP_LOCAL_L(*args):
  return _SLVTS_SWIG.GET_REF_POS_CELESTIAL_PSIP_LOCAL_L(*args)
GET_REF_POS_CELESTIAL_PSIP_LOCAL_L = _SLVTS_SWIG.GET_REF_POS_CELESTIAL_PSIP_LOCAL_L

def GET_REF_POS_CELESTIAL_PSIP_LOCAL_G(*args):
  return _SLVTS_SWIG.GET_REF_POS_CELESTIAL_PSIP_LOCAL_G(*args)
GET_REF_POS_CELESTIAL_PSIP_LOCAL_G = _SLVTS_SWIG.GET_REF_POS_CELESTIAL_PSIP_LOCAL_G

def GET_REF_POS_CELESTIAL_PSIP_LOCAL_C(*args):
  return _SLVTS_SWIG.GET_REF_POS_CELESTIAL_PSIP_LOCAL_C(*args)
GET_REF_POS_CELESTIAL_PSIP_LOCAL_C = _SLVTS_SWIG.GET_REF_POS_CELESTIAL_PSIP_LOCAL_C

def GET_REF_POS_DETECTED_LOCAL_L(*args):
  return _SLVTS_SWIG.GET_REF_POS_DETECTED_LOCAL_L(*args)
GET_REF_POS_DETECTED_LOCAL_L = _SLVTS_SWIG.GET_REF_POS_DETECTED_LOCAL_L

def GET_REF_POS_DETECTED_LOCAL_G(*args):
  return _SLVTS_SWIG.GET_REF_POS_DETECTED_LOCAL_G(*args)
GET_REF_POS_DETECTED_LOCAL_G = _SLVTS_SWIG.GET_REF_POS_DETECTED_LOCAL_G

def GET_REF_POS_DETECTED_LOCAL_C(*args):
  return _SLVTS_SWIG.GET_REF_POS_DETECTED_LOCAL_C(*args)
GET_REF_POS_DETECTED_LOCAL_C = _SLVTS_SWIG.GET_REF_POS_DETECTED_LOCAL_C

def GET_REF_POS_DETECTED_CRPIX_L(*args):
  return _SLVTS_SWIG.GET_REF_POS_DETECTED_CRPIX_L(*args)
GET_REF_POS_DETECTED_CRPIX_L = _SLVTS_SWIG.GET_REF_POS_DETECTED_CRPIX_L

def GET_REF_POS_DETECTED_CRPIX_G(*args):
  return _SLVTS_SWIG.GET_REF_POS_DETECTED_CRPIX_G(*args)
GET_REF_POS_DETECTED_CRPIX_G = _SLVTS_SWIG.GET_REF_POS_DETECTED_CRPIX_G

def GET_REF_POS_DETECTED_IMPIX_L(*args):
  return _SLVTS_SWIG.GET_REF_POS_DETECTED_IMPIX_L(*args)
GET_REF_POS_DETECTED_IMPIX_L = _SLVTS_SWIG.GET_REF_POS_DETECTED_IMPIX_L

def GET_REF_POS_DETECTED_IMPIX_G(*args):
  return _SLVTS_SWIG.GET_REF_POS_DETECTED_IMPIX_G(*args)
GET_REF_POS_DETECTED_IMPIX_G = _SLVTS_SWIG.GET_REF_POS_DETECTED_IMPIX_G

def GET_REF_POS_DETECTED_IMWLD_L(*args):
  return _SLVTS_SWIG.GET_REF_POS_DETECTED_IMWLD_L(*args)
GET_REF_POS_DETECTED_IMWLD_L = _SLVTS_SWIG.GET_REF_POS_DETECTED_IMWLD_L

def GET_REF_POS_DETECTED_IMWLD_G(*args):
  return _SLVTS_SWIG.GET_REF_POS_DETECTED_IMWLD_G(*args)
GET_REF_POS_DETECTED_IMWLD_G = _SLVTS_SWIG.GET_REF_POS_DETECTED_IMWLD_G

def GET_REF_POS_DETECTED_RADEC_L(*args):
  return _SLVTS_SWIG.GET_REF_POS_DETECTED_RADEC_L(*args)
GET_REF_POS_DETECTED_RADEC_L = _SLVTS_SWIG.GET_REF_POS_DETECTED_RADEC_L

def GET_REF_POS_DETECTED_RADEC_G(*args):
  return _SLVTS_SWIG.GET_REF_POS_DETECTED_RADEC_G(*args)
GET_REF_POS_DETECTED_RADEC_G = _SLVTS_SWIG.GET_REF_POS_DETECTED_RADEC_G

def GET_REF_POS_DETECTED_ASIP_CRPIX_L(*args):
  return _SLVTS_SWIG.GET_REF_POS_DETECTED_ASIP_CRPIX_L(*args)
GET_REF_POS_DETECTED_ASIP_CRPIX_L = _SLVTS_SWIG.GET_REF_POS_DETECTED_ASIP_CRPIX_L

def GET_REF_POS_DETECTED_ASIP_CRPIX_G(*args):
  return _SLVTS_SWIG.GET_REF_POS_DETECTED_ASIP_CRPIX_G(*args)
GET_REF_POS_DETECTED_ASIP_CRPIX_G = _SLVTS_SWIG.GET_REF_POS_DETECTED_ASIP_CRPIX_G

def GET_REF_POS_DETECTED_ASIP_IMPIX_L(*args):
  return _SLVTS_SWIG.GET_REF_POS_DETECTED_ASIP_IMPIX_L(*args)
GET_REF_POS_DETECTED_ASIP_IMPIX_L = _SLVTS_SWIG.GET_REF_POS_DETECTED_ASIP_IMPIX_L

def GET_REF_POS_DETECTED_ASIP_IMPIX_G(*args):
  return _SLVTS_SWIG.GET_REF_POS_DETECTED_ASIP_IMPIX_G(*args)
GET_REF_POS_DETECTED_ASIP_IMPIX_G = _SLVTS_SWIG.GET_REF_POS_DETECTED_ASIP_IMPIX_G

def GET_REF_POS_DETECTED_ASIP_IMWLD_L(*args):
  return _SLVTS_SWIG.GET_REF_POS_DETECTED_ASIP_IMWLD_L(*args)
GET_REF_POS_DETECTED_ASIP_IMWLD_L = _SLVTS_SWIG.GET_REF_POS_DETECTED_ASIP_IMWLD_L

def GET_REF_POS_DETECTED_ASIP_IMWLD_G(*args):
  return _SLVTS_SWIG.GET_REF_POS_DETECTED_ASIP_IMWLD_G(*args)
GET_REF_POS_DETECTED_ASIP_IMWLD_G = _SLVTS_SWIG.GET_REF_POS_DETECTED_ASIP_IMWLD_G

def GET_REF_POS_DETECTED_ASIP_RADEC_L(*args):
  return _SLVTS_SWIG.GET_REF_POS_DETECTED_ASIP_RADEC_L(*args)
GET_REF_POS_DETECTED_ASIP_RADEC_L = _SLVTS_SWIG.GET_REF_POS_DETECTED_ASIP_RADEC_L

def GET_REF_POS_DETECTED_ASIP_RADEC_G(*args):
  return _SLVTS_SWIG.GET_REF_POS_DETECTED_ASIP_RADEC_G(*args)
GET_REF_POS_DETECTED_ASIP_RADEC_G = _SLVTS_SWIG.GET_REF_POS_DETECTED_ASIP_RADEC_G

def GET_REF_DIFF(*args):
  return _SLVTS_SWIG.GET_REF_DIFF(*args)
GET_REF_DIFF = _SLVTS_SWIG.GET_REF_DIFF

def GET_REF_CAMERADISTPSIP(*args):
  return _SLVTS_SWIG.GET_REF_CAMERADISTPSIP(*args)
GET_REF_CAMERADISTPSIP = _SLVTS_SWIG.GET_REF_CAMERADISTPSIP


