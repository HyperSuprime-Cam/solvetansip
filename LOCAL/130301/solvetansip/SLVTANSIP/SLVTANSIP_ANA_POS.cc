//--------------------------------------------------
//SLVTANSIP_ANA_POS.cc
//
//
//Last Update 2013/02/01
//--------------------------------------------------
#include<iostream>
#include<cmath>
#include"SLVTANSIP_ANA.h"

using namespace std;
void CL_ANA::CALC_CRPIX(){
	FIT_GLOBL(1,1,6,CCD[NUM_CCD].CDPSIP);
	CRPIX[0]=CCD[NUM_CCD].CDPSIP[0][0];
	CRPIX[1]=CCD[NUM_CCD].CDPSIP[1][0];
}
void CL_ANA::CALC_CRVAL(){
	FIT_GLOBL(0,4,0,CCD[NUM_CCD].CDASIP);
	CRVAL[0]=CCD[NUM_CCD].CDASIP[0][0];
	CRVAL[1]=CCD[NUM_CCD].CDASIP[1][0];
}
void CL_ANA::CALC_X_GLOBL(){
	for(OID=0;OID<NUM_OBJ;OID++){
		CID=OBJ[OID].ID_CHIP;
		OBJ[OID].X_GLOBL[0]=CCD[OBJ[OID].ID_CHIP].GPOS[0]+OBJ[OID].X_LOCAL[0]*cos(CCD[CID].GPOS[2])-OBJ[OID].X_LOCAL[1]*sin(CCD[CID].GPOS[2]);
		OBJ[OID].X_GLOBL[1]=CCD[OBJ[OID].ID_CHIP].GPOS[1]+OBJ[OID].X_LOCAL[1]*cos(CCD[CID].GPOS[2])+OBJ[OID].X_LOCAL[0]*sin(CCD[CID].GPOS[2]);
	}
}
void CL_ANA::CALC_X_CRPIXLOCAL(){
	for(OID=0;OID<NUM_OBJ;OID++){
		CID=OBJ[OID].ID_CHIP;
	        OBJ[OID].X_CRPIXLOCAL[0]=OBJ[OID].X_LOCAL[0]-CCD[CID].CRPIX[0];
	        OBJ[OID].X_CRPIXLOCAL[1]=OBJ[OID].X_LOCAL[1]-CCD[CID].CRPIX[1];
	}
}
void CL_ANA::CALC_X_CRPIXGLOBL(){
	for(OID=0;OID<NUM_OBJ;OID++){
	        OBJ[OID].X_CRPIXGLOBL[0]=OBJ[OID].X_GLOBL[0]-CRPIX[0];
	        OBJ[OID].X_CRPIXGLOBL[1]=OBJ[OID].X_GLOBL[1]-CRPIX[1];
	}
}
void CL_ANA::CALC_X_IMWLD(){
	for(OID=0;OID<NUM_OBJ;OID++)
	F_PROJECTION(OBJ[OID].X_RADEC,OBJ[OID].X_IMWLD,CRVAL);
}
void CL_ANA::CALC_X_IMPXLGLOBL(){
	for(OID=0;OID<NUM_OBJ;OID++){
		OBJ[OID].X_IMPXLGLOBL[0]=CCD[NUM_CCD].InvCD[0][0]*OBJ[OID].X_IMWLD[0]+CCD[NUM_CCD].InvCD[0][1]*OBJ[OID].X_IMWLD[1];
	        OBJ[OID].X_IMPXLGLOBL[1]=CCD[NUM_CCD].InvCD[1][0]*OBJ[OID].X_IMWLD[0]+CCD[NUM_CCD].InvCD[1][1]*OBJ[OID].X_IMWLD[1];
	}
}
void CL_ANA::CALC_X_IMPXLLOCAL(){
	for(OID=0;OID<NUM_OBJ;OID++){
		CID=OBJ[OID].ID_CHIP;
		OBJ[OID].X_IMPXLLOCAL[0]=CCD[CID].InvCD[0][0]*OBJ[OID].X_IMWLD[0]+CCD[CID].InvCD[0][1]*OBJ[OID].X_IMWLD[1];
	        OBJ[OID].X_IMPXLLOCAL[1]=CCD[CID].InvCD[1][0]*OBJ[OID].X_IMWLD[0]+CCD[CID].InvCD[1][1]*OBJ[OID].X_IMWLD[1];
	}
}
void CL_ANA::CALC_X_CRPIXGLOBL_TAN(){
	for(OID=0;OID<NUM_OBJ;OID++){
		OBJ[OID].X_CRPIXGLOBL_TANfromRADEC[0]=OBJ[OID].X_IMPXLGLOBL[0];
		OBJ[OID].X_CRPIXGLOBL_TANfromRADEC[1]=OBJ[OID].X_IMPXLGLOBL[1];
	}
}
void CL_ANA::CALC_X_CRPIXLOCAL_TAN(){
	for(OID=0;OID<NUM_OBJ;OID++){
		OBJ[OID].X_CRPIXLOCAL_TANfromRADEC[0]=OBJ[OID].X_IMPXLLOCAL[0];
		OBJ[OID].X_CRPIXLOCAL_TANfromRADEC[1]=OBJ[OID].X_IMPXLLOCAL[1];
	}
}
void CL_ANA::CALC_X_GLOBL_TAN(){
	for(OID=0;OID<NUM_OBJ;OID++){
	        OBJ[OID].X_GLOBL_TANfromRADEC[0]=OBJ[OID].X_CRPIXGLOBL_TANfromRADEC[0]+CCD[NUM_CCD].CRPIX[0];
	        OBJ[OID].X_GLOBL_TANfromRADEC[1]=OBJ[OID].X_CRPIXGLOBL_TANfromRADEC[1]+CCD[NUM_CCD].CRPIX[1];
	}
}
void CL_ANA::CALC_X_LOCAL_TAN(){
	for(OID=0;OID<NUM_OBJ;OID++){
		CID=OBJ[OID].ID_CHIP;
	        OBJ[OID].X_LOCAL_TANfromRADEC[0]=OBJ[OID].X_CRPIXLOCAL_TANfromRADEC[0]+CCD[CID].CRPIX[0];
	        OBJ[OID].X_LOCAL_TANfromRADEC[1]=OBJ[OID].X_CRPIXLOCAL_TANfromRADEC[1]+CCD[CID].CRPIX[1];
	}
}
void CL_ANA::CALC_X_IMPXLGLOBL_TAN(){
	for(OID=0;OID<NUM_OBJ;OID++){
		OBJ[OID].X_IMPXLGLOBL_TANfromGLOBL[0]=OBJ[OID].X_CRPIXGLOBL[0];
		OBJ[OID].X_IMPXLGLOBL_TANfromGLOBL[1]=OBJ[OID].X_CRPIXGLOBL[1];
	}
}
void CL_ANA::CALC_X_IMPXLLOCAL_TAN(){
	for(OID=0;OID<NUM_OBJ;OID++){
		OBJ[OID].X_IMPXLLOCAL_TANfromLOCAL[0]=OBJ[OID].X_CRPIXLOCAL[0];
		OBJ[OID].X_IMPXLLOCAL_TANfromLOCAL[1]=OBJ[OID].X_CRPIXLOCAL[1];
	}
}
void CL_ANA::CALC_X_IMWLDGLOBL_TAN(){
	for(OID=0;OID<NUM_OBJ;OID++){
		OBJ[OID].X_IMWLD_TANfromGLOBL[0]=CCD[NUM_CCD].CD[0][0]*OBJ[OID].X_IMPXLGLOBL_TANfromGLOBL[0]+CCD[NUM_CCD].CD[0][1]*OBJ[OID].X_IMPXLGLOBL_TANfromGLOBL[1];
		OBJ[OID].X_IMWLD_TANfromGLOBL[1]=CCD[NUM_CCD].CD[1][0]*OBJ[OID].X_IMPXLGLOBL_TANfromGLOBL[0]+CCD[NUM_CCD].CD[1][1]*OBJ[OID].X_IMPXLGLOBL_TANfromGLOBL[1];
	}
}
void CL_ANA::CALC_X_IMWLDLOCAL_TAN(){
	for(OID=0;OID<NUM_OBJ;OID++){
		CID=OBJ[OID].ID_CHIP;
		OBJ[OID].X_IMWLD_TANfromLOCAL[0]=CCD[CID].CD[0][0]*OBJ[OID].X_IMPXLLOCAL_TANfromLOCAL[0]+CCD[CID].CD[0][1]*OBJ[OID].X_IMPXLLOCAL_TANfromLOCAL[1];
		OBJ[OID].X_IMWLD_TANfromLOCAL[1]=CCD[CID].CD[1][0]*OBJ[OID].X_IMPXLLOCAL_TANfromLOCAL[0]+CCD[CID].CD[1][1]*OBJ[OID].X_IMPXLLOCAL_TANfromLOCAL[1];
	}
}
void CL_ANA::CALC_X_RADEC_TAN(){
	for(OID=0;OID<NUM_OBJ;OID++){
		F_InvPROJECTION(OBJ[OID].X_IMWLD_TANfromLOCAL,OBJ[OID].X_RADEC_TANfromLOCAL,CRVAL);
		F_InvPROJECTION(OBJ[OID].X_IMWLD_TANfromGLOBL,OBJ[OID].X_RADEC_TANfromGLOBL,CRVAL);
	}
}
void CL_ANA::CALC_X_CRPIXGLOBL_SIP(){
	for(OID=0;OID<NUM_OBJ;OID++){
		OBJ[OID].X_CRPIXGLOBL_SIPfromRADEC[0]=F_CALCVALUE(ORDER_PSIP,CCD[NUM_CCD].PSIP[0],OBJ[OID].X_IMPXLGLOBL)+OBJ[OID].X_IMPXLGLOBL[0];
		OBJ[OID].X_CRPIXGLOBL_SIPfromRADEC[1]=F_CALCVALUE(ORDER_PSIP,CCD[NUM_CCD].PSIP[1],OBJ[OID].X_IMPXLGLOBL)+OBJ[OID].X_IMPXLGLOBL[1];
	}
}
void CL_ANA::CALC_X_CRPIXLOCAL_SIP(){
	for(OID=0;OID<NUM_OBJ;OID++){
		CID=OBJ[OID].ID_CHIP;
		OBJ[OID].X_CRPIXLOCAL_SIPfromRADEC[0]=F_CALCVALUE(ORDER_PSIP,CCD[CID].PSIP[0],OBJ[OID].X_IMPXLGLOBL)+OBJ[OID].X_IMPXLLOCAL[0];
		OBJ[OID].X_CRPIXLOCAL_SIPfromRADEC[1]=F_CALCVALUE(ORDER_PSIP,CCD[CID].PSIP[1],OBJ[OID].X_IMPXLGLOBL)+OBJ[OID].X_IMPXLLOCAL[1];
	}
}
void CL_ANA::CALC_X_GLOBL_SIP(){
	for(OID=0;OID<NUM_OBJ;OID++){
	        OBJ[OID].X_GLOBL_SIPfromRADEC[0]=OBJ[OID].X_CRPIXGLOBL_SIPfromRADEC[0]+CCD[NUM_CCD].CRPIX[0];
	        OBJ[OID].X_GLOBL_SIPfromRADEC[1]=OBJ[OID].X_CRPIXGLOBL_SIPfromRADEC[1]+CCD[NUM_CCD].CRPIX[1];
	}
}
void CL_ANA::CALC_X_LOCAL_SIP(){
	for(OID=0;OID<NUM_OBJ;OID++){
		CID=OBJ[OID].ID_CHIP;
	        OBJ[OID].X_LOCAL_SIPfromRADEC[0]=OBJ[OID].X_CRPIXLOCAL_SIPfromRADEC[0]+CCD[CID].CRPIX[0];
	        OBJ[OID].X_LOCAL_SIPfromRADEC[1]=OBJ[OID].X_CRPIXLOCAL_SIPfromRADEC[1]+CCD[CID].CRPIX[1];
	}
}
void CL_ANA::CALC_X_IMPXLGLOBL_SIP(){
	for(OID=0;OID<NUM_OBJ;OID++){
		OBJ[OID].X_IMPXLGLOBL_SIPfromGLOBL[0]=F_CALCVALUE(ORDER_ASIP,CCD[NUM_CCD].ASIP[0],OBJ[OID].X_CRPIXGLOBL)+OBJ[OID].X_CRPIXGLOBL[0];
		OBJ[OID].X_IMPXLGLOBL_SIPfromGLOBL[1]=F_CALCVALUE(ORDER_ASIP,CCD[NUM_CCD].ASIP[1],OBJ[OID].X_CRPIXGLOBL)+OBJ[OID].X_CRPIXGLOBL[1];
	}
}
void CL_ANA::CALC_X_IMPXLLOCAL_SIP(){
	for(OID=0;OID<NUM_OBJ;OID++){
		CID=OBJ[OID].ID_CHIP;
		OBJ[OID].X_IMPXLLOCAL_SIPfromLOCAL[0]=F_CALCVALUE(ORDER_ASIP,CCD[CID].ASIP[0],OBJ[OID].X_CRPIXLOCAL)+OBJ[OID].X_CRPIXLOCAL[0];
		OBJ[OID].X_IMPXLLOCAL_SIPfromLOCAL[1]=F_CALCVALUE(ORDER_ASIP,CCD[CID].ASIP[1],OBJ[OID].X_CRPIXLOCAL)+OBJ[OID].X_CRPIXLOCAL[1];
	}
}
void CL_ANA::CALC_X_IMWLDGLOBL_SIP(){
	for(OID=0;OID<NUM_OBJ;OID++){
		OBJ[OID].X_IMWLD_SIPfromGLOBL[0]=CCD[NUM_CCD].CD[0][0]*OBJ[OID].X_IMPXLGLOBL_SIPfromGLOBL[0]+CCD[NUM_CCD].CD[0][1]*OBJ[OID].X_IMPXLGLOBL_SIPfromGLOBL[1];
		OBJ[OID].X_IMWLD_SIPfromGLOBL[1]=CCD[NUM_CCD].CD[1][0]*OBJ[OID].X_IMPXLGLOBL_SIPfromGLOBL[0]+CCD[NUM_CCD].CD[1][1]*OBJ[OID].X_IMPXLGLOBL_SIPfromGLOBL[1];
	}
}
void CL_ANA::CALC_X_IMWLDLOCAL_SIP(){
	for(OID=0;OID<NUM_OBJ;OID++){
		CID=OBJ[OID].ID_CHIP;
		OBJ[OID].X_IMWLD_SIPfromLOCAL[0]=CCD[CID].CD[0][0]*OBJ[OID].X_IMPXLLOCAL_SIPfromLOCAL[0]+CCD[CID].CD[0][1]*OBJ[OID].X_IMPXLLOCAL_SIPfromLOCAL[1];
		OBJ[OID].X_IMWLD_SIPfromLOCAL[1]=CCD[CID].CD[1][0]*OBJ[OID].X_IMPXLLOCAL_SIPfromLOCAL[0]+CCD[CID].CD[1][1]*OBJ[OID].X_IMPXLLOCAL_SIPfromLOCAL[1];
	}
}
void CL_ANA::CALC_X_RADEC_SIP(){
	for(OID=0;OID<NUM_OBJ;OID++){
		F_InvPROJECTION(OBJ[OID].X_IMWLD_SIPfromLOCAL,OBJ[OID].X_RADEC_SIPfromLOCAL,CRVAL);
		F_InvPROJECTION(OBJ[OID].X_IMWLD_SIPfromGLOBL,OBJ[OID].X_RADEC_SIPfromGLOBL,CRVAL);
	}
}
void CL_ANA::CALC_X_CENTER(){
	int NUM;
	double CPIXEL[2],CRADEC[2];
	NUM=0;
	CPIXEL[0]=CPIXEL[1]=CRADEC[0]=CRADEC[1]=0;
	for(OID=0;OID<NUM_OBJ;OID++)
	if(OBJ[OID].FLAG_OBJ==1){
		CPIXEL[0]+=OBJ[OID].X_GLOBL[0];
		CPIXEL[1]+=OBJ[OID].X_GLOBL[1];
		CRADEC[0]+=OBJ[OID].X_RADEC[0];
		CRADEC[1]+=OBJ[OID].X_RADEC[1];
		NUM++;
	}
	CENTER_PIXEL[0]=CPIXEL[0]/NUM;
	CENTER_PIXEL[1]=CPIXEL[1]/NUM;
	CENTER_RADEC[0]=CRADEC[0]/NUM;
	CENTER_RADEC[1]=CRADEC[1]/NUM;
	if(STDOUT==2)cout<<"CENTER PIXEL : (" << CENTER_PIXEL[0]<< " , " <<CENTER_PIXEL[1]<<")"<<endl;
	if(STDOUT==2)cout<<"CENTER RADEC : (" << CENTER_RADEC[0]<< " , " <<CENTER_RADEC[1]<<")"<<endl;
}
void CL_ANA::CALC_X_GLOBLfromIMWLD(){
	for(OID=0;OID<NUM_OBJ;OID++){
		OBJ[OID].X_GLOBL_SIPfromRADEC[0]=F_CALCVALUE(ORDER_PSIP,CCD[NUM_CCD].CDPSIP[0],OBJ[OID].X_IMWLD);
		OBJ[OID].X_GLOBL_SIPfromRADEC[1]=F_CALCVALUE(ORDER_PSIP,CCD[NUM_CCD].CDPSIP[1],OBJ[OID].X_IMWLD);
	}
}
void CL_ANA::CALC_X_RADECfromCRPIXGLOBL(){
	for(OID=0;OID<NUM_OBJ;OID++){
		OBJ[OID].X_RADEC_SIPfromLOCAL[0]=F_CALCVALUE(ORDER_ASIP,CCD[NUM_CCD].CDASIP[0],OBJ[OID].X_CRPIXGLOBL);
		OBJ[OID].X_RADEC_SIPfromLOCAL[1]=F_CALCVALUE(ORDER_ASIP,CCD[NUM_CCD].CDASIP[1],OBJ[OID].X_CRPIXGLOBL);
	}
}
void CL_ANA::CALC_MAX_R(){
	MAX_R=0;
	for(OID=0;OID<NUM_OBJ;OID++)
	if(hypot(OBJ[OID].X_CRPIXGLOBL[0],OBJ[OID].X_CRPIXGLOBL[1])>MAX_R)
	MAX_R=hypot(OBJ[OID].X_CRPIXGLOBL[0],OBJ[OID].X_CRPIXGLOBL[1]);
}
void CL_ANA::CALC_DIST(){
	double DIST[2][2];
	for(OID=0;OID<NUM_OBJ;OID++){
		DIST[0][0]=F_CALCVALUE(ORDER_PSIP,CCD[NUM_CCD].dPSIP[0][0],OBJ[OID].X_IMPXLGLOBL)+1.0;
		DIST[0][1]=F_CALCVALUE(ORDER_PSIP,CCD[NUM_CCD].dPSIP[0][1],OBJ[OID].X_IMPXLGLOBL)+0.0;
		DIST[1][0]=F_CALCVALUE(ORDER_PSIP,CCD[NUM_CCD].dPSIP[1][0],OBJ[OID].X_IMPXLGLOBL)+0.0;
		DIST[1][1]=F_CALCVALUE(ORDER_PSIP,CCD[NUM_CCD].dPSIP[1][1],OBJ[OID].X_IMPXLGLOBL)+1.0;
		OBJ[OID].OPT_MAG     =DIST[0][0]*DIST[1][1]-DIST[1][0]*DIST[0][1];
		OBJ[OID].OPT_CONV    =0.5*(DIST[0][0]+DIST[1][1])-1.0;
		OBJ[OID].OPT_SHEAR[0]=0.5*(DIST[0][0]-DIST[1][1]);
		OBJ[OID].OPT_SHEAR[1]=0.5*(DIST[0][1]+DIST[1][0]);
		OBJ[OID].OPT_ROT     =0.5*(DIST[0][1]-DIST[1][0]);
	}
}

