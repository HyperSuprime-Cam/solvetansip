# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SLVTANSIP_SWIG', [dirname(__file__)])
        except ImportError:
            import _SLVTANSIP_SWIG
            return _SLVTANSIP_SWIG
        if fp is not None:
            try:
                _mod = imp.load_module('_SLVTANSIP_SWIG', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _SLVTANSIP_SWIG = swig_import_helper()
    del swig_import_helper
else:
    import _SLVTANSIP_SWIG
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SLVTANSIP_SWIG.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _SLVTANSIP_SWIG.SwigPyIterator_value(self)
    def incr(self, n = 1): return _SLVTANSIP_SWIG.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _SLVTANSIP_SWIG.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _SLVTANSIP_SWIG.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _SLVTANSIP_SWIG.SwigPyIterator_equal(self, *args)
    def copy(self): return _SLVTANSIP_SWIG.SwigPyIterator_copy(self)
    def next(self): return _SLVTANSIP_SWIG.SwigPyIterator_next(self)
    def __next__(self): return _SLVTANSIP_SWIG.SwigPyIterator___next__(self)
    def previous(self): return _SLVTANSIP_SWIG.SwigPyIterator_previous(self)
    def advance(self, *args): return _SLVTANSIP_SWIG.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _SLVTANSIP_SWIG.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _SLVTANSIP_SWIG.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _SLVTANSIP_SWIG.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _SLVTANSIP_SWIG.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _SLVTANSIP_SWIG.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _SLVTANSIP_SWIG.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _SLVTANSIP_SWIG.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def SLVTANSIP_SWIG_SET(*args):
  return _SLVTANSIP_SWIG.SLVTANSIP_SWIG_SET(*args)
SLVTANSIP_SWIG_SET = _SLVTANSIP_SWIG.SLVTANSIP_SWIG_SET

def SLVTANSIP_SWIG_SLV(*args):
  return _SLVTANSIP_SWIG.SLVTANSIP_SWIG_SLV(*args)
SLVTANSIP_SWIG_SLV = _SLVTANSIP_SWIG.SLVTANSIP_SWIG_SLV

def SLVTANSIP_SWIG_EXT(*args):
  return _SLVTANSIP_SWIG.SLVTANSIP_SWIG_EXT(*args)
SLVTANSIP_SWIG_EXT = _SLVTANSIP_SWIG.SLVTANSIP_SWIG_EXT

def SLVTANSIP_SWIG_OUT(*args):
  return _SLVTANSIP_SWIG.SLVTANSIP_SWIG_OUT(*args)
SLVTANSIP_SWIG_OUT = _SLVTANSIP_SWIG.SLVTANSIP_SWIG_OUT

def SLVTANSIP_SWIG_DEL(*args):
  return _SLVTANSIP_SWIG.SLVTANSIP_SWIG_DEL(*args)
SLVTANSIP_SWIG_DEL = _SLVTANSIP_SWIG.SLVTANSIP_SWIG_DEL

def SLVTANSIP_SWIG_MAKE_ANAfromfits(*args):
  return _SLVTANSIP_SWIG.SLVTANSIP_SWIG_MAKE_ANAfromfits(*args)
SLVTANSIP_SWIG_MAKE_ANAfromfits = _SLVTANSIP_SWIG.SLVTANSIP_SWIG_MAKE_ANAfromfits

def SLVTANSIP_SWIG_DEL_ANAfromfits(*args):
  return _SLVTANSIP_SWIG.SLVTANSIP_SWIG_DEL_ANAfromfits(*args)
SLVTANSIP_SWIG_DEL_ANAfromfits = _SLVTANSIP_SWIG.SLVTANSIP_SWIG_DEL_ANAfromfits

def SLVTANSIP_SWIG_GET_OUTFLAG(*args):
  return _SLVTANSIP_SWIG.SLVTANSIP_SWIG_GET_OUTFLAG(*args)
SLVTANSIP_SWIG_GET_OUTFLAG = _SLVTANSIP_SWIG.SLVTANSIP_SWIG_GET_OUTFLAG

def SLVTANSIP_SWIG_GET_CCDNUM(*args):
  return _SLVTANSIP_SWIG.SLVTANSIP_SWIG_GET_CCDNUM(*args)
SLVTANSIP_SWIG_GET_CCDNUM = _SLVTANSIP_SWIG.SLVTANSIP_SWIG_GET_CCDNUM

def SLVTANSIP_SWIG_GET_OUTDIRCCD(*args):
  return _SLVTANSIP_SWIG.SLVTANSIP_SWIG_GET_OUTDIRCCD(*args)
SLVTANSIP_SWIG_GET_OUTDIRCCD = _SLVTANSIP_SWIG.SLVTANSIP_SWIG_GET_OUTDIRCCD

def SLVTANSIP_SWIG_GET_OUTDIROBJ(*args):
  return _SLVTANSIP_SWIG.SLVTANSIP_SWIG_GET_OUTDIROBJ(*args)
SLVTANSIP_SWIG_GET_OUTDIROBJ = _SLVTANSIP_SWIG.SLVTANSIP_SWIG_GET_OUTDIROBJ

def SLVTANSIP_SWIG_GET_MAXR(*args):
  return _SLVTANSIP_SWIG.SLVTANSIP_SWIG_GET_MAXR(*args)
SLVTANSIP_SWIG_GET_MAXR = _SLVTANSIP_SWIG.SLVTANSIP_SWIG_GET_MAXR

def SLVTANSIP_SWIG_GET_CRPIX(*args):
  return _SLVTANSIP_SWIG.SLVTANSIP_SWIG_GET_CRPIX(*args)
SLVTANSIP_SWIG_GET_CRPIX = _SLVTANSIP_SWIG.SLVTANSIP_SWIG_GET_CRPIX

def SLVTANSIP_SWIG_GET_CRVAL(*args):
  return _SLVTANSIP_SWIG.SLVTANSIP_SWIG_GET_CRVAL(*args)
SLVTANSIP_SWIG_GET_CRVAL = _SLVTANSIP_SWIG.SLVTANSIP_SWIG_GET_CRVAL

def SLVTANSIP_SWIG_GET_CORNAR_GLOBAL(*args):
  return _SLVTANSIP_SWIG.SLVTANSIP_SWIG_GET_CORNAR_GLOBAL(*args)
SLVTANSIP_SWIG_GET_CORNAR_GLOBAL = _SLVTANSIP_SWIG.SLVTANSIP_SWIG_GET_CORNAR_GLOBAL

def SLVTANSIP_SWIG_GET_GPOS_GLOBAL(*args):
  return _SLVTANSIP_SWIG.SLVTANSIP_SWIG_GET_GPOS_GLOBAL(*args)
SLVTANSIP_SWIG_GET_GPOS_GLOBAL = _SLVTANSIP_SWIG.SLVTANSIP_SWIG_GET_GPOS_GLOBAL

def SLVTANSIP_SWIG_GET_TANPOSITION_LOCAL(*args):
  return _SLVTANSIP_SWIG.SLVTANSIP_SWIG_GET_TANPOSITION_LOCAL(*args)
SLVTANSIP_SWIG_GET_TANPOSITION_LOCAL = _SLVTANSIP_SWIG.SLVTANSIP_SWIG_GET_TANPOSITION_LOCAL

def SLVTANSIP_SWIG_GET_TANPOSITION_RADEC(*args):
  return _SLVTANSIP_SWIG.SLVTANSIP_SWIG_GET_TANPOSITION_RADEC(*args)
SLVTANSIP_SWIG_GET_TANPOSITION_RADEC = _SLVTANSIP_SWIG.SLVTANSIP_SWIG_GET_TANPOSITION_RADEC

def SLVTANSIP_SWIG_GET_SIPPOSITION_LOCAL(*args):
  return _SLVTANSIP_SWIG.SLVTANSIP_SWIG_GET_SIPPOSITION_LOCAL(*args)
SLVTANSIP_SWIG_GET_SIPPOSITION_LOCAL = _SLVTANSIP_SWIG.SLVTANSIP_SWIG_GET_SIPPOSITION_LOCAL

def SLVTANSIP_SWIG_GET_SIPPOSITION_RADEC(*args):
  return _SLVTANSIP_SWIG.SLVTANSIP_SWIG_GET_SIPPOSITION_RADEC(*args)
SLVTANSIP_SWIG_GET_SIPPOSITION_RADEC = _SLVTANSIP_SWIG.SLVTANSIP_SWIG_GET_SIPPOSITION_RADEC
class Vdouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vdouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vdouble, name)
    __repr__ = _swig_repr
    def iterator(self): return _SLVTANSIP_SWIG.Vdouble_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _SLVTANSIP_SWIG.Vdouble___nonzero__(self)
    def __bool__(self): return _SLVTANSIP_SWIG.Vdouble___bool__(self)
    def __len__(self): return _SLVTANSIP_SWIG.Vdouble___len__(self)
    def pop(self): return _SLVTANSIP_SWIG.Vdouble_pop(self)
    def __getslice__(self, *args): return _SLVTANSIP_SWIG.Vdouble___getslice__(self, *args)
    def __setslice__(self, *args): return _SLVTANSIP_SWIG.Vdouble___setslice__(self, *args)
    def __delslice__(self, *args): return _SLVTANSIP_SWIG.Vdouble___delslice__(self, *args)
    def __delitem__(self, *args): return _SLVTANSIP_SWIG.Vdouble___delitem__(self, *args)
    def __getitem__(self, *args): return _SLVTANSIP_SWIG.Vdouble___getitem__(self, *args)
    def __setitem__(self, *args): return _SLVTANSIP_SWIG.Vdouble___setitem__(self, *args)
    def append(self, *args): return _SLVTANSIP_SWIG.Vdouble_append(self, *args)
    def empty(self): return _SLVTANSIP_SWIG.Vdouble_empty(self)
    def size(self): return _SLVTANSIP_SWIG.Vdouble_size(self)
    def clear(self): return _SLVTANSIP_SWIG.Vdouble_clear(self)
    def swap(self, *args): return _SLVTANSIP_SWIG.Vdouble_swap(self, *args)
    def get_allocator(self): return _SLVTANSIP_SWIG.Vdouble_get_allocator(self)
    def begin(self): return _SLVTANSIP_SWIG.Vdouble_begin(self)
    def end(self): return _SLVTANSIP_SWIG.Vdouble_end(self)
    def rbegin(self): return _SLVTANSIP_SWIG.Vdouble_rbegin(self)
    def rend(self): return _SLVTANSIP_SWIG.Vdouble_rend(self)
    def pop_back(self): return _SLVTANSIP_SWIG.Vdouble_pop_back(self)
    def erase(self, *args): return _SLVTANSIP_SWIG.Vdouble_erase(self, *args)
    def __init__(self, *args): 
        this = _SLVTANSIP_SWIG.new_Vdouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _SLVTANSIP_SWIG.Vdouble_push_back(self, *args)
    def front(self): return _SLVTANSIP_SWIG.Vdouble_front(self)
    def back(self): return _SLVTANSIP_SWIG.Vdouble_back(self)
    def assign(self, *args): return _SLVTANSIP_SWIG.Vdouble_assign(self, *args)
    def resize(self, *args): return _SLVTANSIP_SWIG.Vdouble_resize(self, *args)
    def insert(self, *args): return _SLVTANSIP_SWIG.Vdouble_insert(self, *args)
    def reserve(self, *args): return _SLVTANSIP_SWIG.Vdouble_reserve(self, *args)
    def capacity(self): return _SLVTANSIP_SWIG.Vdouble_capacity(self)
    __swig_destroy__ = _SLVTANSIP_SWIG.delete_Vdouble
    __del__ = lambda self : None;
Vdouble_swigregister = _SLVTANSIP_SWIG.Vdouble_swigregister
Vdouble_swigregister(Vdouble)

class VVdouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VVdouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VVdouble, name)
    __repr__ = _swig_repr
    def iterator(self): return _SLVTANSIP_SWIG.VVdouble_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _SLVTANSIP_SWIG.VVdouble___nonzero__(self)
    def __bool__(self): return _SLVTANSIP_SWIG.VVdouble___bool__(self)
    def __len__(self): return _SLVTANSIP_SWIG.VVdouble___len__(self)
    def pop(self): return _SLVTANSIP_SWIG.VVdouble_pop(self)
    def __getslice__(self, *args): return _SLVTANSIP_SWIG.VVdouble___getslice__(self, *args)
    def __setslice__(self, *args): return _SLVTANSIP_SWIG.VVdouble___setslice__(self, *args)
    def __delslice__(self, *args): return _SLVTANSIP_SWIG.VVdouble___delslice__(self, *args)
    def __delitem__(self, *args): return _SLVTANSIP_SWIG.VVdouble___delitem__(self, *args)
    def __getitem__(self, *args): return _SLVTANSIP_SWIG.VVdouble___getitem__(self, *args)
    def __setitem__(self, *args): return _SLVTANSIP_SWIG.VVdouble___setitem__(self, *args)
    def append(self, *args): return _SLVTANSIP_SWIG.VVdouble_append(self, *args)
    def empty(self): return _SLVTANSIP_SWIG.VVdouble_empty(self)
    def size(self): return _SLVTANSIP_SWIG.VVdouble_size(self)
    def clear(self): return _SLVTANSIP_SWIG.VVdouble_clear(self)
    def swap(self, *args): return _SLVTANSIP_SWIG.VVdouble_swap(self, *args)
    def get_allocator(self): return _SLVTANSIP_SWIG.VVdouble_get_allocator(self)
    def begin(self): return _SLVTANSIP_SWIG.VVdouble_begin(self)
    def end(self): return _SLVTANSIP_SWIG.VVdouble_end(self)
    def rbegin(self): return _SLVTANSIP_SWIG.VVdouble_rbegin(self)
    def rend(self): return _SLVTANSIP_SWIG.VVdouble_rend(self)
    def pop_back(self): return _SLVTANSIP_SWIG.VVdouble_pop_back(self)
    def erase(self, *args): return _SLVTANSIP_SWIG.VVdouble_erase(self, *args)
    def __init__(self, *args): 
        this = _SLVTANSIP_SWIG.new_VVdouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _SLVTANSIP_SWIG.VVdouble_push_back(self, *args)
    def front(self): return _SLVTANSIP_SWIG.VVdouble_front(self)
    def back(self): return _SLVTANSIP_SWIG.VVdouble_back(self)
    def assign(self, *args): return _SLVTANSIP_SWIG.VVdouble_assign(self, *args)
    def resize(self, *args): return _SLVTANSIP_SWIG.VVdouble_resize(self, *args)
    def insert(self, *args): return _SLVTANSIP_SWIG.VVdouble_insert(self, *args)
    def reserve(self, *args): return _SLVTANSIP_SWIG.VVdouble_reserve(self, *args)
    def capacity(self): return _SLVTANSIP_SWIG.VVdouble_capacity(self)
    __swig_destroy__ = _SLVTANSIP_SWIG.delete_VVdouble
    __del__ = lambda self : None;
VVdouble_swigregister = _SLVTANSIP_SWIG.VVdouble_swigregister
VVdouble_swigregister(VVdouble)



