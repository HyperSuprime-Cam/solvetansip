/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE

#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Python.h has to appear first */
#include <Python.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic CAPI SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The swig conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif
/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif


/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif


/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);
    PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}



#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif


/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(ptr, type, flags)
#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         PySwigClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, (char *) msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char*) name, obj);
  Py_DECREF(obj);                            
}

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* PySwigClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
} PySwigClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  PySwigClientData *data = (PySwigClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  PySwigClientData *data = desc ? (PySwigClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME PySwigClientData * 
PySwigClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    PySwigClientData *data = (PySwigClientData *)malloc(sizeof(PySwigClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    return data;
  }
}

SWIGRUNTIME void 
PySwigClientData_Del(PySwigClientData* data)
{
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== PySwigObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
} PySwigObject;

SWIGRUNTIME PyObject *
PySwigObject_long(PySwigObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
PySwigObject_format(const char* fmt, PySwigObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, PySwigObject_long(v)) == 0) {
      PyObject *ofmt = PyString_FromString(fmt);
      if (ofmt) {
	res = PyString_Format(ofmt,args);
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
PySwigObject_oct(PySwigObject *v)
{
  return PySwigObject_format("%o",v);
}

SWIGRUNTIME PyObject *
PySwigObject_hex(PySwigObject *v)
{
  return PySwigObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
PySwigObject_repr(PySwigObject *v)
#else
PySwigObject_repr(PySwigObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *hex = PySwigObject_hex(v);    
  PyObject *repr = PyString_FromFormat("<Swig Object of type '%s' at 0x%s>", name, PyString_AsString(hex));
  Py_DECREF(hex);
  if (v->next) {
#ifdef METH_NOARGS
    PyObject *nrep = PySwigObject_repr((PySwigObject *)v->next);
#else
    PyObject *nrep = PySwigObject_repr((PySwigObject *)v->next, args);
#endif
    PyString_ConcatAndDel(&repr,nrep);
  }
  return repr;  
}

SWIGRUNTIME int
PySwigObject_print(PySwigObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
#ifdef METH_NOARGS
  PyObject *repr = PySwigObject_repr(v);
#else
  PyObject *repr = PySwigObject_repr(v, NULL);
#endif
  if (repr) {
    fputs(PyString_AsString(repr), fp);
    Py_DECREF(repr);
    return 0; 
  } else {
    return 1; 
  }
}

SWIGRUNTIME PyObject *
PySwigObject_str(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
    PyString_FromString(result) : 0;
}

SWIGRUNTIME int
PySwigObject_compare(PySwigObject *v, PySwigObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

SWIGRUNTIME PyTypeObject* _PySwigObject_type(void);

SWIGRUNTIME PyTypeObject*
PySwigObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigObject_type();
  return type;
}

SWIGRUNTIMEINLINE int
PySwigObject_Check(PyObject *op) {
  return ((op)->ob_type == PySwigObject_type())
    || (strcmp((op)->ob_type->tp_name,"PySwigObject") == 0);
}

SWIGRUNTIME PyObject *
PySwigObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
PySwigObject_dealloc(PyObject *v)
{
  PySwigObject *sobj = (PySwigObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    PySwigClientData *data = ty ? (PySwigClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporal object to carry the destroy operation */
	PyObject *tmp = PySwigObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
PySwigObject_append(PyObject* v, PyObject* next)
{
  PySwigObject *sobj = (PySwigObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!PySwigObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
PySwigObject_next(PyObject* v)
#else
PySwigObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  PySwigObject *sobj = (PySwigObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
PySwigObject_disown(PyObject *v)
#else
PySwigObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  PySwigObject *sobj = (PySwigObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
PySwigObject_acquire(PyObject *v)
#else
PySwigObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  PySwigObject *sobj = (PySwigObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
PySwigObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#else
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      PySwigObject *sobj = (PySwigObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  PySwigObject_acquire(v);
	} else {
	  PySwigObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  PySwigObject_acquire(v,args);
	} else {
	  PySwigObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)PySwigObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)PySwigObject_acquire, METH_NOARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)PySwigObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)PySwigObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)PySwigObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)PySwigObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)PySwigObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)PySwigObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)PySwigObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)PySwigObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)PySwigObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)PySwigObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
PySwigObject_getattr(PySwigObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
_PySwigObject_type(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods PySwigObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    (binaryfunc)0, /*nb_divide*/
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
    (coercion)0,   /*nb_coerce*/
    (unaryfunc)PySwigObject_long, /*nb_int*/
    (unaryfunc)PySwigObject_long, /*nb_long*/
    (unaryfunc)0,                 /*nb_float*/
    (unaryfunc)PySwigObject_oct,  /*nb_oct*/
    (unaryfunc)PySwigObject_hex,  /*nb_hex*/
#if PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject pyswigobject_type;  
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp
      = {
	PyObject_HEAD_INIT(NULL)
	0,				    /* ob_size */
	(char *)"PySwigObject",		    /* tp_name */
	sizeof(PySwigObject),		    /* tp_basicsize */
	0,			            /* tp_itemsize */
	(destructor)PySwigObject_dealloc,   /* tp_dealloc */
	(printfunc)PySwigObject_print,	    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
	(getattrfunc)PySwigObject_getattr,  /* tp_getattr */ 
#else
	(getattrfunc)0,			    /* tp_getattr */ 
#endif
	(setattrfunc)0,			    /* tp_setattr */ 
	(cmpfunc)PySwigObject_compare,	    /* tp_compare */ 
	(reprfunc)PySwigObject_repr,	    /* tp_repr */    
	&PySwigObject_as_number,	    /* tp_as_number */
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */
	(hashfunc)0,			    /* tp_hash */
	(ternaryfunc)0,			    /* tp_call */
	(reprfunc)PySwigObject_str,	    /* tp_str */
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigobject_doc, 	            /* tp_doc */        
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	0,                                  /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	swigobject_methods,		    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0,	                            /* tp_free */	   
        0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
 	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    pyswigobject_type = tmp;
    pyswigobject_type.ob_type = &PyType_Type;
    type_init = 1;
  }
  return &pyswigobject_type;
}

SWIGRUNTIME PyObject *
PySwigObject_New(void *ptr, swig_type_info *ty, int own)
{
  PySwigObject *sobj = PyObject_NEW(PySwigObject, PySwigObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} PySwigPacked;

SWIGRUNTIME int
PySwigPacked_print(PySwigPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
PySwigPacked_repr(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return PyString_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return PyString_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
PySwigPacked_str(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return PyString_FromFormat("%s%s", result, v->ty->name);
  } else {
    return PyString_FromString(v->ty->name);
  }  
}

SWIGRUNTIME int
PySwigPacked_compare(PySwigPacked *v, PySwigPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* _PySwigPacked_type(void);

SWIGRUNTIME PyTypeObject*
PySwigPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigPacked_type();
  return type;
}

SWIGRUNTIMEINLINE int
PySwigPacked_Check(PyObject *op) {
  return ((op)->ob_type == _PySwigPacked_type()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigPacked") == 0);
}

SWIGRUNTIME void
PySwigPacked_dealloc(PyObject *v)
{
  if (PySwigPacked_Check(v)) {
    PySwigPacked *sobj = (PySwigPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
_PySwigPacked_type(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject pyswigpacked_type;
  static int type_init = 0;  
  if (!type_init) {
    const PyTypeObject tmp
      = {
	PyObject_HEAD_INIT(NULL)
	0,				    /* ob_size */	
	(char *)"PySwigPacked",		    /* tp_name */	
	sizeof(PySwigPacked),		    /* tp_basicsize */	
	0,				    /* tp_itemsize */	
	(destructor)PySwigPacked_dealloc,   /* tp_dealloc */	
	(printfunc)PySwigPacked_print,	    /* tp_print */   	
	(getattrfunc)0,			    /* tp_getattr */ 	
	(setattrfunc)0,			    /* tp_setattr */ 	
	(cmpfunc)PySwigPacked_compare,	    /* tp_compare */ 	
	(reprfunc)PySwigPacked_repr,	    /* tp_repr */    	
	0,	                            /* tp_as_number */	
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */	
	(hashfunc)0,			    /* tp_hash */	
	(ternaryfunc)0,			    /* tp_call */	
	(reprfunc)PySwigPacked_str,	    /* tp_str */	
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigpacked_doc, 	            /* tp_doc */
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	0,                                  /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	0,		                    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0, 	                            /* tp_free */	   
        0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
 	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    pyswigpacked_type = tmp;
    pyswigpacked_type.ob_type = &PyType_Type;
    type_init = 1;
  }
  return &pyswigpacked_type;
}

SWIGRUNTIME PyObject *
PySwigPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  PySwigPacked *sobj = PyObject_NEW(PySwigPacked, PySwigPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
PySwigPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (PySwigPacked_Check(obj)) {
    PySwigPacked *sobj = (PySwigPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
  return PyString_FromString("this");
}

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  static PyObject *SWIG_STATIC_POINTER(swig_this) = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

SWIGRUNTIME PySwigObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  if (PySwigObject_Check(pyobj)) {
    return (PySwigObject *) pyobj;
  } else {
    PyObject *obj = 0;
#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
    if (PyInstance_Check(pyobj)) {
      obj = _PyInstance_Lookup(pyobj, SWIG_This());      
    } else {
      PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
      } else {
#ifdef PyWeakref_CheckProxy
	if (PyWeakref_CheckProxy(pyobj)) {
	  PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	  return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
	}
#endif
	obj = PyObject_GetAttr(pyobj,SWIG_This());
	if (obj) {
	  Py_DECREF(obj);
	} else {
	  if (PyErr_Occurred()) PyErr_Clear();
	  return 0;
	}
      }
    }
#else
    obj = PyObject_GetAttr(pyobj,SWIG_This());
    if (obj) {
      Py_DECREF(obj);
    } else {
      if (PyErr_Occurred()) PyErr_Clear();
      return 0;
    }
#endif
    if (obj && !PySwigObject_Check(obj)) {
      /* a PyObject is called 'this', try to get the 'real this'
	 PySwigObject from it */ 
      return SWIG_Python_GetSwigThis(obj);
    }
    return (PySwigObject *)obj;
  }
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    PySwigObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  if (!obj) return SWIG_ERROR;
  if (obj == Py_None) {
    if (ptr) *ptr = 0;
    return SWIG_OK;
  } else {
    PySwigObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (own)
      *own = 0;
    while (sobj) {
      void *vptr = sobj->ptr;
      if (ty) {
	swig_type_info *to = sobj->ty;
	if (to == ty) {
	  /* no type cast needed */
	  if (ptr) *ptr = vptr;
	  break;
	} else {
	  swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
	  if (!tc) {
	    sobj = (PySwigObject *)sobj->next;
	  } else {
	    if (ptr) {
              int newmemory = 0;
              *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
              if (newmemory == SWIG_CAST_NEW_MEMORY) {
                assert(own);
                if (own)
                  *own = *own | SWIG_CAST_NEW_MEMORY;
              }
            }
	    break;
	  }
	}
      } else {
	if (ptr) *ptr = vptr;
	break;
      }
    }
    if (sobj) {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
	sobj->own = 0;
      }
      return SWIG_OK;
    } else {
      int res = SWIG_ERROR;
      if (flags & SWIG_POINTER_IMPLICIT_CONV) {
	PySwigClientData *data = ty ? (PySwigClientData *) ty->clientdata : 0;
	if (data && !data->implicitconv) {
	  PyObject *klass = data->klass;
	  if (klass) {
	    PyObject *impconv;
	    data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
	    impconv = SWIG_Python_CallFunctor(klass, obj);
	    data->implicitconv = 0;
	    if (PyErr_Occurred()) {
	      PyErr_Clear();
	      impconv = 0;
	    }
	    if (impconv) {
	      PySwigObject *iobj = SWIG_Python_GetSwigThis(impconv);
	      if (iobj) {
		void *vptr;
		res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
		if (SWIG_IsOK(res)) {
		  if (ptr) {
		    *ptr = vptr;
		    /* transfer the ownership to 'ptr' */
		    iobj->own = 0;
		    res = SWIG_AddCast(res);
		    res = SWIG_AddNewMask(res);
		  } else {
		    res = SWIG_AddCast(res);		    
		  }
		}
	      }
	      Py_DECREF(impconv);
	    }
	  }
	}
      }
      return res;
    }
  }
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc) {
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
      if (!desc) return SWIG_ERROR;
    }
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = PySwigPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, whitout calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(PySwigClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
    PyObject *dict = PyDict_New();
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst;
  PyObject *dict = PyDict_New();
  PyDict_SetItem(dict, SWIG_This(), swig_this);
  inst = PyInstance_NewRaw(data->newargs, dict);
  Py_DECREF(dict);
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args,(char*)"swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    PySwigObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      PySwigObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  if (!ptr) {
    return SWIG_Py_Void();
  } else {
    int own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
    PyObject *robj = PySwigObject_New(ptr, type, own);
    PySwigClientData *clientdata = type ? (PySwigClientData *)(type->clientdata) : 0;
    if (clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
      PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
      if (inst) {
	Py_DECREF(robj);
	robj = inst;
      }
    }
    return robj;
  }
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? PySwigPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
SWIG_Python_DestroyModule(void *vptr)
{
  swig_module_info *swig_module = (swig_module_info *) vptr;
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      PySwigClientData *data = (PySwigClientData *) ty->clientdata;
      if (data) PySwigClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */

  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				   swig_empty_runtime_method_table);
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = PyString_FromString(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
  } else {
    swig_module_info *swig_module = SWIG_Python_GetModule();
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, PyString_AsString(old_str));
      } else {
	PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
PySwigObject_GetDesc(PyObject *self)
{
  PySwigObject *v = (PySwigObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : (char*)"";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && PySwigObject_Check(obj)) {
      const char *otype = (const char *) PySwigObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'PySwigObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? PyString_AsString(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
    if (flags & SWIG_POINTER_EXCEPTION) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
  }
  return result;
}


#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AmpSet swig_types[0]
#define SWIGTYPE_p_BoolArray swig_types[1]
#define SWIGTYPE_p_CandidateList swig_types[2]
#define SWIGTYPE_p_CellList swig_types[3]
#define SWIGTYPE_p_Complex swig_types[4]
#define SWIGTYPE_p_ConstDictPtr swig_types[5]
#define SWIGTYPE_p_ConstPolicyPtrArray swig_types[6]
#define SWIGTYPE_p_ConstPtr swig_types[7]
#define SWIGTYPE_p_Container swig_types[8]
#define SWIGTYPE_p_ContainerIterator swig_types[9]
#define SWIGTYPE_p_Core swig_types[10]
#define SWIGTYPE_p_CovariancePtr swig_types[11]
#define SWIGTYPE_p_DetectorSet swig_types[12]
#define SWIGTYPE_p_DictPtr swig_types[13]
#define SWIGTYPE_p_DoubleArray swig_types[14]
#define SWIGTYPE_p_EigenVector swig_types[15]
#define SWIGTYPE_p_Element swig_types[16]
#define SWIGTYPE_p_Ellipse swig_types[17]
#define SWIGTYPE_p_Envelope swig_types[18]
#define SWIGTYPE_p_FilePtr swig_types[19]
#define SWIGTYPE_p_FilePtrArray swig_types[20]
#define SWIGTYPE_p_FootprintList swig_types[21]
#define SWIGTYPE_p_FourierCutoutVector swig_types[22]
#define SWIGTYPE_p_Function1Ptr swig_types[23]
#define SWIGTYPE_p_Function2Ptr swig_types[24]
#define SWIGTYPE_p_Image swig_types[25]
#define SWIGTYPE_p_ImageConstPtr swig_types[26]
#define SWIGTYPE_p_ImageList swig_types[27]
#define SWIGTYPE_p_ImagePtr swig_types[28]
#define SWIGTYPE_p_ImagePtrList swig_types[29]
#define SWIGTYPE_p_IntArray swig_types[30]
#define SWIGTYPE_p_IteratorRange swig_types[31]
#define SWIGTYPE_p_Jacobian swig_types[32]
#define SWIGTYPE_p_KernelFunction swig_types[33]
#define SWIGTYPE_p_KernelFunctionPtr swig_types[34]
#define SWIGTYPE_p_List swig_types[35]
#define SWIGTYPE_p_Mask swig_types[36]
#define SWIGTYPE_p_MaskPlaneDict swig_types[37]
#define SWIGTYPE_p_MaskPtr swig_types[38]
#define SWIGTYPE_p_MaskedImageT swig_types[39]
#define SWIGTYPE_p_Matrix swig_types[40]
#define SWIGTYPE_p_NullSpatialFunction swig_types[41]
#define SWIGTYPE_p_ParameterVector swig_types[42]
#define SWIGTYPE_p_Pixel swig_types[43]
#define SWIGTYPE_p_PixelConstReference swig_types[44]
#define SWIGTYPE_p_PixelReference swig_types[45]
#define SWIGTYPE_p_PolicyPtrArray swig_types[46]
#define SWIGTYPE_p_ProductDerivativeMatrix swig_types[47]
#define SWIGTYPE_p_Ptr swig_types[48]
#define SWIGTYPE_p_PtrType swig_types[49]
#define SWIGTYPE_p_Real swig_types[50]
#define SWIGTYPE_p_SinglePixel swig_types[51]
#define SWIGTYPE_p_SpanList swig_types[52]
#define SWIGTYPE_p_SpatialFunction swig_types[53]
#define SWIGTYPE_p_SpatialFunctionPtr swig_types[54]
#define SWIGTYPE_p_StreamPtr swig_types[55]
#define SWIGTYPE_p_StringArray swig_types[56]
#define SWIGTYPE_p_TPtr swig_types[57]
#define SWIGTYPE_p_ThresholdType swig_types[58]
#define SWIGTYPE_p_TransformDerivativeMatrix swig_types[59]
#define SWIGTYPE_p_Type swig_types[60]
#define SWIGTYPE_p_Value swig_types[61]
#define SWIGTYPE_p_Variance swig_types[62]
#define SWIGTYPE_p_VariancePtr swig_types[63]
#define SWIGTYPE_p_allocator_type swig_types[64]
#define SWIGTYPE_p_bool swig_types[65]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__cameraGeom__Amp_t swig_types[66]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__cameraGeom__Camera_t swig_types[67]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__cameraGeom__Ccd_t swig_types[68]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorMosaic_t swig_types[69]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__cameraGeom__Detector_t swig_types[70]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__cameraGeom__ElectronicParams_t swig_types[71]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__cameraGeom__Raft_t swig_types[72]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__coord__Coord_t swig_types[73]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__coord__EclipticCoord_t swig_types[74]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__coord__Fk5Coord_t swig_types[75]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__coord__GalacticCoord_t swig_types[76]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__coord__IcrsCoord_t swig_types[77]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__coord__TopocentricCoord_t swig_types[78]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Astrometry_t swig_types[79]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__BaseSourceAttributesT_lsst__afw__detection__NUM_DIASOURCE_NULLABLE_FIELDS_t_t swig_types[80]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__BaseSourceAttributesT_lsst__afw__detection__NUM_SOURCE_NULLABLE_FIELDS_t_t swig_types[81]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__DiaSource_t swig_types[82]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__FootprintSetT_boost__uint16_t_lsst__afw__image__MaskPixel_t_t swig_types[83]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__FootprintSetT_double_lsst__afw__image__MaskPixel_t_t swig_types[84]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__FootprintSetT_float_lsst__afw__image__MaskPixel_t_t swig_types[85]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__FootprintSetT_int_lsst__afw__image__MaskPixel_t_t swig_types[86]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Footprint_t swig_types[87]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__KernelPsf_t swig_types[88]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__MeasurementT_lsst__afw__detection__Astrometry_t_t swig_types[89]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__MeasurementT_lsst__afw__detection__Photometry_t_t swig_types[90]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__MeasurementT_lsst__afw__detection__Shape_t_t swig_types[91]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Peak_t swig_types[92]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__PersistableDiaSourceVector_t swig_types[93]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__PersistableSourceVector_t swig_types[94]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Photometry_t swig_types[95]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Psf_t swig_types[96]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__SchemaEntry_t swig_types[97]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Schema_t swig_types[98]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Shape_t swig_types[99]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Source_t swig_types[100]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__detection__Span_t swig_types[101]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__AffineTransform_t swig_types[102]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t swig_types[103]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__AxesEllipse_t swig_types[104]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t swig_types[105]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t swig_types[106]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseEllipse_t swig_types[107]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__DistortionEllipse_t swig_types[108]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Distortion_t swig_types[109]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__LogShearEllipse_t swig_types[110]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__LogShear_t swig_types[111]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__QuadrupoleEllipse_t swig_types[112]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t swig_types[113]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__Calib_t swig_types[114]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_boost__uint16_t_t_t swig_types[115]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_double_t_t swig_types[116]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_float_t_t swig_types[117]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_int_t_t swig_types[118]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__DefectBase_t swig_types[119]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_boost__uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t swig_types[120]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t swig_types[121]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t swig_types[122]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ExposureT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t swig_types[123]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_boost__uint16_t_t_t swig_types[124]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_double_t_t swig_types[125]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_float_t_t swig_types[126]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_int_t_t swig_types[127]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_double_t_t swig_types[128]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_float_t_t swig_types[129]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageT_boost__uint16_t_t_t swig_types[130]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t swig_types[131]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageT_float_t_t swig_types[132]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__ImageT_int_t_t swig_types[133]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__MaskT_boost__uint16_t_t_t swig_types[134]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_boost__uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t swig_types[135]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t swig_types[136]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t swig_types[137]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t swig_types[138]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__TanWcs_t swig_types[139]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__Wcs_t swig_types[140]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_t swig_types[141]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_t swig_types[142]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_double_t_t swig_types[143]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_float_t_t swig_types[144]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__DeltaFunctionKernel_t swig_types[145]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_double_t_t swig_types[146]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_float_t_t swig_types[147]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__FftLocalKernel_t swig_types[148]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__FixedKernel_t swig_types[149]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__FourierCutoutStack_t swig_types[150]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__FourierCutout_t swig_types[151]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__FourierLocalKernel_t swig_types[152]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_t swig_types[153]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_t swig_types[154]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t swig_types[155]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t swig_types[156]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t swig_types[157]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t swig_types[158]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_double_t_t swig_types[159]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_float_t_t swig_types[160]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_double_t_t swig_types[161]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_float_t_t swig_types[162]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__ImageLocalKernel_t swig_types[163]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_double_t_t swig_types[164]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_float_t_t swig_types[165]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__Kernel_t swig_types[166]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_double_t_t swig_types[167]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_float_t_t swig_types[168]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_double_t_t swig_types[169]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_float_t_t swig_types[170]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_t swig_types[171]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t swig_types[172]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_t swig_types[173]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_double_t_t swig_types[174]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_float_t_t swig_types[175]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_double_t_t swig_types[176]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_float_t_t swig_types[177]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_double_t_t swig_types[178]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_float_t_t swig_types[179]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_double_t_t swig_types[180]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_float_t_t swig_types[181]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_t swig_types[182]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__SpatialCellCandidate_t swig_types[183]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_lsst__afw__image__ImageT_double_t_t_t swig_types[184]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_lsst__afw__image__ImageT_float_t_t_t swig_types[185]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_lsst__afw__image__MaskedImageT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t_t swig_types[186]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t_t swig_types[187]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__afw__math__SpatialCell_t swig_types[188]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__daf__base__Citizen_t swig_types[189]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__daf__base__Persistable_t swig_types[190]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__daf__base__PropertySet_t swig_types[191]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__daf__data__LsstBase_t swig_types[192]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__daf__data__LsstData_t swig_types[193]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__daf__data__LsstImpl_DC3_t swig_types[194]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__daf__data__Provenance_t swig_types[195]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__daf__data__ReleaseProcess_t swig_types[196]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__daf__persistence__DbStorage_t swig_types[197]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__daf__persistence__DbTsvStorage_t swig_types[198]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__daf__persistence__LogicalLocation_t swig_types[199]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__daf__persistence__Persistence_t swig_types[200]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__daf__persistence__Storage_t swig_types[201]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__logging__BriefFormatter_t swig_types[202]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__logging__FileDestination_t swig_types[203]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__logging__IndentedFormatter_t swig_types[204]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__logging__LogDestination_t swig_types[205]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__logging__LogFormatter_t swig_types[206]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__logging__NetLoggerFormatter_t swig_types[207]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__policy__DefaultPolicyFile_t swig_types[208]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__policy__Definition_t swig_types[209]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__policy__Dictionary_t swig_types[210]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__policy__PolicyDestination_t swig_types[211]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__policy__PolicyFile_t swig_types[212]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__policy__PolicySource_t swig_types[213]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__policy__PolicyStreamDestination_t swig_types[214]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__policy__PolicyStringDestination_t swig_types[215]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__policy__PolicyString_t swig_types[216]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__policy__Policy_t swig_types[217]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__pex__policy__UrnPolicyFile_t swig_types[218]
#define SWIGTYPE_p_boost__shared_ptrT_lsst__security__Security_t swig_types[219]
#define SWIGTYPE_p_char swig_types[220]
#define SWIGTYPE_p_char_type swig_types[221]
#define SWIGTYPE_p_const_iterator swig_types[222]
#define SWIGTYPE_p_const_reference swig_types[223]
#define SWIGTYPE_p_const_reverse_iterator swig_types[224]
#define SWIGTYPE_p_const_x_iterator swig_types[225]
#define SWIGTYPE_p_const_xy_locator swig_types[226]
#define SWIGTYPE_p_const_y_iterator swig_types[227]
#define SWIGTYPE_p_difference_type swig_types[228]
#define SWIGTYPE_p_double swig_types[229]
#define SWIGTYPE_p_f_enum_std__ios_base__event_r_std__ios_base_int__void swig_types[230]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t swig_types[231]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[232]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[233]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[234]
#define SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[235]
#define SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[236]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[237]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[238]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t swig_types[239]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[240]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[241]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[242]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base swig_types[243]
#define SWIGTYPE_p_fast_iterator swig_types[244]
#define SWIGTYPE_p_first_type swig_types[245]
#define SWIGTYPE_p_float swig_types[246]
#define SWIGTYPE_p_fmtflags swig_types[247]
#define SWIGTYPE_p_image_category swig_types[248]
#define SWIGTYPE_p_int swig_types[249]
#define SWIGTYPE_p_int_type swig_types[250]
#define SWIGTYPE_p_iostate swig_types[251]
#define SWIGTYPE_p_iterator swig_types[252]
#define SWIGTYPE_p_kernel_fill_factor swig_types[253]
#define SWIGTYPE_p_key_type swig_types[254]
#define SWIGTYPE_p_long swig_types[255]
#define SWIGTYPE_p_long_double swig_types[256]
#define SWIGTYPE_p_long_long swig_types[257]
#define SWIGTYPE_p_lsst__afw__geom__CoordinateExprT_2_t swig_types[258]
#define SWIGTYPE_p_lsst__afw__geom__CoordinateExprT_3_t swig_types[259]
#define SWIGTYPE_p_lsst__afw__geom__ExtentT_double_2_t swig_types[260]
#define SWIGTYPE_p_lsst__afw__geom__ExtentT_double_3_t swig_types[261]
#define SWIGTYPE_p_lsst__afw__geom__ExtentT_int_2_t swig_types[262]
#define SWIGTYPE_p_lsst__afw__geom__ExtentT_int_3_t swig_types[263]
#define SWIGTYPE_p_lsst__afw__geom__PointT_double_2_t swig_types[264]
#define SWIGTYPE_p_lsst__afw__geom__PointT_double_3_t swig_types[265]
#define SWIGTYPE_p_lsst__afw__geom__PointT_int_2_t swig_types[266]
#define SWIGTYPE_p_lsst__afw__geom__PointT_int_3_t swig_types[267]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__Axes swig_types[268]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__AxesEllipse swig_types[269]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__BaseCore swig_types[270]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__BaseEllipse swig_types[271]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__Distortion swig_types[272]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__DistortionEllipse swig_types[273]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__LogShear swig_types[274]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__LogShearEllipse swig_types[275]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__Quadrupole swig_types[276]
#define SWIGTYPE_p_lsst__afw__geom__ellipses__QuadrupoleEllipse swig_types[277]
#define SWIGTYPE_p_lsst__afw__image__PointT_double_t swig_types[278]
#define SWIGTYPE_p_lsst__afw__image__PointT_int_t swig_types[279]
#define SWIGTYPE_p_lsst__daf__base__TypeMismatchException swig_types[280]
#define SWIGTYPE_p_lsst__pex__exceptions__DomainErrorException swig_types[281]
#define SWIGTYPE_p_lsst__pex__exceptions__InvalidParameterException swig_types[282]
#define SWIGTYPE_p_lsst__pex__exceptions__IoErrorException swig_types[283]
#define SWIGTYPE_p_lsst__pex__exceptions__LengthErrorException swig_types[284]
#define SWIGTYPE_p_lsst__pex__exceptions__LogicErrorException swig_types[285]
#define SWIGTYPE_p_lsst__pex__exceptions__MemoryException swig_types[286]
#define SWIGTYPE_p_lsst__pex__exceptions__NotFoundException swig_types[287]
#define SWIGTYPE_p_lsst__pex__exceptions__OutOfRangeException swig_types[288]
#define SWIGTYPE_p_lsst__pex__exceptions__OverflowErrorException swig_types[289]
#define SWIGTYPE_p_lsst__pex__exceptions__RangeErrorException swig_types[290]
#define SWIGTYPE_p_lsst__pex__exceptions__RuntimeErrorException swig_types[291]
#define SWIGTYPE_p_lsst__pex__exceptions__TimeoutException swig_types[292]
#define SWIGTYPE_p_lsst__pex__exceptions__UnderflowErrorException swig_types[293]
#define SWIGTYPE_p_lsst__pex__logging__LogRec swig_types[294]
#define SWIGTYPE_p_lsst__pex__policy__BadNameError swig_types[295]
#define SWIGTYPE_p_lsst__pex__policy__DictionaryError swig_types[296]
#define SWIGTYPE_p_lsst__pex__policy__EOFError swig_types[297]
#define SWIGTYPE_p_lsst__pex__policy__FormatSyntaxError swig_types[298]
#define SWIGTYPE_p_lsst__pex__policy__NameNotFound swig_types[299]
#define SWIGTYPE_p_lsst__pex__policy__ParserError swig_types[300]
#define SWIGTYPE_p_lsst__pex__policy__SyntaxError swig_types[301]
#define SWIGTYPE_p_lsst__pex__policy__TypeError swig_types[302]
#define SWIGTYPE_p_lsst__pex__policy__UnsupportedSyntax swig_types[303]
#define SWIGTYPE_p_lsst__pex__policy__ValidationError swig_types[304]
#define SWIGTYPE_p_mapped_type swig_types[305]
#define SWIGTYPE_p_memId swig_types[306]
#define SWIGTYPE_p_off_type swig_types[307]
#define SWIGTYPE_p_openmode swig_types[308]
#define SWIGTYPE_p_p_PyObject swig_types[309]
#define SWIGTYPE_p_p_void swig_types[310]
#define SWIGTYPE_p_pos_type swig_types[311]
#define SWIGTYPE_p_reference swig_types[312]
#define SWIGTYPE_p_reverse_iterator swig_types[313]
#define SWIGTYPE_p_second_type swig_types[314]
#define SWIGTYPE_p_seekdir swig_types[315]
#define SWIGTYPE_p_short swig_types[316]
#define SWIGTYPE_p_signed_char swig_types[317]
#define SWIGTYPE_p_size_t swig_types[318]
#define SWIGTYPE_p_size_type swig_types[319]
#define SWIGTYPE_p_state_type swig_types[320]
#define SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t swig_types[321]
#define SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[322]
#define SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[323]
#define SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__char_type swig_types[324]
#define SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__off_type swig_types[325]
#define SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type swig_types[326]
#define SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[327]
#define SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__off_type swig_types[328]
#define SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type swig_types[329]
#define SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t swig_types[330]
#define SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t swig_types[331]
#define SWIGTYPE_p_std__invalid_argument swig_types[332]
#define SWIGTYPE_p_std__ios_base swig_types[333]
#define SWIGTYPE_p_std__locale swig_types[334]
#define SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__detection__DiaSource_t_std__allocatorT_boost__shared_ptrT_lsst__afw__detection__DiaSource_t_t_t swig_types[335]
#define SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__detection__Source_t_std__allocatorT_boost__shared_ptrT_lsst__afw__detection__Source_t_t_t swig_types[336]
#define SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t swig_types[337]
#define SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t__allocator_type swig_types[338]
#define SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__allocatorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_t_t swig_types[339]
#define SWIGTYPE_p_std__vectorT_lsst__pex__exceptions__Tracepoint_std__allocatorT_lsst__pex__exceptions__Tracepoint_t_t swig_types[340]
#define SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t swig_types[341]
#define SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t__allocator_type swig_types[342]
#define SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t swig_types[343]
#define SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t__allocator_type swig_types[344]
#define SWIGTYPE_p_swig__PySwigIterator swig_types[345]
#define SWIGTYPE_p_traits_type swig_types[346]
#define SWIGTYPE_p_unsigned_int swig_types[347]
#define SWIGTYPE_p_unsigned_long swig_types[348]
#define SWIGTYPE_p_unsigned_long_long swig_types[349]
#define SWIGTYPE_p_unsigned_short swig_types[350]
#define SWIGTYPE_p_value_type swig_types[351]
#define SWIGTYPE_p_x_iterator swig_types[352]
#define SWIGTYPE_p_xy_locator swig_types[353]
#define SWIGTYPE_p_xy_x_iterator swig_types[354]
#define SWIGTYPE_p_xy_y_iterator swig_types[355]
#define SWIGTYPE_p_y_iterator swig_types[356]
static swig_type_info *swig_types[358];
static swig_module_info swig_module = {swig_types, 357, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _WCS_PL_MAIN.so
  ------------------------------------------------*/
#define SWIG_init    init_WCS_PL_MAIN

#define SWIG_name    "_WCS_PL_MAIN"

#define SWIGVERSION 0x010336 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class PyObject_ptr {
  protected:
    PyObject *_obj;

  public:
    PyObject_ptr() :_obj(0)
    {
    }

    PyObject_ptr(const PyObject_ptr& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    PyObject_ptr(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    PyObject_ptr & operator=(const PyObject_ptr& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~PyObject_ptr() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct PyObject_var : PyObject_ptr {
    PyObject_var(PyObject* obj = 0) : PyObject_ptr(obj, false) { }
    
    PyObject_var & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include "lsst/afw/image.h"


#include <iostream>


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>
#include <stdexcept>

  
namespace swig {
  struct stop_iteration {
  };

  struct PySwigIterator {
  private:
    PyObject_ptr _seq;

  protected:
    PySwigIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~PySwigIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual PySwigIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual PySwigIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const PySwigIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const PySwigIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual PySwigIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    PySwigIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const PySwigIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const PySwigIterator& x) const
    {
      return ! operator==(x);
    }
      
    PySwigIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    PySwigIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    PySwigIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    PySwigIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const PySwigIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::PySwigIterator *");
	init = 1;
      }	
      return desc;
    }    
  };
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <stdexcept>


#include <algorithm>


#include <list>


#include <utility>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <string>


#include <set>


#include <vector>


#ifndef SWIG_STD_NOMODERN_STL
# include <ios>
#else
# include <streambuf.h>
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
  if (PyString_Check(obj)) {
    char *cstr; Py_ssize_t len;
    PyString_AsStringAndSize(obj, &cstr, &len);
    if (cptr)  {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
	*cptr = PyString_AsString(obj);
      }
    }
    if (psize) *psize = len + 1;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsCharArray(PyObject * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    if ((csize == size + 1) && cptr && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (PyObject * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


#include <iostream>


SWIGINTERN int
SWIG_AsVal_short (PyObject * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (PyObject * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}

SWIGINTERN std::basic_ostream< char,std::char_traits< char > > &std_basic_ostream_Sl_char_Sg__operator_Sl__Sl___SWIG_17(std::basic_ostream< char > *self,std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &s){
	  *self << s;
	  return *self;
	}




#include <new>
#include "lsst/pex/exceptions/Exception.h"
#include "lsst/pex/exceptions/Runtime.h"


static void raiseLsstException(lsst::pex::exceptions::Exception& ex) {
    PyObject* pyex = 0;
    swig_type_info* tinfo = SWIG_TypeQuery(ex.getType());
    if (tinfo != 0) {
	lsst::pex::exceptions::Exception* e = ex.clone();
        pyex = SWIG_NewPointerObj(static_cast<void*>(e), tinfo,
            SWIG_POINTER_OWN);
    } else {
        PyErr_SetString(PyExc_RuntimeError, const_cast<char*>(ex.what()));
	return;
    }

    PyObject* pyexbase = PyExc_RuntimeError;
    PyObject* module = PyImport_AddModule("lsst.pex.exceptions");
    if (module != 0) {
        pyexbase = PyObject_GetAttrString(module, "LsstCppException");
        if (pyexbase == 0) {
            pyexbase = PyExc_RuntimeError;
        }
    }

    PyErr_SetObject(pyexbase, pyex);
}



namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = (SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0) == SWIG_OK) ? SWIG_OLDOBJ : 0;
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_Compare(v, w) < 0;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::PyObject_ptr>: public binary_function<swig::PyObject_ptr, swig::PyObject_ptr, bool>
  {
    bool
    operator()(const swig::PyObject_ptr& v, const swig::PyObject_ptr& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::PyObject_var>: public binary_function<swig::PyObject_var, swig::PyObject_var, bool>
  {
    bool
    operator()(const swig::PyObject_var& v, const swig::PyObject_var& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class PySwigIterator_T :  public PySwigIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef PySwigIterator_T<out_iterator> self_type;

    PySwigIterator_T(out_iterator curr, PyObject *seq)
      : PySwigIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const PySwigIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const PySwigIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class PySwigIteratorOpen_T :  public PySwigIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef PySwigIterator_T<out_iterator>  base;
    typedef PySwigIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    PySwigIteratorOpen_T(out_iterator curr, PyObject *seq)
      : PySwigIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    PySwigIterator *copy() const
    {
      return new self_type(*this);
    }

    PySwigIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    PySwigIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class PySwigIteratorClosed_T :  public PySwigIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef PySwigIterator_T<out_iterator>  base;    
    typedef PySwigIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    PySwigIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : PySwigIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    PySwigIterator *copy() const
    {
      return new self_type(*this);
    }

    PySwigIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    PySwigIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline PySwigIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new PySwigIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline PySwigIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new PySwigIteratorOpen_T<OutIter>(current, seq);
  }
}


namespace swig
{
  template <class T>
  struct PySequence_Ref
  {
    PySequence_Ref(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::PyObject_var item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    PySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    int _index;
  };

  template <class T>
  struct PySequence_ArrowProxy
  {
    PySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct PySequence_InputIterator
  {
    typedef PySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    PySequence_InputIterator()
    {
    }

    PySequence_InputIterator(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    PySequence_ArrowProxy<T>
    operator->() const {
      return PySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  template <class T>
  struct PySequence_Cont
  {
    typedef PySequence_Ref<T> reference;
    typedef const PySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef PySequence_InputIterator<T, reference> iterator;
    typedef PySequence_InputIterator<T, const_reference> const_iterator;

    PySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~PySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::PyObject_var item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


#include<iostream>
#include<fstream>
#include<cstring>
#include<iomanip>
#include "hsc/meas/tansip/WCS_PL_MAIN.h"


  namespace swig {
    template <>  struct traits<boost::shared_ptr< lsst::afw::detection::Source > > {
      typedef pointer_category category;
      static const char* type_name() { return"boost::shared_ptr< lsst::afw::detection::Source >"; }
    };
  }


namespace swig {
  template <class PySeq, class Seq>
  inline void
  assign(const PySeq& pyseq, Seq* seq) {
    // seq->assign(pyseq.begin(), pyseq.end()); // not used as not always implemented
    typedef typename PySeq::value_type value_type;
    typename PySeq::const_iterator it = pyseq.begin();
    for (;it != pyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	if (::SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  PySequence_Cont<value_type> pyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(pyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return pyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<boost::shared_ptr< lsst::afw::detection::Source >, std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "boost::shared_ptr< lsst::afw::detection::Source >" "," "std::allocator< boost::shared_ptr< lsst::afw::detection::Source > >" " >";
	  }
	};
      }
    

      namespace swig {
	template <>  struct traits<std::vector<std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > >, std::allocator< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > >" "," "std::allocator< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::PySwigIterator *std_vector_Sl_lsst_afw_detection_SourceSet_Sg__iterator(std::vector< lsst::afw::detection::SourceSet > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_lsst_afw_detection_SourceSet_Sg____nonzero__(std::vector< lsst::afw::detection::SourceSet > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::size_type std_vector_Sl_lsst_afw_detection_SourceSet_Sg____len__(std::vector< lsst::afw::detection::SourceSet > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type std_vector_Sl_lsst_afw_detection_SourceSet_Sg__pop(std::vector< lsst::afw::detection::SourceSet > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > >,std::allocator< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::vector< lsst::afw::detection::Source::Ptr,std::allocator< lsst::afw::detection::Source::Ptr > >,std::allocator< std::vector< lsst::afw::detection::Source::Ptr,std::allocator< lsst::afw::detection::Source::Ptr > > > > *std_vector_Sl_lsst_afw_detection_SourceSet_Sg____getslice__(std::vector< lsst::afw::detection::SourceSet > *self,std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type i,std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_lsst_afw_detection_SourceSet_Sg____setslice__(std::vector< lsst::afw::detection::SourceSet > *self,std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type i,std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type j,std::vector< std::vector< lsst::afw::detection::Source::Ptr,std::allocator< lsst::afw::detection::Source::Ptr > >,std::allocator< std::vector< lsst::afw::detection::Source::Ptr,std::allocator< lsst::afw::detection::Source::Ptr > > > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_lsst_afw_detection_SourceSet_Sg____delslice__(std::vector< lsst::afw::detection::SourceSet > *self,std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type i,std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_lsst_afw_detection_SourceSet_Sg____delitem__(std::vector< lsst::afw::detection::SourceSet > *self,std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type const &std_vector_Sl_lsst_afw_detection_SourceSet_Sg____getitem__(std::vector< lsst::afw::detection::SourceSet > const *self,std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_lsst_afw_detection_SourceSet_Sg____setitem__(std::vector< lsst::afw::detection::SourceSet > *self,std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type i,std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_lsst_afw_detection_SourceSet_Sg__append(std::vector< lsst::afw::detection::SourceSet > *self,std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<lsst::afw::detection::SourceMatch > {
      typedef pointer_category category;
      static const char* type_name() { return"lsst::afw::detection::SourceMatch"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<lsst::afw::detection::SourceMatch, std::allocator< lsst::afw::detection::SourceMatch > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "lsst::afw::detection::SourceMatch" "," "std::allocator< lsst::afw::detection::SourceMatch >" " >";
	  }
	};
      }
    

      namespace swig {
	template <>  struct traits<std::vector<std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >, std::allocator< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >" "," "std::allocator< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::PySwigIterator *std_vector_Sl_std_vector_Sl_lsst_afw_detection_SourceMatch_Sg__Sg__iterator(std::vector< std::vector< lsst::afw::detection::SourceMatch > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_lsst_afw_detection_SourceMatch_Sg__Sg____nonzero__(std::vector< std::vector< lsst::afw::detection::SourceMatch > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::vector< lsst::afw::detection::SourceMatch > >::size_type std_vector_Sl_std_vector_Sl_lsst_afw_detection_SourceMatch_Sg__Sg____len__(std::vector< std::vector< lsst::afw::detection::SourceMatch > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type std_vector_Sl_std_vector_Sl_lsst_afw_detection_SourceMatch_Sg__Sg__pop(std::vector< std::vector< lsst::afw::detection::SourceMatch > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >,std::allocator< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >,std::allocator< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > > *std_vector_Sl_std_vector_Sl_lsst_afw_detection_SourceMatch_Sg__Sg____getslice__(std::vector< std::vector< lsst::afw::detection::SourceMatch > > *self,std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type i,std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_lsst_afw_detection_SourceMatch_Sg__Sg____setslice__(std::vector< std::vector< lsst::afw::detection::SourceMatch > > *self,std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type i,std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type j,std::vector< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >,std::allocator< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_lsst_afw_detection_SourceMatch_Sg__Sg____delslice__(std::vector< std::vector< lsst::afw::detection::SourceMatch > > *self,std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type i,std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_lsst_afw_detection_SourceMatch_Sg__Sg____delitem__(std::vector< std::vector< lsst::afw::detection::SourceMatch > > *self,std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type const &std_vector_Sl_std_vector_Sl_lsst_afw_detection_SourceMatch_Sg__Sg____getitem__(std::vector< std::vector< lsst::afw::detection::SourceMatch > > const *self,std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_lsst_afw_detection_SourceMatch_Sg__Sg____setitem__(std::vector< std::vector< lsst::afw::detection::SourceMatch > > *self,std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type i,std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_lsst_afw_detection_SourceMatch_Sg__Sg__append(std::vector< std::vector< lsst::afw::detection::SourceMatch > > *self,std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<boost::shared_ptr< lsst::afw::image::TanWcs > > {
      typedef pointer_category category;
      static const char* type_name() { return"boost::shared_ptr< lsst::afw::image::TanWcs >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<boost::shared_ptr< lsst::afw::image::TanWcs >, std::allocator< boost::shared_ptr< lsst::afw::image::TanWcs > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "boost::shared_ptr< lsst::afw::image::TanWcs >" "," "std::allocator< boost::shared_ptr< lsst::afw::image::TanWcs > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::PySwigIterator *std_vector_Sl_lsst_afw_image_TanWcs_Ptr_Sg__iterator(std::vector< lsst::afw::image::TanWcs::Ptr > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_lsst_afw_image_TanWcs_Ptr_Sg____nonzero__(std::vector< lsst::afw::image::TanWcs::Ptr > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::size_type std_vector_Sl_lsst_afw_image_TanWcs_Ptr_Sg____len__(std::vector< lsst::afw::image::TanWcs::Ptr > const *self){
      return self->size();
    }
SWIGINTERN std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type std_vector_Sl_lsst_afw_image_TanWcs_Ptr_Sg__pop(std::vector< lsst::afw::image::TanWcs::Ptr > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<boost::shared_ptr< lsst::afw::image::TanWcs >,std::allocator< boost::shared_ptr< lsst::afw::image::TanWcs > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< boost::shared_ptr< lsst::afw::image::TanWcs >,std::allocator< boost::shared_ptr< lsst::afw::image::TanWcs > > > *std_vector_Sl_lsst_afw_image_TanWcs_Ptr_Sg____getslice__(std::vector< lsst::afw::image::TanWcs::Ptr > *self,std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type i,std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_lsst_afw_image_TanWcs_Ptr_Sg____setslice__(std::vector< lsst::afw::image::TanWcs::Ptr > *self,std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type i,std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type j,std::vector< boost::shared_ptr< lsst::afw::image::TanWcs >,std::allocator< boost::shared_ptr< lsst::afw::image::TanWcs > > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_lsst_afw_image_TanWcs_Ptr_Sg____delslice__(std::vector< lsst::afw::image::TanWcs::Ptr > *self,std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type i,std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_lsst_afw_image_TanWcs_Ptr_Sg____delitem__(std::vector< lsst::afw::image::TanWcs::Ptr > *self,std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type const &std_vector_Sl_lsst_afw_image_TanWcs_Ptr_Sg____getitem__(std::vector< lsst::afw::image::TanWcs::Ptr > const *self,std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_lsst_afw_image_TanWcs_Ptr_Sg____setitem__(std::vector< lsst::afw::image::TanWcs::Ptr > *self,std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type i,std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_lsst_afw_image_TanWcs_Ptr_Sg__append(std::vector< lsst::afw::image::TanWcs::Ptr > *self,std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type const &x){
      self->push_back(x);
    }
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_PySwigIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PySwigIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PySwigIterator" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySwigIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_value" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  try {
    result = (PyObject *)((swig::PySwigIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator_incr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_incr" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::PySwigIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySwigIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_incr" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  try {
    result = (swig::PySwigIterator *)(arg1)->incr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_incr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_PySwigIterator_incr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PySwigIterator_incr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PySwigIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    incr(swig::PySwigIterator *,size_t)\n"
    "    incr(swig::PySwigIterator *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator_decr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_decr" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::PySwigIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySwigIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_decr" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  try {
    result = (swig::PySwigIterator *)(arg1)->decr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_decr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_PySwigIterator_decr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PySwigIterator_decr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PySwigIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    decr(swig::PySwigIterator *,size_t)\n"
    "    decr(swig::PySwigIterator *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  swig::PySwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_distance" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__PySwigIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySwigIterator_distance" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySwigIterator_distance" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::PySwigIterator * >(argp2);
  try {
    result = ((swig::PySwigIterator const *)arg1)->distance((swig::PySwigIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  swig::PySwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_equal" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__PySwigIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySwigIterator_equal" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySwigIterator_equal" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::PySwigIterator * >(argp2);
  try {
    result = (bool)((swig::PySwigIterator const *)arg1)->equal((swig::PySwigIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySwigIterator_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_copy" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  result = (swig::PySwigIterator *)((swig::PySwigIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySwigIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_next" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySwigIterator_previous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_previous" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator_advance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_advance" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::PySwigIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  swig::PySwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___eq__" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__PySwigIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySwigIterator___eq__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySwigIterator___eq__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::PySwigIterator * >(argp2);
  result = (bool)((swig::PySwigIterator const *)arg1)->operator ==((swig::PySwigIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  swig::PySwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___ne__" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__PySwigIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySwigIterator___ne__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySwigIterator___ne__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::PySwigIterator * >(argp2);
  result = (bool)((swig::PySwigIterator const *)arg1)->operator !=((swig::PySwigIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___iadd__" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    {
      swig::PySwigIterator &_result_ref = (arg1)->operator +=(arg2);
      result = (swig::PySwigIterator *) &_result_ref;
    }
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___isub__" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    {
      swig::PySwigIterator &_result_ref = (arg1)->operator -=(arg2);
      result = (swig::PySwigIterator *) &_result_ref;
    }
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___add__" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::PySwigIterator *)((swig::PySwigIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___sub__" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::PySwigIterator *)((swig::PySwigIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  swig::PySwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___sub__" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__PySwigIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySwigIterator___sub__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySwigIterator___sub__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::PySwigIterator * >(argp2);
  result = ((swig::PySwigIterator const *)arg1)->operator -((swig::PySwigIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__PySwigIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PySwigIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PySwigIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *PySwigIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__PySwigIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_ios_base_boolalpha_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_boolalpha is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_boolalpha_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::boolalpha));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_dec_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_dec is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_dec_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::dec));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_fixed_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_fixed is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_fixed_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::fixed));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_hex_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_hex is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_hex_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::hex));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_internal_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_internal is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_internal_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::internal));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_left_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_left is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_left_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::left));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_oct_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_oct is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_oct_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::oct));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_right_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_right is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_right_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::right));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_scientific_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_scientific is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_scientific_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::scientific));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_showbase_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_showbase is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_showbase_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::showbase));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_showpoint_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_showpoint is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_showpoint_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::showpoint));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_showpos_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_showpos is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_showpos_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::showpos));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_skipws_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_skipws is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_skipws_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::skipws));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_unitbuf_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_unitbuf is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_unitbuf_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::unitbuf));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_uppercase_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_uppercase is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_uppercase_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::uppercase));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_adjustfield_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_adjustfield is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_adjustfield_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::adjustfield));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_basefield_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_basefield is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_basefield_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::basefield));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_floatfield_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_floatfield is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_floatfield_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::floatfield));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_badbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_badbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_badbit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::badbit));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_eofbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_eofbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_eofbit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::eofbit));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_failbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_failbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_failbit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::failbit));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_goodbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_goodbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_goodbit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::goodbit));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_app_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_app is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_app_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::app));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_ate_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_ate is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_ate_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::ate));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_binary_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_binary is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_binary_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::binary));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_ios_base_in_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_ios_base_in is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_ios_base_in_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::in));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_out_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_out is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_out_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::out));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_trunc_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_trunc is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_trunc_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::trunc));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_beg_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_beg is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_beg_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::beg));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_cur_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_cur is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_cur_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::cur));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_end_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_end is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_end_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::end));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_register_callback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::event_callback arg2 = (std::ios_base::event_callback) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ios_base_register_callback",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_register_callback" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_enum_std__ios_base__event_r_std__ios_base_int__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ios_base_register_callback" "', argument " "2"" of type '" "std::ios_base::event_callback""'"); 
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ios_base_register_callback" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->register_callback(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_flags__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::ios_base::fmtflags result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_base_flags",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_flags" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  result = (std::ios_base::fmtflags)((std::ios_base const *)arg1)->flags();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_flags__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ios_base::fmtflags result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_flags",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_flags" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_flags" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  result = (std::ios_base::fmtflags)(arg1)->flags(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_flags(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_base_flags__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_base_flags__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ios_base_flags'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    flags(std::ios_base const *)\n"
    "    flags(std::ios_base *,std::ios_base::fmtflags)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_setf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ios_base::fmtflags result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_setf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_setf" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_setf" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  result = (std::ios_base::fmtflags)(arg1)->setf(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_setf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  std::ios_base::fmtflags arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::ios_base::fmtflags result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ios_base_setf",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_setf" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_setf" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ios_base_setf" "', argument " "3"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg3 = static_cast< std::ios_base::fmtflags >(val3);
  result = (std::ios_base::fmtflags)(arg1)->setf(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_setf(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_base_setf__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ios_base_setf__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ios_base_setf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setf(std::ios_base *,std::ios_base::fmtflags)\n"
    "    setf(std::ios_base *,std::ios_base::fmtflags,std::ios_base::fmtflags)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_unsetf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_unsetf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_unsetf" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_unsetf" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  (arg1)->unsetf(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_precision__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::streamsize result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_base_precision",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_precision" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  result = ((std::ios_base const *)arg1)->precision();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_precision__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::streamsize arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::streamsize result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_precision",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_precision" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_precision" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  result = (arg1)->precision(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_precision(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_base_precision__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_base_precision__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ios_base_precision'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    precision(std::ios_base const *)\n"
    "    precision(std::ios_base *,std::streamsize)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_width__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::streamsize result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_base_width",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_width" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  result = ((std::ios_base const *)arg1)->width();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_width__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::streamsize arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::streamsize result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_width",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_width" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_width" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  result = (arg1)->width(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_width(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_base_width__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_base_width__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ios_base_width'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    width(std::ios_base const *)\n"
    "    width(std::ios_base *,std::streamsize)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_sync_with_stdio__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_base_sync_with_stdio",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ios_base_sync_with_stdio" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  result = (bool)std::ios_base::sync_with_stdio(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_sync_with_stdio__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)":ios_base_sync_with_stdio")) SWIG_fail;
  result = (bool)std::ios_base::sync_with_stdio();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_sync_with_stdio(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_ios_base_sync_with_stdio__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ios_base_sync_with_stdio__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ios_base_sync_with_stdio'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    sync_with_stdio(bool)\n"
    "    std::ios_base::sync_with_stdio()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_imbue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::locale *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::locale result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_imbue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_imbue" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__locale,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_base_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ios_base_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  arg2 = reinterpret_cast< std::locale * >(argp2);
  result = (arg1)->imbue((std::locale const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::locale(static_cast< const std::locale& >(result))), SWIGTYPE_p_std__locale, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_getloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::locale result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_base_getloc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_getloc" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  result = ((std::ios_base const *)arg1)->getloc();
  resultobj = SWIG_NewPointerObj((new std::locale(static_cast< const std::locale& >(result))), SWIGTYPE_p_std__locale, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_xalloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":ios_base_xalloc")) SWIG_fail;
  result = (int)std::ios_base::xalloc();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_iword(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_iword",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_iword" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_iword" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    long &_result_ref = (arg1)->iword(arg2);
    result = (long *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_long, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_pword(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  void **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_base_pword",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_pword" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_pword" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    void *&_result_ref = (arg1)->pword(arg2);
    result = (void **) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ios_base(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ios_base",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ios_base, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ios_base" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ios_base_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__ios_base, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ios_rdstate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::ios_base::iostate result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_rdstate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_rdstate" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::ios_base::iostate)((std::basic_ios< char > const *)arg1)->rdstate();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_clear__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::ios_base::iostate arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_clear",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_clear" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_clear" "', argument " "2"" of type '" "std::ios_base::iostate""'");
  } 
  arg2 = static_cast< std::ios_base::iostate >(val2);
  (arg1)->clear(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_clear__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_clear" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_clear(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_clear__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_clear__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ios_clear'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    clear(std::basic_ios< char > *,std::ios_base::iostate)\n"
    "    clear(std::basic_ios< char > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_setstate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::ios_base::iostate arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_setstate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_setstate" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_setstate" "', argument " "2"" of type '" "std::ios_base::iostate""'");
  } 
  arg2 = static_cast< std::ios_base::iostate >(val2);
  (arg1)->setstate(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_good(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_good",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_good" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (bool)((std::basic_ios< char > const *)arg1)->good();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_eof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_eof",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_eof" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (bool)((std::basic_ios< char > const *)arg1)->eof();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_fail",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_fail" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (bool)((std::basic_ios< char > const *)arg1)->fail();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_bad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_bad",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_bad" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (bool)((std::basic_ios< char > const *)arg1)->bad();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_exceptions__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::ios_base::iostate result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_exceptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_exceptions" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::ios_base::iostate)((std::basic_ios< char > const *)arg1)->exceptions();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_exceptions__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::ios_base::iostate arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_exceptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_exceptions" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_exceptions" "', argument " "2"" of type '" "std::ios_base::iostate""'");
  } 
  arg2 = static_cast< std::ios_base::iostate >(val2);
  (arg1)->exceptions(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_exceptions(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_exceptions__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_exceptions__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ios_exceptions'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    exceptions(std::basic_ios< char > const *)\n"
    "    exceptions(std::basic_ios< char > *,std::ios_base::iostate)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ios(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char,std::char_traits< char > > *arg1 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ios< char > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ios",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ios" "', argument " "1"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_ios< char > *)new std::basic_ios< char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ios(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ios",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ios" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_tie__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_tie",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_tie" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::basic_ostream< char,std::char_traits< char > > *)((std::basic_ios< char > const *)arg1)->tie();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_tie__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = (std::basic_ostream< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_tie",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_tie" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_tie" "', argument " "2"" of type '" "std::basic_ostream< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp2);
  result = (std::basic_ostream< char,std::char_traits< char > > *)(arg1)->tie(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_tie(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_tie__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ios_tie__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ios_tie'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    tie(std::basic_ios< char > const *)\n"
    "    tie(std::basic_ios< char > *,std::basic_ostream< char,std::char_traits< char > > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_rdbuf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_rdbuf",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_rdbuf" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::basic_streambuf< char,std::char_traits< char > > *)((std::basic_ios< char > const *)arg1)->rdbuf();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_rdbuf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_rdbuf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_rdbuf" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_rdbuf" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  result = (std::basic_streambuf< char,std::char_traits< char > > *)(arg1)->rdbuf(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_rdbuf(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_rdbuf__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ios_rdbuf__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ios_rdbuf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    rdbuf(std::basic_ios< char > const *)\n"
    "    rdbuf(std::basic_ios< char > *,std::basic_streambuf< char,std::char_traits< char > > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_copyfmt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_ios< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ios< char > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_copyfmt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_copyfmt" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_copyfmt" "', argument " "2"" of type '" "std::basic_ios< char > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ios_copyfmt" "', argument " "2"" of type '" "std::basic_ios< char > const &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_ios< char > * >(argp2);
  {
    std::basic_ios< char > &_result_ref = (arg1)->copyfmt((std::basic_ios< char > const &)*arg2);
    result = (std::basic_ios< char > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fill__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ios< char >::char_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ios_fill",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_fill" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::basic_ios< char >::char_type)((std::basic_ios< char > const *)arg1)->fill();
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fill__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_ios< char >::char_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ios< char >::char_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_fill",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_fill" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_fill" "', argument " "2"" of type '" "std::basic_ios< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_ios< char >::char_type >(val2);
  result = (std::basic_ios< char >::char_type)(arg1)->fill(arg2);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fill(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_fill__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_fill__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ios_fill'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fill(std::basic_ios< char > const *)\n"
    "    fill(std::basic_ios< char > *,std::basic_ios< char >::char_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_imbue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::locale *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::locale result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_imbue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_imbue" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__locale,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ios_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  arg2 = reinterpret_cast< std::locale * >(argp2);
  result = (arg1)->imbue((std::locale const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::locale(static_cast< const std::locale& >(result))), SWIGTYPE_p_std__locale, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_narrow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_ios< char >::char_type arg2 ;
  char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ios_narrow",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_narrow" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_narrow" "', argument " "2"" of type '" "std::basic_ios< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_ios< char >::char_type >(val2);
  ecode3 = SWIG_AsVal_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ios_narrow" "', argument " "3"" of type '" "char""'");
  } 
  arg3 = static_cast< char >(val3);
  result = (char)((std::basic_ios< char > const *)arg1)->narrow(arg2,arg3);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_widen(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ios< char >::char_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ios_widen",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_widen" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_widen" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = (std::basic_ios< char >::char_type)((std::basic_ios< char > const *)arg1)->widen(arg2);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ios_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_cin_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cin is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cin_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::cin), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_cout_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cout is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cout_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::cout), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_cerr_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cerr is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cerr_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::cerr), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_clog_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable clog is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_clog_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::clog), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_ostream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char,std::char_traits< char > > *arg1 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ostream< char > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ostream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ostream" "', argument " "1"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_ostream< char > *)new std::basic_ostream< char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ostream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ostream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ostream" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > &(*arg2)(std::basic_ostream< char,std::char_traits< char > > &) = (std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)""'"); 
    }
  }
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<(*arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ios< char,std::char_traits< char > > &(*arg2)(std::basic_ios< char,std::char_traits< char > > &) = (std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)""'"); 
    }
  }
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<(*arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::ios_base &(*arg2)(std::ios_base &) = (std::ios_base &(*)(std::ios_base &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::ios_base &(*)(std::ios_base &)""'"); 
    }
  }
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<(*arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = static_cast< long long >(val2);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  unsigned long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  arg2 = static_cast< unsigned long long >(val2);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  long double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long double""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long double""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "void const *""'"); 
  }
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<((void const *)arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->operator <<(arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_17(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_string< char,std::char_traits< char >,std::allocator< char > > * >(argp2);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = std_basic_ostream_Sl_char_Sg__operator_Sl__Sl___SWIG_17(arg1,(std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)*arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_long_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_14(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_16(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_17(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_15(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_9(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_8(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_11(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_10(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_13(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_12(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_5(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream_put(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char >::char_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream_put",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_put" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream_put" "', argument " "2"" of type '" "std::basic_ostream< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_ostream< char >::char_type >(val2);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->put(arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char >::char_type *arg2 = (std::basic_ostream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ostream_write",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_write" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream_write" "', argument " "2"" of type '" "std::basic_ostream< char >::char_type const *""'");
  }
  arg2 = reinterpret_cast< std::basic_ostream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ostream_write" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->write((std::basic_ostream< char >::char_type const *)arg2,arg3);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_flush(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ostream_flush",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_flush" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->flush();
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_tellp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ostream< char >::pos_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ostream_tellp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_tellp" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  result = (arg1)->tellp();
  resultobj = SWIG_NewPointerObj((new std::basic_ostream< char >::pos_type(static_cast< const std::basic_ostream< char >::pos_type& >(result))), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_seekp__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char >::pos_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ostream_seekp",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_seekp" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream< char >::pos_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream< char >::pos_type""'");
    } else {
      std::basic_ostream< char >::pos_type * temp = reinterpret_cast< std::basic_ostream< char >::pos_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->seekp(arg2);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_seekp__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char >::off_type arg2 ;
  std::ios_base::seekdir arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ostream_seekp",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_seekp" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__off_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream< char >::off_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream< char >::off_type""'");
    } else {
      std::basic_ostream< char >::off_type * temp = reinterpret_cast< std::basic_ostream< char >::off_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ostream_seekp" "', argument " "3"" of type '" "std::ios_base::seekdir""'");
  } 
  arg3 = static_cast< std::ios_base::seekdir >(val3);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = (arg1)->seekp(arg2,arg3);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_seekp(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream_seekp__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__off_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ostream_seekp__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ostream_seekp'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    seekp(std::basic_ostream< char > *,std::basic_ostream< char >::pos_type)\n"
    "    seekp(std::basic_ostream< char > *,std::basic_ostream< char >::off_type,std::ios_base::seekdir)\n");
  return NULL;
}


SWIGINTERN PyObject *ostream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_istream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char,std::char_traits< char > > *arg1 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_istream< char > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_istream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_istream" "', argument " "1"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_istream< char > *)new std::basic_istream< char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_istream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_istream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_istream" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char,std::char_traits< char > > &(*arg2)(std::basic_istream< char,std::char_traits< char > > &) = (std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)""'"); 
    }
  }
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_ios< char,std::char_traits< char > > &(*arg2)(std::basic_ios< char,std::char_traits< char > > &) = (std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)""'"); 
    }
  }
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::ios_base &(*arg2)(std::ios_base &) = (std::ios_base &(*)(std::ios_base &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::ios_base &(*)(std::ios_base &)""'"); 
    }
  }
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "bool &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "bool &""'"); 
  }
  arg2 = reinterpret_cast< bool * >(argp2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_short,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "short &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "short &""'"); 
  }
  arg2 = reinterpret_cast< short * >(argp2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  unsigned short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned short &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned short &""'"); 
  }
  arg2 = reinterpret_cast< unsigned short * >(argp2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "int &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "int &""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_unsigned_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned int &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned int &""'"); 
  }
  arg2 = reinterpret_cast< unsigned int * >(argp2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "long &""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  unsigned long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_unsigned_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long &""'"); 
  }
  arg2 = reinterpret_cast< unsigned long * >(argp2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_long_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "long long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "long long &""'"); 
  }
  arg2 = reinterpret_cast< long long * >(argp2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  unsigned long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_unsigned_long_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long long &""'"); 
  }
  arg2 = reinterpret_cast< unsigned long long * >(argp2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "float &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "float &""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  long double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_long_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "long double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "long double &""'"); 
  }
  arg2 = reinterpret_cast< long double * >(argp2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void **arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_p_void,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "void *&""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "void *&""'"); 
  }
  arg2 = reinterpret_cast< void ** >(argp2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream___rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->operator >>(arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_bool, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_short, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_short, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_int, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_int, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_long, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_8(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_long, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_9(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_long_long, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_10(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_long_long, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_11(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_12(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_13(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_long_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_14(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_void, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_15(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_16(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream_gcount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::streamsize result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_gcount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_gcount" "', argument " "1"" of type '" "std::basic_istream< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = ((std::basic_istream< char > const *)arg1)->gcount();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_istream< char >::int_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (std::basic_istream< char >::int_type)(arg1)->get();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__char_type,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream< char >::char_type &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream< char >::char_type &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(argp2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->get(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  std::basic_istream< char >::char_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:istream_get",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_get" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  ecode4 = SWIG_AsVal_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "istream_get" "', argument " "4"" of type '" "std::basic_istream< char >::char_type""'");
  } 
  arg4 = static_cast< std::basic_istream< char >::char_type >(val4);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->get(arg2,arg3,arg4);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_get",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_get" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->get(arg2,arg3);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = 0 ;
  std::basic_istream< char >::char_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_get",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  ecode3 = SWIG_AsVal_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_get" "', argument " "3"" of type '" "std::basic_istream< char >::char_type""'");
  } 
  arg3 = static_cast< std::basic_istream< char >::char_type >(val3);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->get(*arg2,arg3);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->get(*arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_istream_get__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__char_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream_get__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream_get__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_get__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_get__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_istream_get__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'istream_get'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    get(std::basic_istream< char > *)\n"
    "    get(std::basic_istream< char > *,std::basic_istream< char >::char_type &)\n"
    "    get(std::basic_istream< char > *,std::basic_istream< char >::char_type *,std::streamsize,std::basic_istream< char >::char_type)\n"
    "    get(std::basic_istream< char > *,std::basic_istream< char >::char_type *,std::streamsize)\n"
    "    get(std::basic_istream< char > *,std::basic_streambuf< char,std::char_traits< char > > &,std::basic_istream< char >::char_type)\n"
    "    get(std::basic_istream< char > *,std::basic_streambuf< char,std::char_traits< char > > &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_getline__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  std::basic_istream< char >::char_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:istream_getline",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_getline" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_getline" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_getline" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  ecode4 = SWIG_AsVal_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "istream_getline" "', argument " "4"" of type '" "std::basic_istream< char >::char_type""'");
  } 
  arg4 = static_cast< std::basic_istream< char >::char_type >(val4);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->getline(arg2,arg3,arg4);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_getline__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_getline",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_getline" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_getline" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_getline" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->getline(arg2,arg3);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_getline(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_getline__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_istream_getline__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'istream_getline'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getline(std::basic_istream< char > *,std::basic_istream< char >::char_type *,std::streamsize,std::basic_istream< char >::char_type)\n"
    "    getline(std::basic_istream< char > *,std::basic_istream< char >::char_type *,std::streamsize)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_ignore__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::streamsize arg2 ;
  std::basic_istream< char >::int_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_ignore",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_ignore" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "istream_ignore" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_ignore" "', argument " "3"" of type '" "std::basic_istream< char >::int_type""'");
  } 
  arg3 = static_cast< std::basic_istream< char >::int_type >(val3);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->ignore(arg2,arg3);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_ignore__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::streamsize arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream_ignore",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_ignore" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "istream_ignore" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->ignore(arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_ignore__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_ignore",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_ignore" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->ignore();
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_ignore(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_istream_ignore__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_istream_ignore__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_ignore__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'istream_ignore'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ignore(std::basic_istream< char > *,std::streamsize,std::basic_istream< char >::int_type)\n"
    "    ignore(std::basic_istream< char > *,std::streamsize)\n"
    "    ignore(std::basic_istream< char > *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_peek(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_istream< char >::int_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_peek",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_peek" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (std::basic_istream< char >::int_type)(arg1)->peek();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_read",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_read" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_read" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_read" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->read(arg2,arg3);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_readsome(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::streamsize result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_readsome",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_readsome" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_readsome" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_readsome" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (arg1)->readsome(arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_putback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream_putback",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_putback" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "istream_putback" "', argument " "2"" of type '" "std::basic_istream< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_istream< char >::char_type >(val2);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->putback(arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_unget(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_unget",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_unget" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->unget();
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_sync(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_sync",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_sync" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (int)(arg1)->sync();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_tellg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_istream< char >::pos_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:istream_tellg",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_tellg" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (arg1)->tellg();
  resultobj = SWIG_NewPointerObj((new std::basic_istream< char >::pos_type(static_cast< const std::basic_istream< char >::pos_type& >(result))), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_seekg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::pos_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:istream_seekg",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_seekg" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream< char >::pos_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream< char >::pos_type""'");
    } else {
      std::basic_istream< char >::pos_type * temp = reinterpret_cast< std::basic_istream< char >::pos_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->seekg(arg2);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_seekg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::off_type arg2 ;
  std::ios_base::seekdir arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:istream_seekg",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_seekg" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__off_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream< char >::off_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream< char >::off_type""'");
    } else {
      std::basic_istream< char >::off_type * temp = reinterpret_cast< std::basic_istream< char >::off_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_seekg" "', argument " "3"" of type '" "std::ios_base::seekdir""'");
  } 
  arg3 = static_cast< std::ios_base::seekdir >(val3);
  {
    std::basic_istream< char,std::char_traits< char > > &_result_ref = (arg1)->seekg(arg2,arg3);
    result = (std::basic_istream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_seekg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream_seekg__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__off_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_seekg__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'istream_seekg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    seekg(std::basic_istream< char > *,std::basic_istream< char >::pos_type)\n"
    "    seekg(std::basic_istream< char > *,std::basic_istream< char >::off_type,std::ios_base::seekdir)\n");
  return NULL;
}


SWIGINTERN PyObject *istream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_iostream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char,std::char_traits< char > > *arg1 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_iostream< char > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_iostream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_iostream" "', argument " "1"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_iostream< char > *)new std::basic_iostream< char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_iostream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_iostream< char > *arg1 = (std::basic_iostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_iostream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_iostream" "', argument " "1"" of type '" "std::basic_iostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_iostream< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *iostream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_endl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char,std::char_traits< char > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:endl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "endl" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "endl" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp1);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = std::SWIGTEMPLATEDISAMBIGUATOR endl< char,std::char_traits< char > >(*arg1);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ends(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char,std::char_traits< char > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ends",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ends" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ends" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp1);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = std::SWIGTEMPLATEDISAMBIGUATOR ends< char,std::char_traits< char > >(*arg1);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flush(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char,std::char_traits< char > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:flush",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flush" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "flush" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp1);
  {
    std::basic_ostream< char,std::char_traits< char > > &_result_ref = std::SWIGTEMPLATEDISAMBIGUATOR flush< char,std::char_traits< char > >(*arg1);
    result = (std::basic_ostream< char,std::char_traits< char > > *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:SourceGroup_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup_iterator" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  {
    try {
      result = (swig::PySwigIterator *)std_vector_Sl_lsst_afw_detection_SourceSet_Sg__iterator(arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SourceGroup___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup___nonzero__" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_lsst_afw_detection_SourceSet_Sg____nonzero__((std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > > const *)arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SourceGroup___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup___len__" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  {
    try {
      result = std_vector_Sl_lsst_afw_detection_SourceSet_Sg____len__((std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > > const *)arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SourceGroup_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup_pop" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_lsst_afw_detection_SourceSet_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector<boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type arg2 ;
  std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::vector< lsst::afw::detection::Source::Ptr,std::allocator< lsst::afw::detection::Source::Ptr > >,std::allocator< std::vector< lsst::afw::detection::Source::Ptr,std::allocator< lsst::afw::detection::Source::Ptr > > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SourceGroup___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup___getslice__" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SourceGroup___getslice__" "', argument " "2"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SourceGroup___getslice__" "', argument " "3"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< std::vector< lsst::afw::detection::Source::Ptr,std::allocator< lsst::afw::detection::Source::Ptr > >,std::allocator< std::vector< lsst::afw::detection::Source::Ptr,std::allocator< lsst::afw::detection::Source::Ptr > > > > *)std_vector_Sl_lsst_afw_detection_SourceSet_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type arg2 ;
  std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type arg3 ;
  std::vector< std::vector< lsst::afw::detection::Source::Ptr,std::allocator< lsst::afw::detection::Source::Ptr > >,std::allocator< std::vector< lsst::afw::detection::Source::Ptr,std::allocator< lsst::afw::detection::Source::Ptr > > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SourceGroup___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup___setslice__" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SourceGroup___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SourceGroup___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type >(val3);
  {
    std::vector<std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > >,std::allocator< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > > > *ptr = (std::vector<std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > >,std::allocator< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SourceGroup___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< lsst::afw::detection::Source::Ptr,std::allocator< lsst::afw::detection::Source::Ptr > >,std::allocator< std::vector< lsst::afw::detection::Source::Ptr,std::allocator< lsst::afw::detection::Source::Ptr > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SourceGroup___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< lsst::afw::detection::Source::Ptr,std::allocator< lsst::afw::detection::Source::Ptr > >,std::allocator< std::vector< lsst::afw::detection::Source::Ptr,std::allocator< lsst::afw::detection::Source::Ptr > > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_lsst_afw_detection_SourceSet_Sg____setslice__(arg1,arg2,arg3,(std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > >,std::allocator< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type arg2 ;
  std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SourceGroup___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup___delslice__" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SourceGroup___delslice__" "', argument " "2"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SourceGroup___delslice__" "', argument " "3"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_lsst_afw_detection_SourceSet_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SourceGroup___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup___delitem__" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SourceGroup___delitem__" "', argument " "2"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_lsst_afw_detection_SourceSet_Sg____delitem__(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SourceGroup___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup___getitem__" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SourceGroup___getitem__" "', argument " "2"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type >(val2);
  {
    try {
      try {
        {
          std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type const &_result_ref = std_vector_Sl_lsst_afw_detection_SourceSet_Sg____getitem__((std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > > const *)arg1,arg2);
          result = (std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type *) &_result_ref;
        }
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector<boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type arg2 ;
  std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SourceGroup___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup___setitem__" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SourceGroup___setitem__" "', argument " "2"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::difference_type >(val2);
  {
    std::vector<boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > *ptr = (std::vector<boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SourceGroup___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SourceGroup___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_lsst_afw_detection_SourceSet_Sg____setitem__(arg1,arg2,(std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SourceGroup_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup_append" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  {
    std::vector<boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > *ptr = (std::vector<boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SourceGroup_append" "', argument " "2"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SourceGroup_append" "', argument " "2"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      std_vector_Sl_lsst_afw_detection_SourceSet_Sg__append(arg1,(std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SourceGroup__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SourceGroup")) SWIG_fail;
  {
    try {
      result = (std::vector< lsst::afw::detection::SourceSet > *)new std::vector< lsst::afw::detection::SourceSet >();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SourceGroup__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< lsst::afw::detection::SourceSet > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SourceGroup",&obj0)) SWIG_fail;
  {
    std::vector<std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > >,std::allocator< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > > > *ptr = (std::vector<std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > >,std::allocator< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SourceGroup" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SourceGroup" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< lsst::afw::detection::SourceSet > *)new std::vector< lsst::afw::detection::SourceSet >((std::vector< lsst::afw::detection::SourceSet > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SourceGroup_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup_empty" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  {
    try {
      result = (bool)((std::vector< lsst::afw::detection::SourceSet > const *)arg1)->empty();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SourceGroup_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup_size" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  {
    try {
      result = ((std::vector< lsst::afw::detection::SourceSet > const *)arg1)->size();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SourceGroup_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup_clear" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  std::vector< lsst::afw::detection::SourceSet > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SourceGroup_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup_swap" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SourceGroup_swap" "', argument " "2"" of type '" "std::vector< lsst::afw::detection::SourceSet > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SourceGroup_swap" "', argument " "2"" of type '" "std::vector< lsst::afw::detection::SourceSet > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SourceGroup_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup_get_allocator" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  {
    try {
      result = ((std::vector< lsst::afw::detection::SourceSet > const *)arg1)->get_allocator();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::allocator_type(static_cast< const std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::const_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SourceGroup_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup_begin" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  {
    try {
      result = ((std::vector< lsst::afw::detection::SourceSet > const *)arg1)->begin();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::const_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SourceGroup_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup_end" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  {
    try {
      result = ((std::vector< lsst::afw::detection::SourceSet > const *)arg1)->end();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::const_reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SourceGroup_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup_rbegin" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  {
    try {
      result = ((std::vector< lsst::afw::detection::SourceSet > const *)arg1)->rbegin();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::const_reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SourceGroup_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup_rend" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  {
    try {
      result = ((std::vector< lsst::afw::detection::SourceSet > const *)arg1)->rend();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SourceGroup__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< lsst::afw::detection::SourceSet > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SourceGroup",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SourceGroup" "', argument " "1"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::size_type >(val1);
  {
    try {
      result = (std::vector< lsst::afw::detection::SourceSet > *)new std::vector< lsst::afw::detection::SourceSet >(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SourceGroup_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup_pop_back" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SourceGroup_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup_resize" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SourceGroup_resize" "', argument " "2"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  SwigValueWrapper< std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SourceGroup_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup_erase" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SourceGroup_erase" "', argument " "2"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SourceGroup_erase" "', argument " "2"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  SwigValueWrapper< std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator > arg2 ;
  SwigValueWrapper< std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  swig::PySwigIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SourceGroup_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup_erase" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SourceGroup_erase" "', argument " "2"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SourceGroup_erase" "', argument " "2"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SourceGroup_erase" "', argument " "3"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SourceGroup_erase" "', argument " "3"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > >,std::allocator< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_SourceGroup_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > >,std::allocator< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::PySwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_SourceGroup_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SourceGroup_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< lsst::afw::detection::SourceSet > *,std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator)\n"
    "    erase(std::vector< lsst::afw::detection::SourceSet > *,std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator,std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SourceGroup__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::size_type arg1 ;
  std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< lsst::afw::detection::SourceSet > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SourceGroup",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SourceGroup" "', argument " "1"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::size_type >(val1);
  {
    std::vector<boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > *ptr = (std::vector<boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SourceGroup" "', argument " "2"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SourceGroup" "', argument " "2"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (std::vector< lsst::afw::detection::SourceSet > *)new std::vector< lsst::afw::detection::SourceSet >(arg1,(std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SourceGroup(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SourceGroup__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SourceGroup__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > >,std::allocator< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SourceGroup__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_SourceGroup__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_SourceGroup'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< lsst::afw::detection::SourceSet >()\n"
    "    std::vector< lsst::afw::detection::SourceSet >(std::vector< lsst::afw::detection::SourceSet > const &)\n"
    "    std::vector< lsst::afw::detection::SourceSet >(std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::size_type)\n"
    "    std::vector< lsst::afw::detection::SourceSet >(std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::size_type,std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SourceGroup_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup_push_back" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  {
    std::vector<boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > *ptr = (std::vector<boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SourceGroup_push_back" "', argument " "2"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SourceGroup_push_back" "', argument " "2"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->push_back((std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SourceGroup_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup_front" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  {
    try {
      {
        std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type const &_result_ref = ((std::vector< lsst::afw::detection::SourceSet > const *)arg1)->front();
        result = (std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector<boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SourceGroup_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup_back" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  {
    try {
      {
        std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type const &_result_ref = ((std::vector< lsst::afw::detection::SourceSet > const *)arg1)->back();
        result = (std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector<boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::size_type arg2 ;
  std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SourceGroup_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup_assign" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SourceGroup_assign" "', argument " "2"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::size_type >(val2);
  {
    std::vector<boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > *ptr = (std::vector<boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SourceGroup_assign" "', argument " "3"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SourceGroup_assign" "', argument " "3"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->assign(arg2,(std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type const &)*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::size_type arg2 ;
  std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SourceGroup_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup_resize" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SourceGroup_resize" "', argument " "2"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::size_type >(val2);
  {
    std::vector<boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > *ptr = (std::vector<boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SourceGroup_resize" "', argument " "3"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SourceGroup_resize" "', argument " "3"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->resize(arg2,(std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type const &)*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > >,std::allocator< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SourceGroup_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > >,std::allocator< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SourceGroup_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SourceGroup_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< lsst::afw::detection::SourceSet > *,std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::size_type)\n"
    "    resize(std::vector< lsst::afw::detection::SourceSet > *,std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::size_type,std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  SwigValueWrapper< std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator > arg2 ;
  std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SourceGroup_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup_insert" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SourceGroup_insert" "', argument " "2"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SourceGroup_insert" "', argument " "2"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator""'");
    }
  }
  {
    std::vector<boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > *ptr = (std::vector<boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SourceGroup_insert" "', argument " "3"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SourceGroup_insert" "', argument " "3"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (arg1)->insert(arg2,(std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type const &)*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  SwigValueWrapper< std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator > arg2 ;
  std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::size_type arg3 ;
  std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SourceGroup_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup_insert" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SourceGroup_insert" "', argument " "2"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SourceGroup_insert" "', argument " "2"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SourceGroup_insert" "', argument " "3"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::size_type >(val3);
  {
    std::vector<boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > *ptr = (std::vector<boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SourceGroup_insert" "', argument " "4"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SourceGroup_insert" "', argument " "4"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      (arg1)->insert(arg2,arg3,(std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type const &)*arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > >,std::allocator< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SourceGroup_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > >,std::allocator< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SourceGroup_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SourceGroup_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< lsst::afw::detection::SourceSet > *,std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator,std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type const &)\n"
    "    insert(std::vector< lsst::afw::detection::SourceSet > *,std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::iterator,std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::size_type,std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SourceGroup_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup_reserve" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SourceGroup_reserve" "', argument " "2"" of type '" "std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SourceGroup_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SourceGroup_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SourceGroup_capacity" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  {
    try {
      result = ((std::vector< lsst::afw::detection::SourceSet > const *)arg1)->capacity();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SourceGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::detection::SourceSet > *arg1 = (std::vector< lsst::afw::detection::SourceSet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SourceGroup",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SourceGroup" "', argument " "1"" of type '" "std::vector< lsst::afw::detection::SourceSet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::detection::SourceSet > * >(argp1);
  {
    try {
      delete arg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SourceGroup_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_vvSourceMatch_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:vvSourceMatch_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch_iterator" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  {
    try {
      result = (swig::PySwigIterator *)std_vector_Sl_std_vector_Sl_lsst_afw_detection_SourceMatch_Sg__Sg__iterator(arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vvSourceMatch___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch___nonzero__" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_std_vector_Sl_lsst_afw_detection_SourceMatch_Sg__Sg____nonzero__((std::vector< std::vector< lsst::afw::detection::SourceMatch > > const *)arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vvSourceMatch___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch___len__" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  {
    try {
      result = std_vector_Sl_std_vector_Sl_lsst_afw_detection_SourceMatch_Sg__Sg____len__((std::vector< std::vector< lsst::afw::detection::SourceMatch > > const *)arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vvSourceMatch_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch_pop" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_std_vector_Sl_lsst_afw_detection_SourceMatch_Sg__Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector<lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type arg2 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >,std::allocator< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vvSourceMatch___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch___getslice__" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vvSourceMatch___getslice__" "', argument " "2"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vvSourceMatch___getslice__" "', argument " "3"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >,std::allocator< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > > *)std_vector_Sl_std_vector_Sl_lsst_afw_detection_SourceMatch_Sg__Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type arg2 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type arg3 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >,std::allocator< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vvSourceMatch___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vvSourceMatch___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vvSourceMatch___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type >(val3);
  {
    std::vector<std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >,std::allocator< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > > *ptr = (std::vector<std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >,std::allocator< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vvSourceMatch___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >,std::allocator< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vvSourceMatch___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >,std::allocator< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_lsst_afw_detection_SourceMatch_Sg__Sg____setslice__(arg1,arg2,arg3,(std::vector< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >,std::allocator< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type arg2 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vvSourceMatch___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch___delslice__" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vvSourceMatch___delslice__" "', argument " "2"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vvSourceMatch___delslice__" "', argument " "3"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_lsst_afw_detection_SourceMatch_Sg__Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vvSourceMatch___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vvSourceMatch___delitem__" "', argument " "2"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_lsst_afw_detection_SourceMatch_Sg__Sg____delitem__(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vvSourceMatch___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vvSourceMatch___getitem__" "', argument " "2"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type >(val2);
  {
    try {
      try {
        {
          std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type const &_result_ref = std_vector_Sl_std_vector_Sl_lsst_afw_detection_SourceMatch_Sg__Sg____getitem__((std::vector< std::vector< lsst::afw::detection::SourceMatch > > const *)arg1,arg2);
          result = (std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type *) &_result_ref;
        }
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector<lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type arg2 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vvSourceMatch___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vvSourceMatch___setitem__" "', argument " "2"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > >::difference_type >(val2);
  {
    std::vector<lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > *ptr = (std::vector<lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vvSourceMatch___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vvSourceMatch___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_lsst_afw_detection_SourceMatch_Sg__Sg____setitem__(arg1,arg2,(std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vvSourceMatch_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch_append" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  {
    std::vector<lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > *ptr = (std::vector<lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vvSourceMatch_append" "', argument " "2"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vvSourceMatch_append" "', argument " "2"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      std_vector_Sl_std_vector_Sl_lsst_afw_detection_SourceMatch_Sg__Sg__append(arg1,(std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vvSourceMatch__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_vvSourceMatch")) SWIG_fail;
  {
    try {
      result = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *)new std::vector< std::vector< lsst::afw::detection::SourceMatch > >();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vvSourceMatch__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vvSourceMatch",&obj0)) SWIG_fail;
  {
    std::vector<std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >,std::allocator< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > > *ptr = (std::vector<std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >,std::allocator< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vvSourceMatch" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vvSourceMatch" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *)new std::vector< std::vector< lsst::afw::detection::SourceMatch > >((std::vector< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vvSourceMatch_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch_empty" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  {
    try {
      result = (bool)((std::vector< std::vector< lsst::afw::detection::SourceMatch > > const *)arg1)->empty();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vvSourceMatch_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch_size" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  {
    try {
      result = ((std::vector< std::vector< lsst::afw::detection::SourceMatch > > const *)arg1)->size();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vvSourceMatch_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch_clear" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vvSourceMatch_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch_swap" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vvSourceMatch_swap" "', argument " "2"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vvSourceMatch_swap" "', argument " "2"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vvSourceMatch_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch_get_allocator" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  {
    try {
      result = ((std::vector< std::vector< lsst::afw::detection::SourceMatch > > const *)arg1)->get_allocator();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< lsst::afw::detection::SourceMatch > >::allocator_type(static_cast< const std::vector< std::vector< lsst::afw::detection::SourceMatch > >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vvSourceMatch_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch_begin" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  {
    try {
      result = ((std::vector< std::vector< lsst::afw::detection::SourceMatch > > const *)arg1)->begin();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< lsst::afw::detection::SourceMatch > >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vvSourceMatch_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch_end" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  {
    try {
      result = ((std::vector< std::vector< lsst::afw::detection::SourceMatch > > const *)arg1)->end();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< lsst::afw::detection::SourceMatch > >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vvSourceMatch_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch_rbegin" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  {
    try {
      result = ((std::vector< std::vector< lsst::afw::detection::SourceMatch > > const *)arg1)->rbegin();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< lsst::afw::detection::SourceMatch > >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vvSourceMatch_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch_rend" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  {
    try {
      result = ((std::vector< std::vector< lsst::afw::detection::SourceMatch > > const *)arg1)->rend();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< lsst::afw::detection::SourceMatch > >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vvSourceMatch__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vvSourceMatch",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vvSourceMatch" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > >::size_type >(val1);
  {
    try {
      result = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *)new std::vector< std::vector< lsst::afw::detection::SourceMatch > >(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vvSourceMatch_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch_pop_back" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vvSourceMatch_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch_resize" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vvSourceMatch_resize" "', argument " "2"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vvSourceMatch_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch_erase" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vvSourceMatch_erase" "', argument " "2"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vvSourceMatch_erase" "', argument " "2"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator arg2 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  swig::PySwigIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vvSourceMatch_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch_erase" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vvSourceMatch_erase" "', argument " "2"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vvSourceMatch_erase" "', argument " "2"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vvSourceMatch_erase" "', argument " "3"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vvSourceMatch_erase" "', argument " "3"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >,std::allocator< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vvSourceMatch_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >,std::allocator< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::PySwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vvSourceMatch_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'vvSourceMatch_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< std::vector< lsst::afw::detection::SourceMatch > > *,std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator)\n"
    "    erase(std::vector< std::vector< lsst::afw::detection::SourceMatch > > *,std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator,std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vvSourceMatch__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::size_type arg1 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_vvSourceMatch",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vvSourceMatch" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > >::size_type >(val1);
  {
    std::vector<lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > *ptr = (std::vector<lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vvSourceMatch" "', argument " "2"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vvSourceMatch" "', argument " "2"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *)new std::vector< std::vector< lsst::afw::detection::SourceMatch > >(arg1,(std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vvSourceMatch(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vvSourceMatch__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vvSourceMatch__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >,std::allocator< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vvSourceMatch__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vvSourceMatch__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_vvSourceMatch'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< lsst::afw::detection::SourceMatch > >()\n"
    "    std::vector< std::vector< lsst::afw::detection::SourceMatch > >(std::vector< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > const &)\n"
    "    std::vector< std::vector< lsst::afw::detection::SourceMatch > >(std::vector< std::vector< lsst::afw::detection::SourceMatch > >::size_type)\n"
    "    std::vector< std::vector< lsst::afw::detection::SourceMatch > >(std::vector< std::vector< lsst::afw::detection::SourceMatch > >::size_type,std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vvSourceMatch_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch_push_back" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  {
    std::vector<lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > *ptr = (std::vector<lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vvSourceMatch_push_back" "', argument " "2"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vvSourceMatch_push_back" "', argument " "2"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->push_back((std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vvSourceMatch_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch_front" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  {
    try {
      {
        std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type const &_result_ref = ((std::vector< std::vector< lsst::afw::detection::SourceMatch > > const *)arg1)->front();
        result = (std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector<lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vvSourceMatch_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch_back" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  {
    try {
      {
        std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type const &_result_ref = ((std::vector< std::vector< lsst::afw::detection::SourceMatch > > const *)arg1)->back();
        result = (std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector<lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::size_type arg2 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vvSourceMatch_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch_assign" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vvSourceMatch_assign" "', argument " "2"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > >::size_type >(val2);
  {
    std::vector<lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > *ptr = (std::vector<lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vvSourceMatch_assign" "', argument " "3"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vvSourceMatch_assign" "', argument " "3"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->assign(arg2,(std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type const &)*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::size_type arg2 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vvSourceMatch_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch_resize" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vvSourceMatch_resize" "', argument " "2"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > >::size_type >(val2);
  {
    std::vector<lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > *ptr = (std::vector<lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vvSourceMatch_resize" "', argument " "3"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vvSourceMatch_resize" "', argument " "3"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->resize(arg2,(std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type const &)*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >,std::allocator< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vvSourceMatch_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >,std::allocator< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vvSourceMatch_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'vvSourceMatch_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< std::vector< lsst::afw::detection::SourceMatch > > *,std::vector< std::vector< lsst::afw::detection::SourceMatch > >::size_type)\n"
    "    resize(std::vector< std::vector< lsst::afw::detection::SourceMatch > > *,std::vector< std::vector< lsst::afw::detection::SourceMatch > >::size_type,std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator arg2 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vvSourceMatch_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch_insert" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vvSourceMatch_insert" "', argument " "2"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vvSourceMatch_insert" "', argument " "2"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator""'");
    }
  }
  {
    std::vector<lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > *ptr = (std::vector<lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vvSourceMatch_insert" "', argument " "3"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vvSourceMatch_insert" "', argument " "3"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (arg1)->insert(arg2,(std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type const &)*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator arg2 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::size_type arg3 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vvSourceMatch_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch_insert" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vvSourceMatch_insert" "', argument " "2"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vvSourceMatch_insert" "', argument " "2"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vvSourceMatch_insert" "', argument " "3"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > >::size_type >(val3);
  {
    std::vector<lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > *ptr = (std::vector<lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vvSourceMatch_insert" "', argument " "4"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vvSourceMatch_insert" "', argument " "4"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      (arg1)->insert(arg2,arg3,(std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type const &)*arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >,std::allocator< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vvSourceMatch_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >,std::allocator< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vvSourceMatch_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'vvSourceMatch_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< std::vector< lsst::afw::detection::SourceMatch > > *,std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator,std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type const &)\n"
    "    insert(std::vector< std::vector< lsst::afw::detection::SourceMatch > > *,std::vector< std::vector< lsst::afw::detection::SourceMatch > >::iterator,std::vector< std::vector< lsst::afw::detection::SourceMatch > >::size_type,std::vector< std::vector< lsst::afw::detection::SourceMatch > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vvSourceMatch_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch_reserve" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vvSourceMatch_reserve" "', argument " "2"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vvSourceMatch_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vvSourceMatch_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vvSourceMatch_capacity" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  {
    try {
      result = ((std::vector< std::vector< lsst::afw::detection::SourceMatch > > const *)arg1)->capacity();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vvSourceMatch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch > > *arg1 = (std::vector< std::vector< lsst::afw::detection::SourceMatch > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_vvSourceMatch",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vvSourceMatch" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< lsst::afw::detection::SourceMatch > > * >(argp1);
  {
    try {
      delete arg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vvSourceMatch_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_resultWcs_V_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:resultWcs_V_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V_iterator" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  {
    try {
      result = (swig::PySwigIterator *)std_vector_Sl_lsst_afw_image_TanWcs_Ptr_Sg__iterator(arg1,arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:resultWcs_V___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V___nonzero__" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_lsst_afw_image_TanWcs_Ptr_Sg____nonzero__((std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > > const *)arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:resultWcs_V___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V___len__" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  {
    try {
      result = std_vector_Sl_lsst_afw_image_TanWcs_Ptr_Sg____len__((std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > > const *)arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:resultWcs_V_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V_pop" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_lsst_afw_image_TanWcs_Ptr_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::image::TanWcs > *smartresult = result ? new boost::shared_ptr<  lsst::afw::image::TanWcs >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__TanWcs_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs >,std::allocator< boost::shared_ptr< lsst::afw::image::TanWcs > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:resultWcs_V___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V___getslice__" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "resultWcs_V___getslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "resultWcs_V___getslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< boost::shared_ptr< lsst::afw::image::TanWcs >,std::allocator< boost::shared_ptr< lsst::afw::image::TanWcs > > > *)std_vector_Sl_lsst_afw_image_TanWcs_Ptr_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type arg3 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs >,std::allocator< boost::shared_ptr< lsst::afw::image::TanWcs > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:resultWcs_V___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V___setslice__" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "resultWcs_V___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "resultWcs_V___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type >(val3);
  {
    std::vector<boost::shared_ptr< lsst::afw::image::TanWcs >,std::allocator< boost::shared_ptr< lsst::afw::image::TanWcs > > > *ptr = (std::vector<boost::shared_ptr< lsst::afw::image::TanWcs >,std::allocator< boost::shared_ptr< lsst::afw::image::TanWcs > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "resultWcs_V___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs >,std::allocator< boost::shared_ptr< lsst::afw::image::TanWcs > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "resultWcs_V___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs >,std::allocator< boost::shared_ptr< lsst::afw::image::TanWcs > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_lsst_afw_image_TanWcs_Ptr_Sg____setslice__(arg1,arg2,arg3,(std::vector< boost::shared_ptr< lsst::afw::image::TanWcs >,std::allocator< boost::shared_ptr< lsst::afw::image::TanWcs > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:resultWcs_V___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V___delslice__" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "resultWcs_V___delslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "resultWcs_V___delslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_lsst_afw_image_TanWcs_Ptr_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:resultWcs_V___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V___delitem__" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "resultWcs_V___delitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_lsst_afw_image_TanWcs_Ptr_Sg____delitem__(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:resultWcs_V___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V___getitem__" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "resultWcs_V___getitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type >(val2);
  {
    try {
      try {
        {
          std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type const &_result_ref = std_vector_Sl_lsst_afw_image_TanWcs_Ptr_Sg____getitem__((std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > > const *)arg1,arg2);
          result = (std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type *) &_result_ref;
        }
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::image::TanWcs > *smartresult = *result ? new boost::shared_ptr<  lsst::afw::image::TanWcs >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__TanWcs_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:resultWcs_V___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V___setitem__" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "resultWcs_V___setitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__TanWcs_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "resultWcs_V___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try {
      try {
        std_vector_Sl_lsst_afw_image_TanWcs_Ptr_Sg____setitem__(arg1,arg2,(boost::shared_ptr< lsst::afw::image::TanWcs > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:resultWcs_V_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V_append" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__TanWcs_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "resultWcs_V_append" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try {
      std_vector_Sl_lsst_afw_image_TanWcs_Ptr_Sg__append(arg1,(boost::shared_ptr< lsst::afw::image::TanWcs > const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_resultWcs_V__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_resultWcs_V")) SWIG_fail;
  {
    try {
      result = (std::vector< lsst::afw::image::TanWcs::Ptr > *)new std::vector< lsst::afw::image::TanWcs::Ptr >();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_resultWcs_V__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< lsst::afw::image::TanWcs::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_resultWcs_V",&obj0)) SWIG_fail;
  {
    std::vector<boost::shared_ptr< lsst::afw::image::TanWcs >,std::allocator< boost::shared_ptr< lsst::afw::image::TanWcs > > > *ptr = (std::vector<boost::shared_ptr< lsst::afw::image::TanWcs >,std::allocator< boost::shared_ptr< lsst::afw::image::TanWcs > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_resultWcs_V" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_resultWcs_V" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< lsst::afw::image::TanWcs::Ptr > *)new std::vector< lsst::afw::image::TanWcs::Ptr >((std::vector< lsst::afw::image::TanWcs::Ptr > const &)*arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:resultWcs_V_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V_empty" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  {
    try {
      result = (bool)((std::vector< lsst::afw::image::TanWcs::Ptr > const *)arg1)->empty();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:resultWcs_V_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V_size" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  {
    try {
      result = ((std::vector< lsst::afw::image::TanWcs::Ptr > const *)arg1)->size();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:resultWcs_V_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V_clear" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:resultWcs_V_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V_swap" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "resultWcs_V_swap" "', argument " "2"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "resultWcs_V_swap" "', argument " "2"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< boost::shared_ptr< lsst::afw::image::TanWcs > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:resultWcs_V_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V_get_allocator" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  {
    try {
      result = ((std::vector< lsst::afw::image::TanWcs::Ptr > const *)arg1)->get_allocator();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::allocator_type(static_cast< const std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::const_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:resultWcs_V_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V_begin" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  {
    try {
      result = ((std::vector< lsst::afw::image::TanWcs::Ptr > const *)arg1)->begin();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::const_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:resultWcs_V_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V_end" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  {
    try {
      result = ((std::vector< lsst::afw::image::TanWcs::Ptr > const *)arg1)->end();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::const_reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:resultWcs_V_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V_rbegin" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  {
    try {
      result = ((std::vector< lsst::afw::image::TanWcs::Ptr > const *)arg1)->rbegin();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::const_reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:resultWcs_V_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V_rend" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  {
    try {
      result = ((std::vector< lsst::afw::image::TanWcs::Ptr > const *)arg1)->rend();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_resultWcs_V__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< lsst::afw::image::TanWcs::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_resultWcs_V",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_resultWcs_V" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::size_type >(val1);
  {
    try {
      result = (std::vector< lsst::afw::image::TanWcs::Ptr > *)new std::vector< lsst::afw::image::TanWcs::Ptr >(arg1);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:resultWcs_V_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V_pop_back" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:resultWcs_V_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V_resize" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "resultWcs_V_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:resultWcs_V_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V_erase" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "resultWcs_V_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "resultWcs_V_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator > arg2 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  swig::PySwigIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:resultWcs_V_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V_erase" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "resultWcs_V_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "resultWcs_V_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "resultWcs_V_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "resultWcs_V_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2,arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< lsst::afw::image::TanWcs >,std::allocator< boost::shared_ptr< lsst::afw::image::TanWcs > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_resultWcs_V_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< lsst::afw::image::TanWcs >,std::allocator< boost::shared_ptr< lsst::afw::image::TanWcs > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::PySwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_resultWcs_V_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'resultWcs_V_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< lsst::afw::image::TanWcs::Ptr > *,std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator)\n"
    "    erase(std::vector< lsst::afw::image::TanWcs::Ptr > *,std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator,std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_resultWcs_V__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::size_type arg1 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< lsst::afw::image::TanWcs::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_resultWcs_V",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_resultWcs_V" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__TanWcs_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_resultWcs_V" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try {
      result = (std::vector< lsst::afw::image::TanWcs::Ptr > *)new std::vector< lsst::afw::image::TanWcs::Ptr >(arg1,(std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_resultWcs_V(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_resultWcs_V__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_resultWcs_V__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< lsst::afw::image::TanWcs >,std::allocator< boost::shared_ptr< lsst::afw::image::TanWcs > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_resultWcs_V__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__TanWcs_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_resultWcs_V__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_resultWcs_V'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< lsst::afw::image::TanWcs::Ptr >()\n"
    "    std::vector< lsst::afw::image::TanWcs::Ptr >(std::vector< lsst::afw::image::TanWcs::Ptr > const &)\n"
    "    std::vector< lsst::afw::image::TanWcs::Ptr >(std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::size_type)\n"
    "    std::vector< lsst::afw::image::TanWcs::Ptr >(std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::size_type,std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:resultWcs_V_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V_push_back" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__TanWcs_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "resultWcs_V_push_back" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try {
      (arg1)->push_back((std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type const &)*arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:resultWcs_V_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V_front" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  {
    try {
      {
        std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type const &_result_ref = ((std::vector< lsst::afw::image::TanWcs::Ptr > const *)arg1)->front();
        result = (std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::image::TanWcs > *smartresult = *result ? new boost::shared_ptr<  lsst::afw::image::TanWcs >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__TanWcs_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:resultWcs_V_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V_back" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  {
    try {
      {
        std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type const &_result_ref = ((std::vector< lsst::afw::image::TanWcs::Ptr > const *)arg1)->back();
        result = (std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type *) &_result_ref;
      }
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  {
    boost::shared_ptr<  lsst::afw::image::TanWcs > *smartresult = *result ? new boost::shared_ptr<  lsst::afw::image::TanWcs >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__TanWcs_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::size_type arg2 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:resultWcs_V_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V_assign" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "resultWcs_V_assign" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__TanWcs_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "resultWcs_V_assign" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try {
      (arg1)->assign(arg2,(std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type const &)*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::size_type arg2 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:resultWcs_V_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V_resize" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "resultWcs_V_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__TanWcs_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "resultWcs_V_resize" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try {
      (arg1)->resize(arg2,(std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type const &)*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< lsst::afw::image::TanWcs >,std::allocator< boost::shared_ptr< lsst::afw::image::TanWcs > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_resultWcs_V_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< lsst::afw::image::TanWcs >,std::allocator< boost::shared_ptr< lsst::afw::image::TanWcs > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__TanWcs_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_resultWcs_V_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'resultWcs_V_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< lsst::afw::image::TanWcs::Ptr > *,std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::size_type)\n"
    "    resize(std::vector< lsst::afw::image::TanWcs::Ptr > *,std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::size_type,std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:resultWcs_V_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V_insert" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "resultWcs_V_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "resultWcs_V_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__TanWcs_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "resultWcs_V_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try {
      result = (arg1)->insert(arg2,(std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type const &)*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::size_type arg3 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type tempshared4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:resultWcs_V_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V_insert" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "resultWcs_V_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "resultWcs_V_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "resultWcs_V_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__TanWcs_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "resultWcs_V_insert" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp4) tempshared4 = *reinterpret_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type * >(argp4);
      delete reinterpret_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type * >(argp4);
      arg4 = &tempshared4;
    } else {
      arg4 = (argp4) ? reinterpret_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type * >(argp4) : &tempshared4;
    }
  }
  {
    try {
      (arg1)->insert(arg2,arg3,(std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type const &)*arg4);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< lsst::afw::image::TanWcs >,std::allocator< boost::shared_ptr< lsst::afw::image::TanWcs > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__TanWcs_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_resultWcs_V_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< lsst::afw::image::TanWcs >,std::allocator< boost::shared_ptr< lsst::afw::image::TanWcs > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__image__TanWcs_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_resultWcs_V_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'resultWcs_V_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< lsst::afw::image::TanWcs::Ptr > *,std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator,std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type const &)\n"
    "    insert(std::vector< lsst::afw::image::TanWcs::Ptr > *,std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::iterator,std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::size_type,std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:resultWcs_V_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V_reserve" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "resultWcs_V_reserve" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_resultWcs_V_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:resultWcs_V_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "resultWcs_V_capacity" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  {
    try {
      result = ((std::vector< lsst::afw::image::TanWcs::Ptr > const *)arg1)->capacity();
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_resultWcs_V(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< lsst::afw::image::TanWcs::Ptr > *arg1 = (std::vector< lsst::afw::image::TanWcs::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_resultWcs_V",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_resultWcs_V" "', argument " "1"" of type '" "std::vector< lsst::afw::image::TanWcs::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< lsst::afw::image::TanWcs::Ptr > * >(argp1);
  {
    try {
      delete arg1;
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *resultWcs_V_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_F_WCS_TANSIP_V(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >,std::allocator< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > > *arg1 = 0 ;
  lsst::pex::policy::Policy::Ptr *arg2 = 0 ;
  lsst::afw::cameraGeom::Camera::Ptr *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 ;
  int res2 = 0 ;
  lsst::pex::policy::Policy::Ptr tempshared2 ;
  void *argp3 ;
  int res3 = 0 ;
  lsst::afw::cameraGeom::Camera::Ptr tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< lsst::afw::image::TanWcs::Ptr,std::allocator< lsst::afw::image::TanWcs::Ptr > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:F_WCS_TANSIP_V",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::vector<std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >,std::allocator< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > > *ptr = (std::vector<std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >,std::allocator< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "F_WCS_TANSIP_V" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >,std::allocator< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "F_WCS_TANSIP_V" "', argument " "1"" of type '" "std::vector< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >,std::allocator< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_lsst__pex__policy__Policy_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "F_WCS_TANSIP_V" "', argument " "2"" of type '" "lsst::pex::policy::Policy::Ptr &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< lsst::pex::policy::Policy::Ptr * >(argp2);
      delete reinterpret_cast< lsst::pex::policy::Policy::Ptr * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< lsst::pex::policy::Policy::Ptr * >(argp2) : &tempshared2;
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_lsst__afw__cameraGeom__Camera_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "F_WCS_TANSIP_V" "', argument " "3"" of type '" "lsst::afw::cameraGeom::Camera::Ptr &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< lsst::afw::cameraGeom::Camera::Ptr * >(argp3);
      delete reinterpret_cast< lsst::afw::cameraGeom::Camera::Ptr * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< lsst::afw::cameraGeom::Camera::Ptr * >(argp3) : &tempshared3;
    }
  }
  {
    try {
      result = F_WCS_TANSIP_V((std::vector< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >,std::allocator< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > > const &)*arg1,*arg2,*arg3);
    } catch (lsst::pex::exceptions::Exception &e) {
      raiseLsstException(e);
      SWIG_fail;
    } catch (std::exception & e) {
      PyErr_SetString(PyExc_Exception, e.what());
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::vector<boost::shared_ptr< lsst::afw::image::TanWcs >,std::allocator< boost::shared_ptr< lsst::afw::image::TanWcs > > > >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { (char *)"delete_PySwigIterator", _wrap_delete_PySwigIterator, METH_VARARGS, (char *)"delete_PySwigIterator(PySwigIterator self)"},
	 { (char *)"PySwigIterator_value", _wrap_PySwigIterator_value, METH_VARARGS, (char *)"PySwigIterator_value(PySwigIterator self) -> PyObject"},
	 { (char *)"PySwigIterator_incr", _wrap_PySwigIterator_incr, METH_VARARGS, (char *)"\n"
		"incr(size_t n=1) -> PySwigIterator\n"
		"PySwigIterator_incr(PySwigIterator self) -> PySwigIterator\n"
		""},
	 { (char *)"PySwigIterator_decr", _wrap_PySwigIterator_decr, METH_VARARGS, (char *)"\n"
		"decr(size_t n=1) -> PySwigIterator\n"
		"PySwigIterator_decr(PySwigIterator self) -> PySwigIterator\n"
		""},
	 { (char *)"PySwigIterator_distance", _wrap_PySwigIterator_distance, METH_VARARGS, (char *)"PySwigIterator_distance(PySwigIterator self, PySwigIterator x) -> ptrdiff_t"},
	 { (char *)"PySwigIterator_equal", _wrap_PySwigIterator_equal, METH_VARARGS, (char *)"PySwigIterator_equal(PySwigIterator self, PySwigIterator x) -> bool"},
	 { (char *)"PySwigIterator_copy", _wrap_PySwigIterator_copy, METH_VARARGS, (char *)"PySwigIterator_copy(PySwigIterator self) -> PySwigIterator"},
	 { (char *)"PySwigIterator_next", _wrap_PySwigIterator_next, METH_VARARGS, (char *)"PySwigIterator_next(PySwigIterator self) -> PyObject"},
	 { (char *)"PySwigIterator_previous", _wrap_PySwigIterator_previous, METH_VARARGS, (char *)"PySwigIterator_previous(PySwigIterator self) -> PyObject"},
	 { (char *)"PySwigIterator_advance", _wrap_PySwigIterator_advance, METH_VARARGS, (char *)"PySwigIterator_advance(PySwigIterator self, ptrdiff_t n) -> PySwigIterator"},
	 { (char *)"PySwigIterator___eq__", _wrap_PySwigIterator___eq__, METH_VARARGS, (char *)"PySwigIterator___eq__(PySwigIterator self, PySwigIterator x) -> bool"},
	 { (char *)"PySwigIterator___ne__", _wrap_PySwigIterator___ne__, METH_VARARGS, (char *)"PySwigIterator___ne__(PySwigIterator self, PySwigIterator x) -> bool"},
	 { (char *)"PySwigIterator___iadd__", _wrap_PySwigIterator___iadd__, METH_VARARGS, (char *)"PySwigIterator___iadd__(PySwigIterator self, ptrdiff_t n) -> PySwigIterator"},
	 { (char *)"PySwigIterator___isub__", _wrap_PySwigIterator___isub__, METH_VARARGS, (char *)"PySwigIterator___isub__(PySwigIterator self, ptrdiff_t n) -> PySwigIterator"},
	 { (char *)"PySwigIterator___add__", _wrap_PySwigIterator___add__, METH_VARARGS, (char *)"PySwigIterator___add__(PySwigIterator self, ptrdiff_t n) -> PySwigIterator"},
	 { (char *)"PySwigIterator___sub__", _wrap_PySwigIterator___sub__, METH_VARARGS, (char *)"\n"
		"__sub__(ptrdiff_t n) -> PySwigIterator\n"
		"PySwigIterator___sub__(PySwigIterator self, PySwigIterator x) -> ptrdiff_t\n"
		""},
	 { (char *)"PySwigIterator_swigregister", PySwigIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"ios_base_register_callback", _wrap_ios_base_register_callback, METH_VARARGS, (char *)"ios_base_register_callback(ios_base self, event_callback __fn, int __index)"},
	 { (char *)"ios_base_flags", _wrap_ios_base_flags, METH_VARARGS, (char *)"\n"
		"flags() -> fmtflags\n"
		"ios_base_flags(ios_base self, fmtflags __fmtfl) -> fmtflags\n"
		""},
	 { (char *)"ios_base_setf", _wrap_ios_base_setf, METH_VARARGS, (char *)"\n"
		"setf(fmtflags __fmtfl) -> fmtflags\n"
		"ios_base_setf(ios_base self, fmtflags __fmtfl, fmtflags __mask) -> fmtflags\n"
		""},
	 { (char *)"ios_base_unsetf", _wrap_ios_base_unsetf, METH_VARARGS, (char *)"ios_base_unsetf(ios_base self, fmtflags __mask)"},
	 { (char *)"ios_base_precision", _wrap_ios_base_precision, METH_VARARGS, (char *)"\n"
		"precision() -> streamsize\n"
		"ios_base_precision(ios_base self, streamsize __prec) -> streamsize\n"
		""},
	 { (char *)"ios_base_width", _wrap_ios_base_width, METH_VARARGS, (char *)"\n"
		"width() -> streamsize\n"
		"ios_base_width(ios_base self, streamsize __wide) -> streamsize\n"
		""},
	 { (char *)"ios_base_sync_with_stdio", _wrap_ios_base_sync_with_stdio, METH_VARARGS, (char *)"\n"
		"sync_with_stdio(bool __sync=True) -> bool\n"
		"ios_base_sync_with_stdio() -> bool\n"
		""},
	 { (char *)"ios_base_imbue", _wrap_ios_base_imbue, METH_VARARGS, (char *)"ios_base_imbue(ios_base self, locale __loc) -> locale"},
	 { (char *)"ios_base_getloc", _wrap_ios_base_getloc, METH_VARARGS, (char *)"ios_base_getloc(ios_base self) -> locale"},
	 { (char *)"ios_base_xalloc", _wrap_ios_base_xalloc, METH_VARARGS, (char *)"ios_base_xalloc() -> int"},
	 { (char *)"ios_base_iword", _wrap_ios_base_iword, METH_VARARGS, (char *)"ios_base_iword(ios_base self, int __ix) -> long"},
	 { (char *)"ios_base_pword", _wrap_ios_base_pword, METH_VARARGS, (char *)"ios_base_pword(ios_base self, int __ix) -> void"},
	 { (char *)"delete_ios_base", _wrap_delete_ios_base, METH_VARARGS, (char *)"delete_ios_base(ios_base self)"},
	 { (char *)"ios_base_swigregister", ios_base_swigregister, METH_VARARGS, NULL},
	 { (char *)"ios_rdstate", _wrap_ios_rdstate, METH_VARARGS, (char *)"ios_rdstate(ios self) -> iostate"},
	 { (char *)"ios_clear", _wrap_ios_clear, METH_VARARGS, (char *)"\n"
		"clear(iostate __state=goodbit)\n"
		"ios_clear(ios self)\n"
		""},
	 { (char *)"ios_setstate", _wrap_ios_setstate, METH_VARARGS, (char *)"ios_setstate(ios self, iostate __state)"},
	 { (char *)"ios_good", _wrap_ios_good, METH_VARARGS, (char *)"ios_good(ios self) -> bool"},
	 { (char *)"ios_eof", _wrap_ios_eof, METH_VARARGS, (char *)"ios_eof(ios self) -> bool"},
	 { (char *)"ios_fail", _wrap_ios_fail, METH_VARARGS, (char *)"ios_fail(ios self) -> bool"},
	 { (char *)"ios_bad", _wrap_ios_bad, METH_VARARGS, (char *)"ios_bad(ios self) -> bool"},
	 { (char *)"ios_exceptions", _wrap_ios_exceptions, METH_VARARGS, (char *)"\n"
		"exceptions() -> iostate\n"
		"ios_exceptions(ios self, iostate __except)\n"
		""},
	 { (char *)"new_ios", _wrap_new_ios, METH_VARARGS, (char *)"new_ios(std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ios"},
	 { (char *)"delete_ios", _wrap_delete_ios, METH_VARARGS, (char *)"delete_ios(ios self)"},
	 { (char *)"ios_tie", _wrap_ios_tie, METH_VARARGS, (char *)"\n"
		"tie() -> ostream\n"
		"ios_tie(ios self, ostream __tiestr) -> ostream\n"
		""},
	 { (char *)"ios_rdbuf", _wrap_ios_rdbuf, METH_VARARGS, (char *)"\n"
		"rdbuf() -> std::basic_streambuf<(char,std::char_traits<(char)>)>\n"
		"ios_rdbuf(ios self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> std::basic_streambuf<(char,std::char_traits<(char)>)>\n"
		""},
	 { (char *)"ios_copyfmt", _wrap_ios_copyfmt, METH_VARARGS, (char *)"ios_copyfmt(ios self, ios __rhs) -> ios"},
	 { (char *)"ios_fill", _wrap_ios_fill, METH_VARARGS, (char *)"\n"
		"fill() -> char_type\n"
		"ios_fill(ios self, char_type __ch) -> char_type\n"
		""},
	 { (char *)"ios_imbue", _wrap_ios_imbue, METH_VARARGS, (char *)"ios_imbue(ios self, locale __loc) -> locale"},
	 { (char *)"ios_narrow", _wrap_ios_narrow, METH_VARARGS, (char *)"ios_narrow(ios self, char_type __c, char __dfault) -> char"},
	 { (char *)"ios_widen", _wrap_ios_widen, METH_VARARGS, (char *)"ios_widen(ios self, char __c) -> char_type"},
	 { (char *)"ios_swigregister", ios_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ostream", _wrap_new_ostream, METH_VARARGS, (char *)"new_ostream(std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ostream"},
	 { (char *)"delete_ostream", _wrap_delete_ostream, METH_VARARGS, (char *)"delete_ostream(ostream self)"},
	 { (char *)"ostream___lshift__", _wrap_ostream___lshift__, METH_VARARGS, (char *)"\n"
		"__lshift__(ostream __pf) -> ostream\n"
		"__lshift__(ios __pf) -> ostream\n"
		"__lshift__(ios_base __pf) -> ostream\n"
		"__lshift__(long __n) -> ostream\n"
		"__lshift__(unsigned long __n) -> ostream\n"
		"__lshift__(bool __n) -> ostream\n"
		"__lshift__(short __n) -> ostream\n"
		"__lshift__(unsigned short __n) -> ostream\n"
		"__lshift__(int __n) -> ostream\n"
		"__lshift__(unsigned int __n) -> ostream\n"
		"__lshift__(long long __n) -> ostream\n"
		"__lshift__(unsigned long long __n) -> ostream\n"
		"__lshift__(double __f) -> ostream\n"
		"__lshift__(float __f) -> ostream\n"
		"__lshift__(long double __f) -> ostream\n"
		"__lshift__(void __p) -> ostream\n"
		"__lshift__(std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ostream\n"
		"ostream___lshift__(ostream self, std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)> s) -> ostream\n"
		""},
	 { (char *)"ostream_put", _wrap_ostream_put, METH_VARARGS, (char *)"ostream_put(ostream self, char_type __c) -> ostream"},
	 { (char *)"ostream_write", _wrap_ostream_write, METH_VARARGS, (char *)"ostream_write(ostream self, char_type __s, streamsize __n) -> ostream"},
	 { (char *)"ostream_flush", _wrap_ostream_flush, METH_VARARGS, (char *)"ostream_flush(ostream self) -> ostream"},
	 { (char *)"ostream_tellp", _wrap_ostream_tellp, METH_VARARGS, (char *)"ostream_tellp(ostream self) -> pos_type"},
	 { (char *)"ostream_seekp", _wrap_ostream_seekp, METH_VARARGS, (char *)"\n"
		"seekp(pos_type ?) -> ostream\n"
		"ostream_seekp(ostream self, off_type ?, seekdir ?) -> ostream\n"
		""},
	 { (char *)"ostream_swigregister", ostream_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_istream", _wrap_new_istream, METH_VARARGS, (char *)"new_istream(std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream"},
	 { (char *)"delete_istream", _wrap_delete_istream, METH_VARARGS, (char *)"delete_istream(istream self)"},
	 { (char *)"istream___rshift__", _wrap_istream___rshift__, METH_VARARGS, (char *)"\n"
		"__rshift__(istream __pf) -> istream\n"
		"__rshift__(ios __pf) -> istream\n"
		"__rshift__(ios_base __pf) -> istream\n"
		"__rshift__(bool __n) -> istream\n"
		"__rshift__(short __n) -> istream\n"
		"__rshift__(unsigned short __n) -> istream\n"
		"__rshift__(int __n) -> istream\n"
		"__rshift__(unsigned int __n) -> istream\n"
		"__rshift__(long __n) -> istream\n"
		"__rshift__(unsigned long __n) -> istream\n"
		"__rshift__(long long __n) -> istream\n"
		"__rshift__(unsigned long long __n) -> istream\n"
		"__rshift__(float __f) -> istream\n"
		"__rshift__(double __f) -> istream\n"
		"__rshift__(long double __f) -> istream\n"
		"__rshift__(void __p) -> istream\n"
		"istream___rshift__(istream self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream\n"
		""},
	 { (char *)"istream_gcount", _wrap_istream_gcount, METH_VARARGS, (char *)"istream_gcount(istream self) -> streamsize"},
	 { (char *)"istream_get", _wrap_istream_get, METH_VARARGS, (char *)"\n"
		"get() -> int_type\n"
		"get(char_type __c) -> istream\n"
		"get(char_type __s, streamsize __n, char_type __delim) -> istream\n"
		"get(char_type __s, streamsize __n) -> istream\n"
		"get(std::basic_streambuf<(char,std::char_traits<(char)>)> __sb, \n"
		"    char_type __delim) -> istream\n"
		"istream_get(istream self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream\n"
		""},
	 { (char *)"istream_getline", _wrap_istream_getline, METH_VARARGS, (char *)"\n"
		"getline(char_type __s, streamsize __n, char_type __delim) -> istream\n"
		"istream_getline(istream self, char_type __s, streamsize __n) -> istream\n"
		""},
	 { (char *)"istream_ignore", _wrap_istream_ignore, METH_VARARGS, (char *)"\n"
		"ignore(streamsize __n=1, int_type __delim=std::char_traits< char >::eof()) -> istream\n"
		"ignore(streamsize __n=1) -> istream\n"
		"istream_ignore(istream self) -> istream\n"
		""},
	 { (char *)"istream_peek", _wrap_istream_peek, METH_VARARGS, (char *)"istream_peek(istream self) -> int_type"},
	 { (char *)"istream_read", _wrap_istream_read, METH_VARARGS, (char *)"istream_read(istream self, char_type __s, streamsize __n) -> istream"},
	 { (char *)"istream_readsome", _wrap_istream_readsome, METH_VARARGS, (char *)"istream_readsome(istream self, char_type __s, streamsize __n) -> streamsize"},
	 { (char *)"istream_putback", _wrap_istream_putback, METH_VARARGS, (char *)"istream_putback(istream self, char_type __c) -> istream"},
	 { (char *)"istream_unget", _wrap_istream_unget, METH_VARARGS, (char *)"istream_unget(istream self) -> istream"},
	 { (char *)"istream_sync", _wrap_istream_sync, METH_VARARGS, (char *)"istream_sync(istream self) -> int"},
	 { (char *)"istream_tellg", _wrap_istream_tellg, METH_VARARGS, (char *)"istream_tellg(istream self) -> pos_type"},
	 { (char *)"istream_seekg", _wrap_istream_seekg, METH_VARARGS, (char *)"\n"
		"seekg(pos_type ?) -> istream\n"
		"istream_seekg(istream self, off_type ?, seekdir ?) -> istream\n"
		""},
	 { (char *)"istream_swigregister", istream_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_iostream", _wrap_new_iostream, METH_VARARGS, (char *)"new_iostream(std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> iostream"},
	 { (char *)"delete_iostream", _wrap_delete_iostream, METH_VARARGS, (char *)"delete_iostream(iostream self)"},
	 { (char *)"iostream_swigregister", iostream_swigregister, METH_VARARGS, NULL},
	 { (char *)"endl", _wrap_endl, METH_VARARGS, (char *)"endl(ostream ?) -> ostream\nswig_ptr: endl_cb_ptr"},
	 { (char *)"ends", _wrap_ends, METH_VARARGS, (char *)"ends(ostream ?) -> ostream\nswig_ptr: ends_cb_ptr"},
	 { (char *)"flush", _wrap_flush, METH_VARARGS, (char *)"flush(ostream ?) -> ostream\nswig_ptr: flush_cb_ptr"},
	 { (char *)"SourceGroup_iterator", _wrap_SourceGroup_iterator, METH_VARARGS, (char *)"SourceGroup_iterator(SourceGroup self, PyObject PYTHON_SELF) -> PySwigIterator"},
	 { (char *)"SourceGroup___nonzero__", _wrap_SourceGroup___nonzero__, METH_VARARGS, (char *)"SourceGroup___nonzero__(SourceGroup self) -> bool"},
	 { (char *)"SourceGroup___len__", _wrap_SourceGroup___len__, METH_VARARGS, (char *)"SourceGroup___len__(SourceGroup self) -> std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::size_type"},
	 { (char *)"SourceGroup_pop", _wrap_SourceGroup_pop, METH_VARARGS, (char *)"SourceGroup_pop(SourceGroup self) -> std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::value_type"},
	 { (char *)"SourceGroup___getslice__", _wrap_SourceGroup___getslice__, METH_VARARGS, (char *)"\n"
		"SourceGroup___getslice__(SourceGroup self, std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::difference_type i, \n"
		"    std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::difference_type j) -> SourceGroup\n"
		""},
	 { (char *)"SourceGroup___setslice__", _wrap_SourceGroup___setslice__, METH_VARARGS, (char *)"\n"
		"SourceGroup___setslice__(SourceGroup self, std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::difference_type i, \n"
		"    std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::difference_type j, \n"
		"    SourceGroup v)\n"
		""},
	 { (char *)"SourceGroup___delslice__", _wrap_SourceGroup___delslice__, METH_VARARGS, (char *)"\n"
		"SourceGroup___delslice__(SourceGroup self, std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::difference_type i, \n"
		"    std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::difference_type j)\n"
		""},
	 { (char *)"SourceGroup___delitem__", _wrap_SourceGroup___delitem__, METH_VARARGS, (char *)"SourceGroup___delitem__(SourceGroup self, std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::difference_type i)"},
	 { (char *)"SourceGroup___getitem__", _wrap_SourceGroup___getitem__, METH_VARARGS, (char *)"SourceGroup___getitem__(SourceGroup self, std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::difference_type i) -> std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::value_type"},
	 { (char *)"SourceGroup___setitem__", _wrap_SourceGroup___setitem__, METH_VARARGS, (char *)"\n"
		"SourceGroup___setitem__(SourceGroup self, std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::difference_type i, \n"
		"    std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::value_type x)\n"
		""},
	 { (char *)"SourceGroup_append", _wrap_SourceGroup_append, METH_VARARGS, (char *)"SourceGroup_append(SourceGroup self, std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::value_type x)"},
	 { (char *)"SourceGroup_empty", _wrap_SourceGroup_empty, METH_VARARGS, (char *)"SourceGroup_empty(SourceGroup self) -> bool"},
	 { (char *)"SourceGroup_size", _wrap_SourceGroup_size, METH_VARARGS, (char *)"SourceGroup_size(SourceGroup self) -> std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::size_type"},
	 { (char *)"SourceGroup_clear", _wrap_SourceGroup_clear, METH_VARARGS, (char *)"SourceGroup_clear(SourceGroup self)"},
	 { (char *)"SourceGroup_swap", _wrap_SourceGroup_swap, METH_VARARGS, (char *)"SourceGroup_swap(SourceGroup self, SourceGroup v)"},
	 { (char *)"SourceGroup_get_allocator", _wrap_SourceGroup_get_allocator, METH_VARARGS, (char *)"SourceGroup_get_allocator(SourceGroup self) -> std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::allocator_type"},
	 { (char *)"SourceGroup_begin", _wrap_SourceGroup_begin, METH_VARARGS, (char *)"SourceGroup_begin(SourceGroup self) -> std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::const_iterator"},
	 { (char *)"SourceGroup_end", _wrap_SourceGroup_end, METH_VARARGS, (char *)"SourceGroup_end(SourceGroup self) -> std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::const_iterator"},
	 { (char *)"SourceGroup_rbegin", _wrap_SourceGroup_rbegin, METH_VARARGS, (char *)"SourceGroup_rbegin(SourceGroup self) -> std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::const_reverse_iterator"},
	 { (char *)"SourceGroup_rend", _wrap_SourceGroup_rend, METH_VARARGS, (char *)"SourceGroup_rend(SourceGroup self) -> std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::const_reverse_iterator"},
	 { (char *)"SourceGroup_pop_back", _wrap_SourceGroup_pop_back, METH_VARARGS, (char *)"SourceGroup_pop_back(SourceGroup self)"},
	 { (char *)"SourceGroup_erase", _wrap_SourceGroup_erase, METH_VARARGS, (char *)"\n"
		"erase(std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::iterator pos) -> std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::iterator\n"
		"SourceGroup_erase(SourceGroup self, std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::iterator first, \n"
		"    std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::iterator last) -> std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::iterator\n"
		""},
	 { (char *)"new_SourceGroup", _wrap_new_SourceGroup, METH_VARARGS, (char *)"\n"
		"SourceGroup()\n"
		"SourceGroup(SourceGroup ?)\n"
		"SourceGroup(std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::size_type size)\n"
		"new_SourceGroup(std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::size_type size, \n"
		"    std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::value_type value) -> SourceGroup\n"
		""},
	 { (char *)"SourceGroup_push_back", _wrap_SourceGroup_push_back, METH_VARARGS, (char *)"SourceGroup_push_back(SourceGroup self, std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::value_type x)"},
	 { (char *)"SourceGroup_front", _wrap_SourceGroup_front, METH_VARARGS, (char *)"SourceGroup_front(SourceGroup self) -> std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::value_type"},
	 { (char *)"SourceGroup_back", _wrap_SourceGroup_back, METH_VARARGS, (char *)"SourceGroup_back(SourceGroup self) -> std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::value_type"},
	 { (char *)"SourceGroup_assign", _wrap_SourceGroup_assign, METH_VARARGS, (char *)"\n"
		"SourceGroup_assign(SourceGroup self, std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::size_type n, \n"
		"    std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::value_type x)\n"
		""},
	 { (char *)"SourceGroup_resize", _wrap_SourceGroup_resize, METH_VARARGS, (char *)"\n"
		"resize(std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::size_type new_size)\n"
		"SourceGroup_resize(SourceGroup self, std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::size_type new_size, \n"
		"    std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::value_type x)\n"
		""},
	 { (char *)"SourceGroup_insert", _wrap_SourceGroup_insert, METH_VARARGS, (char *)"\n"
		"insert(std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::iterator pos, \n"
		"    std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::value_type x) -> std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::iterator\n"
		"SourceGroup_insert(SourceGroup self, std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::iterator pos, \n"
		"    std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::size_type n, \n"
		"    std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::value_type x)\n"
		""},
	 { (char *)"SourceGroup_reserve", _wrap_SourceGroup_reserve, METH_VARARGS, (char *)"SourceGroup_reserve(SourceGroup self, std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::size_type n)"},
	 { (char *)"SourceGroup_capacity", _wrap_SourceGroup_capacity, METH_VARARGS, (char *)"SourceGroup_capacity(SourceGroup self) -> std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::size_type"},
	 { (char *)"delete_SourceGroup", _wrap_delete_SourceGroup, METH_VARARGS, (char *)"delete_SourceGroup(SourceGroup self)"},
	 { (char *)"SourceGroup_swigregister", SourceGroup_swigregister, METH_VARARGS, NULL},
	 { (char *)"vvSourceMatch_iterator", _wrap_vvSourceMatch_iterator, METH_VARARGS, (char *)"vvSourceMatch_iterator(vvSourceMatch self, PyObject PYTHON_SELF) -> PySwigIterator"},
	 { (char *)"vvSourceMatch___nonzero__", _wrap_vvSourceMatch___nonzero__, METH_VARARGS, (char *)"vvSourceMatch___nonzero__(vvSourceMatch self) -> bool"},
	 { (char *)"vvSourceMatch___len__", _wrap_vvSourceMatch___len__, METH_VARARGS, (char *)"vvSourceMatch___len__(vvSourceMatch self) -> size_type"},
	 { (char *)"vvSourceMatch_pop", _wrap_vvSourceMatch_pop, METH_VARARGS, (char *)"vvSourceMatch_pop(vvSourceMatch self) -> value_type"},
	 { (char *)"vvSourceMatch___getslice__", _wrap_vvSourceMatch___getslice__, METH_VARARGS, (char *)"vvSourceMatch___getslice__(vvSourceMatch self, difference_type i, difference_type j) -> vvSourceMatch"},
	 { (char *)"vvSourceMatch___setslice__", _wrap_vvSourceMatch___setslice__, METH_VARARGS, (char *)"\n"
		"vvSourceMatch___setslice__(vvSourceMatch self, difference_type i, difference_type j, \n"
		"    vvSourceMatch v)\n"
		""},
	 { (char *)"vvSourceMatch___delslice__", _wrap_vvSourceMatch___delslice__, METH_VARARGS, (char *)"vvSourceMatch___delslice__(vvSourceMatch self, difference_type i, difference_type j)"},
	 { (char *)"vvSourceMatch___delitem__", _wrap_vvSourceMatch___delitem__, METH_VARARGS, (char *)"vvSourceMatch___delitem__(vvSourceMatch self, difference_type i)"},
	 { (char *)"vvSourceMatch___getitem__", _wrap_vvSourceMatch___getitem__, METH_VARARGS, (char *)"vvSourceMatch___getitem__(vvSourceMatch self, difference_type i) -> value_type"},
	 { (char *)"vvSourceMatch___setitem__", _wrap_vvSourceMatch___setitem__, METH_VARARGS, (char *)"vvSourceMatch___setitem__(vvSourceMatch self, difference_type i, value_type x)"},
	 { (char *)"vvSourceMatch_append", _wrap_vvSourceMatch_append, METH_VARARGS, (char *)"vvSourceMatch_append(vvSourceMatch self, value_type x)"},
	 { (char *)"vvSourceMatch_empty", _wrap_vvSourceMatch_empty, METH_VARARGS, (char *)"vvSourceMatch_empty(vvSourceMatch self) -> bool"},
	 { (char *)"vvSourceMatch_size", _wrap_vvSourceMatch_size, METH_VARARGS, (char *)"vvSourceMatch_size(vvSourceMatch self) -> size_type"},
	 { (char *)"vvSourceMatch_clear", _wrap_vvSourceMatch_clear, METH_VARARGS, (char *)"vvSourceMatch_clear(vvSourceMatch self)"},
	 { (char *)"vvSourceMatch_swap", _wrap_vvSourceMatch_swap, METH_VARARGS, (char *)"vvSourceMatch_swap(vvSourceMatch self, vvSourceMatch v)"},
	 { (char *)"vvSourceMatch_get_allocator", _wrap_vvSourceMatch_get_allocator, METH_VARARGS, (char *)"vvSourceMatch_get_allocator(vvSourceMatch self) -> allocator_type"},
	 { (char *)"vvSourceMatch_begin", _wrap_vvSourceMatch_begin, METH_VARARGS, (char *)"vvSourceMatch_begin(vvSourceMatch self) -> const_iterator"},
	 { (char *)"vvSourceMatch_end", _wrap_vvSourceMatch_end, METH_VARARGS, (char *)"vvSourceMatch_end(vvSourceMatch self) -> const_iterator"},
	 { (char *)"vvSourceMatch_rbegin", _wrap_vvSourceMatch_rbegin, METH_VARARGS, (char *)"vvSourceMatch_rbegin(vvSourceMatch self) -> const_reverse_iterator"},
	 { (char *)"vvSourceMatch_rend", _wrap_vvSourceMatch_rend, METH_VARARGS, (char *)"vvSourceMatch_rend(vvSourceMatch self) -> const_reverse_iterator"},
	 { (char *)"vvSourceMatch_pop_back", _wrap_vvSourceMatch_pop_back, METH_VARARGS, (char *)"vvSourceMatch_pop_back(vvSourceMatch self)"},
	 { (char *)"vvSourceMatch_erase", _wrap_vvSourceMatch_erase, METH_VARARGS, (char *)"\n"
		"erase(iterator pos) -> iterator\n"
		"vvSourceMatch_erase(vvSourceMatch self, iterator first, iterator last) -> iterator\n"
		""},
	 { (char *)"new_vvSourceMatch", _wrap_new_vvSourceMatch, METH_VARARGS, (char *)"\n"
		"vvSourceMatch()\n"
		"vvSourceMatch(vvSourceMatch ?)\n"
		"vvSourceMatch(size_type size)\n"
		"new_vvSourceMatch(size_type size, value_type value) -> vvSourceMatch\n"
		""},
	 { (char *)"vvSourceMatch_push_back", _wrap_vvSourceMatch_push_back, METH_VARARGS, (char *)"vvSourceMatch_push_back(vvSourceMatch self, value_type x)"},
	 { (char *)"vvSourceMatch_front", _wrap_vvSourceMatch_front, METH_VARARGS, (char *)"vvSourceMatch_front(vvSourceMatch self) -> value_type"},
	 { (char *)"vvSourceMatch_back", _wrap_vvSourceMatch_back, METH_VARARGS, (char *)"vvSourceMatch_back(vvSourceMatch self) -> value_type"},
	 { (char *)"vvSourceMatch_assign", _wrap_vvSourceMatch_assign, METH_VARARGS, (char *)"vvSourceMatch_assign(vvSourceMatch self, size_type n, value_type x)"},
	 { (char *)"vvSourceMatch_resize", _wrap_vvSourceMatch_resize, METH_VARARGS, (char *)"\n"
		"resize(size_type new_size)\n"
		"vvSourceMatch_resize(vvSourceMatch self, size_type new_size, value_type x)\n"
		""},
	 { (char *)"vvSourceMatch_insert", _wrap_vvSourceMatch_insert, METH_VARARGS, (char *)"\n"
		"insert(iterator pos, value_type x) -> iterator\n"
		"vvSourceMatch_insert(vvSourceMatch self, iterator pos, size_type n, value_type x)\n"
		""},
	 { (char *)"vvSourceMatch_reserve", _wrap_vvSourceMatch_reserve, METH_VARARGS, (char *)"vvSourceMatch_reserve(vvSourceMatch self, size_type n)"},
	 { (char *)"vvSourceMatch_capacity", _wrap_vvSourceMatch_capacity, METH_VARARGS, (char *)"vvSourceMatch_capacity(vvSourceMatch self) -> size_type"},
	 { (char *)"delete_vvSourceMatch", _wrap_delete_vvSourceMatch, METH_VARARGS, (char *)"delete_vvSourceMatch(vvSourceMatch self)"},
	 { (char *)"vvSourceMatch_swigregister", vvSourceMatch_swigregister, METH_VARARGS, NULL},
	 { (char *)"resultWcs_V_iterator", _wrap_resultWcs_V_iterator, METH_VARARGS, (char *)"resultWcs_V_iterator(resultWcs_V self, PyObject PYTHON_SELF) -> PySwigIterator"},
	 { (char *)"resultWcs_V___nonzero__", _wrap_resultWcs_V___nonzero__, METH_VARARGS, (char *)"resultWcs_V___nonzero__(resultWcs_V self) -> bool"},
	 { (char *)"resultWcs_V___len__", _wrap_resultWcs_V___len__, METH_VARARGS, (char *)"resultWcs_V___len__(resultWcs_V self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::size_type"},
	 { (char *)"resultWcs_V_pop", _wrap_resultWcs_V_pop, METH_VARARGS, (char *)"resultWcs_V_pop(resultWcs_V self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type"},
	 { (char *)"resultWcs_V___getslice__", _wrap_resultWcs_V___getslice__, METH_VARARGS, (char *)"\n"
		"resultWcs_V___getslice__(resultWcs_V self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::difference_type i, \n"
		"    std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::difference_type j) -> resultWcs_V\n"
		""},
	 { (char *)"resultWcs_V___setslice__", _wrap_resultWcs_V___setslice__, METH_VARARGS, (char *)"\n"
		"resultWcs_V___setslice__(resultWcs_V self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::difference_type i, \n"
		"    std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::difference_type j, \n"
		"    resultWcs_V v)\n"
		""},
	 { (char *)"resultWcs_V___delslice__", _wrap_resultWcs_V___delslice__, METH_VARARGS, (char *)"\n"
		"resultWcs_V___delslice__(resultWcs_V self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::difference_type i, \n"
		"    std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::difference_type j)\n"
		""},
	 { (char *)"resultWcs_V___delitem__", _wrap_resultWcs_V___delitem__, METH_VARARGS, (char *)"resultWcs_V___delitem__(resultWcs_V self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::difference_type i)"},
	 { (char *)"resultWcs_V___getitem__", _wrap_resultWcs_V___getitem__, METH_VARARGS, (char *)"resultWcs_V___getitem__(resultWcs_V self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::difference_type i) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type"},
	 { (char *)"resultWcs_V___setitem__", _wrap_resultWcs_V___setitem__, METH_VARARGS, (char *)"\n"
		"resultWcs_V___setitem__(resultWcs_V self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::difference_type i, \n"
		"    std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type x)\n"
		""},
	 { (char *)"resultWcs_V_append", _wrap_resultWcs_V_append, METH_VARARGS, (char *)"resultWcs_V_append(resultWcs_V self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type x)"},
	 { (char *)"resultWcs_V_empty", _wrap_resultWcs_V_empty, METH_VARARGS, (char *)"resultWcs_V_empty(resultWcs_V self) -> bool"},
	 { (char *)"resultWcs_V_size", _wrap_resultWcs_V_size, METH_VARARGS, (char *)"resultWcs_V_size(resultWcs_V self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::size_type"},
	 { (char *)"resultWcs_V_clear", _wrap_resultWcs_V_clear, METH_VARARGS, (char *)"resultWcs_V_clear(resultWcs_V self)"},
	 { (char *)"resultWcs_V_swap", _wrap_resultWcs_V_swap, METH_VARARGS, (char *)"resultWcs_V_swap(resultWcs_V self, resultWcs_V v)"},
	 { (char *)"resultWcs_V_get_allocator", _wrap_resultWcs_V_get_allocator, METH_VARARGS, (char *)"resultWcs_V_get_allocator(resultWcs_V self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::allocator_type"},
	 { (char *)"resultWcs_V_begin", _wrap_resultWcs_V_begin, METH_VARARGS, (char *)"resultWcs_V_begin(resultWcs_V self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::const_iterator"},
	 { (char *)"resultWcs_V_end", _wrap_resultWcs_V_end, METH_VARARGS, (char *)"resultWcs_V_end(resultWcs_V self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::const_iterator"},
	 { (char *)"resultWcs_V_rbegin", _wrap_resultWcs_V_rbegin, METH_VARARGS, (char *)"resultWcs_V_rbegin(resultWcs_V self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::const_reverse_iterator"},
	 { (char *)"resultWcs_V_rend", _wrap_resultWcs_V_rend, METH_VARARGS, (char *)"resultWcs_V_rend(resultWcs_V self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::const_reverse_iterator"},
	 { (char *)"resultWcs_V_pop_back", _wrap_resultWcs_V_pop_back, METH_VARARGS, (char *)"resultWcs_V_pop_back(resultWcs_V self)"},
	 { (char *)"resultWcs_V_erase", _wrap_resultWcs_V_erase, METH_VARARGS, (char *)"\n"
		"erase(std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::iterator pos) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::iterator\n"
		"resultWcs_V_erase(resultWcs_V self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::iterator first, \n"
		"    std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::iterator last) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::iterator\n"
		""},
	 { (char *)"new_resultWcs_V", _wrap_new_resultWcs_V, METH_VARARGS, (char *)"\n"
		"resultWcs_V()\n"
		"resultWcs_V(resultWcs_V ?)\n"
		"resultWcs_V(std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::size_type size)\n"
		"new_resultWcs_V(std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::size_type size, \n"
		"    std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type value) -> resultWcs_V\n"
		""},
	 { (char *)"resultWcs_V_push_back", _wrap_resultWcs_V_push_back, METH_VARARGS, (char *)"resultWcs_V_push_back(resultWcs_V self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type x)"},
	 { (char *)"resultWcs_V_front", _wrap_resultWcs_V_front, METH_VARARGS, (char *)"resultWcs_V_front(resultWcs_V self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type"},
	 { (char *)"resultWcs_V_back", _wrap_resultWcs_V_back, METH_VARARGS, (char *)"resultWcs_V_back(resultWcs_V self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type"},
	 { (char *)"resultWcs_V_assign", _wrap_resultWcs_V_assign, METH_VARARGS, (char *)"\n"
		"resultWcs_V_assign(resultWcs_V self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::size_type n, \n"
		"    std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type x)\n"
		""},
	 { (char *)"resultWcs_V_resize", _wrap_resultWcs_V_resize, METH_VARARGS, (char *)"\n"
		"resize(std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::size_type new_size)\n"
		"resultWcs_V_resize(resultWcs_V self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::size_type new_size, \n"
		"    std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type x)\n"
		""},
	 { (char *)"resultWcs_V_insert", _wrap_resultWcs_V_insert, METH_VARARGS, (char *)"\n"
		"insert(std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::iterator pos, \n"
		"    std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type x) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::iterator\n"
		"resultWcs_V_insert(resultWcs_V self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::iterator pos, \n"
		"    std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::size_type n, \n"
		"    std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type x)\n"
		""},
	 { (char *)"resultWcs_V_reserve", _wrap_resultWcs_V_reserve, METH_VARARGS, (char *)"resultWcs_V_reserve(resultWcs_V self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::size_type n)"},
	 { (char *)"resultWcs_V_capacity", _wrap_resultWcs_V_capacity, METH_VARARGS, (char *)"resultWcs_V_capacity(resultWcs_V self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::size_type"},
	 { (char *)"delete_resultWcs_V", _wrap_delete_resultWcs_V, METH_VARARGS, (char *)"delete_resultWcs_V(resultWcs_V self)"},
	 { (char *)"resultWcs_V_swigregister", resultWcs_V_swigregister, METH_VARARGS, NULL},
	 { (char *)"F_WCS_TANSIP_V", _wrap_F_WCS_TANSIP_V, METH_VARARGS, (char *)"F_WCS_TANSIP_V(vvSourceMatch ?, Ptr ?, Ptr ?) -> resultWcs_V"},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_lsst__afw__geom__ellipses__AxesEllipseTo_p_lsst__afw__geom__ellipses__BaseEllipse(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::geom::ellipses::BaseEllipse *)  ((lsst::afw::geom::ellipses::AxesEllipse *) x));
}
static void *_p_lsst__afw__geom__ellipses__DistortionEllipseTo_p_lsst__afw__geom__ellipses__BaseEllipse(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::geom::ellipses::BaseEllipse *)  ((lsst::afw::geom::ellipses::DistortionEllipse *) x));
}
static void *_p_lsst__afw__geom__ellipses__QuadrupoleEllipseTo_p_lsst__afw__geom__ellipses__BaseEllipse(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::geom::ellipses::BaseEllipse *)  ((lsst::afw::geom::ellipses::QuadrupoleEllipse *) x));
}
static void *_p_lsst__afw__geom__ellipses__LogShearEllipseTo_p_lsst__afw__geom__ellipses__BaseEllipse(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::geom::ellipses::BaseEllipse *)  ((lsst::afw::geom::ellipses::LogShearEllipse *) x));
}
static void *_p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *) (std::basic_ios< char > *) ((std::basic_ostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *) (std::basic_ios< char > *) ((std::basic_istream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *) (std::basic_ios< char > *)(std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iosT_char_std__char_traitsT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *)  ((std::basic_ios< char,std::char_traits< char > > *) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios< char > *) ((std::basic_ostream< char,std::char_traits< char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios< char > *) ((std::basic_istream< char,std::char_traits< char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios< char > *)(std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &))  ((std::basic_ios< char,std::char_traits< char > > &(*)(std::ios_base &)) x));
}
static void *_p_lsst__pex__policy__DictionaryErrorTo_p_lsst__pex__exceptions__DomainErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::DomainErrorException *)  ((lsst::pex::policy::DictionaryError *) x));
}
static void *_p_lsst__pex__policy__TypeErrorTo_p_lsst__pex__exceptions__DomainErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::DomainErrorException *)  ((lsst::pex::policy::TypeError *) x));
}
static void *_p_lsst__pex__policy__ValidationErrorTo_p_lsst__pex__exceptions__LogicErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::LogicErrorException *)  ((lsst::pex::policy::ValidationError *) x));
}
static void *_p_lsst__pex__exceptions__DomainErrorExceptionTo_p_lsst__pex__exceptions__LogicErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::LogicErrorException *)  ((lsst::pex::exceptions::DomainErrorException *) x));
}
static void *_p_lsst__pex__exceptions__InvalidParameterExceptionTo_p_lsst__pex__exceptions__LogicErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::LogicErrorException *)  ((lsst::pex::exceptions::InvalidParameterException *) x));
}
static void *_p_lsst__pex__exceptions__LengthErrorExceptionTo_p_lsst__pex__exceptions__LogicErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::LogicErrorException *)  ((lsst::pex::exceptions::LengthErrorException *) x));
}
static void *_p_lsst__pex__exceptions__OutOfRangeExceptionTo_p_lsst__pex__exceptions__LogicErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::LogicErrorException *)  ((lsst::pex::exceptions::OutOfRangeException *) x));
}
static void *_p_lsst__daf__base__TypeMismatchExceptionTo_p_lsst__pex__exceptions__LogicErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::LogicErrorException *)  ((lsst::daf::base::TypeMismatchException *) x));
}
static void *_p_lsst__pex__policy__DictionaryErrorTo_p_lsst__pex__exceptions__LogicErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::LogicErrorException *) (lsst::pex::exceptions::DomainErrorException *) ((lsst::pex::policy::DictionaryError *) x));
}
static void *_p_lsst__pex__policy__TypeErrorTo_p_lsst__pex__exceptions__LogicErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::LogicErrorException *) (lsst::pex::exceptions::DomainErrorException *) ((lsst::pex::policy::TypeError *) x));
}
static void *_p_lsst__pex__policy__UnsupportedSyntaxTo_p_lsst__pex__exceptions__RuntimeErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::RuntimeErrorException *) (lsst::pex::policy::ParserError *)(lsst::pex::policy::SyntaxError *) ((lsst::pex::policy::UnsupportedSyntax *) x));
}
static void *_p_lsst__pex__exceptions__RangeErrorExceptionTo_p_lsst__pex__exceptions__RuntimeErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::RuntimeErrorException *)  ((lsst::pex::exceptions::RangeErrorException *) x));
}
static void *_p_lsst__pex__exceptions__OverflowErrorExceptionTo_p_lsst__pex__exceptions__RuntimeErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::RuntimeErrorException *)  ((lsst::pex::exceptions::OverflowErrorException *) x));
}
static void *_p_lsst__pex__exceptions__UnderflowErrorExceptionTo_p_lsst__pex__exceptions__RuntimeErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::RuntimeErrorException *)  ((lsst::pex::exceptions::UnderflowErrorException *) x));
}
static void *_p_lsst__pex__exceptions__MemoryExceptionTo_p_lsst__pex__exceptions__RuntimeErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::RuntimeErrorException *)  ((lsst::pex::exceptions::MemoryException *) x));
}
static void *_p_lsst__pex__exceptions__IoErrorExceptionTo_p_lsst__pex__exceptions__RuntimeErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::RuntimeErrorException *)  ((lsst::pex::exceptions::IoErrorException *) x));
}
static void *_p_lsst__pex__exceptions__TimeoutExceptionTo_p_lsst__pex__exceptions__RuntimeErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::RuntimeErrorException *)  ((lsst::pex::exceptions::TimeoutException *) x));
}
static void *_p_lsst__pex__policy__ParserErrorTo_p_lsst__pex__exceptions__RuntimeErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::RuntimeErrorException *)  ((lsst::pex::policy::ParserError *) x));
}
static void *_p_lsst__pex__policy__BadNameErrorTo_p_lsst__pex__exceptions__RuntimeErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::RuntimeErrorException *)  ((lsst::pex::policy::BadNameError *) x));
}
static void *_p_lsst__pex__policy__EOFErrorTo_p_lsst__pex__exceptions__RuntimeErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::RuntimeErrorException *) (lsst::pex::policy::ParserError *) ((lsst::pex::policy::EOFError *) x));
}
static void *_p_lsst__pex__policy__SyntaxErrorTo_p_lsst__pex__exceptions__RuntimeErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::RuntimeErrorException *) (lsst::pex::policy::ParserError *) ((lsst::pex::policy::SyntaxError *) x));
}
static void *_p_lsst__pex__policy__FormatSyntaxErrorTo_p_lsst__pex__exceptions__RuntimeErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::RuntimeErrorException *) (lsst::pex::policy::ParserError *)(lsst::pex::policy::SyntaxError *) ((lsst::pex::policy::FormatSyntaxError *) x));
}
static void *_p_lsst__pex__policy__NameNotFoundTo_p_lsst__pex__exceptions__NotFoundException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::pex::exceptions::NotFoundException *)  ((lsst::pex::policy::NameNotFound *) x));
}
static void *_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &))  ((std::basic_iostream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &))  ((std::basic_iostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_istreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_istream< char,std::char_traits< char > > *)  ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ostream< char,std::char_traits< char > > *)  ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &))  ((std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &))  ((std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) (std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) x));
}
static void *_p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *)  ((std::basic_ostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *)  ((std::basic_istream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *) (std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_lsst__afw__geom__ellipses__QuadrupoleTo_p_lsst__afw__geom__ellipses__BaseCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::geom::ellipses::BaseCore *)  ((lsst::afw::geom::ellipses::Quadrupole *) x));
}
static void *_p_lsst__afw__geom__ellipses__AxesTo_p_lsst__afw__geom__ellipses__BaseCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::geom::ellipses::BaseCore *)  ((lsst::afw::geom::ellipses::Axes *) x));
}
static void *_p_lsst__afw__geom__ellipses__DistortionTo_p_lsst__afw__geom__ellipses__BaseCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::geom::ellipses::BaseCore *)  ((lsst::afw::geom::ellipses::Distortion *) x));
}
static void *_p_lsst__afw__geom__ellipses__LogShearTo_p_lsst__afw__geom__ellipses__BaseCore(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((lsst::afw::geom::ellipses::BaseCore *)  ((lsst::afw::geom::ellipses::LogShear *) x));
}
static swig_type_info _swigt__p_AmpSet = {"_p_AmpSet", "AmpSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BoolArray = {"_p_BoolArray", "BoolArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CandidateList = {"_p_CandidateList", "CandidateList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CellList = {"_p_CellList", "CellList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Complex = {"_p_Complex", "Complex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstDictPtr = {"_p_ConstDictPtr", "ConstDictPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstPolicyPtrArray = {"_p_ConstPolicyPtrArray", "ConstPolicyPtrArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstPtr = {"_p_ConstPtr", "ConstPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Container = {"_p_Container", "Container *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ContainerIterator = {"_p_ContainerIterator", "ContainerIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Core = {"_p_Core", "Core *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CovariancePtr = {"_p_CovariancePtr", "CovariancePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DetectorSet = {"_p_DetectorSet", "DetectorSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DictPtr = {"_p_DictPtr", "DictPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DoubleArray = {"_p_DoubleArray", "DoubleArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EigenVector = {"_p_EigenVector", "EigenVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Element = {"_p_Element", "Element *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ellipse = {"_p_Ellipse", "Ellipse *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Envelope = {"_p_Envelope", "Envelope *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FilePtr = {"_p_FilePtr", "FilePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FilePtrArray = {"_p_FilePtrArray", "FilePtrArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FootprintList = {"_p_FootprintList", "FootprintList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FourierCutoutVector = {"_p_FourierCutoutVector", "FourierCutoutVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Function1Ptr = {"_p_Function1Ptr", "Function1Ptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Function2Ptr = {"_p_Function2Ptr", "Function2Ptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Image = {"_p_Image", "Image *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImageConstPtr = {"_p_ImageConstPtr", "ImageConstPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImageList = {"_p_ImageList", "ImageList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImagePtr = {"_p_ImagePtr", "ImagePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImagePtrList = {"_p_ImagePtrList", "ImagePtrList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IntArray = {"_p_IntArray", "IntArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IteratorRange = {"_p_IteratorRange", "IteratorRange *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Jacobian = {"_p_Jacobian", "Jacobian *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_KernelFunction = {"_p_KernelFunction", "KernelFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_KernelFunctionPtr = {"_p_KernelFunctionPtr", "KernelFunctionPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_List = {"_p_List", "List *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mask = {"_p_Mask", "Mask *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MaskPlaneDict = {"_p_MaskPlaneDict", "MaskPlaneDict *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MaskPtr = {"_p_MaskPtr", "MaskPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MaskedImageT = {"_p_MaskedImageT", "MaskedImageT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Matrix = {"_p_Matrix", "Matrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NullSpatialFunction = {"_p_NullSpatialFunction", "NullSpatialFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ParameterVector = {"_p_ParameterVector", "ParameterVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Pixel = {"_p_Pixel", "Pixel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PixelConstReference = {"_p_PixelConstReference", "PixelConstReference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PixelReference = {"_p_PixelReference", "PixelReference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PolicyPtrArray = {"_p_PolicyPtrArray", "PolicyPtrArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ProductDerivativeMatrix = {"_p_ProductDerivativeMatrix", "ProductDerivativeMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ptr = {"_p_Ptr", "Ptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PtrType = {"_p_PtrType", "PtrType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Real = {"_p_Real", "Real *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SinglePixel = {"_p_SinglePixel", "SinglePixel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpanList = {"_p_SpanList", "SpanList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpatialFunction = {"_p_SpatialFunction", "SpatialFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpatialFunctionPtr = {"_p_SpatialFunctionPtr", "SpatialFunctionPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StreamPtr = {"_p_StreamPtr", "StreamPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StringArray = {"_p_StringArray", "StringArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TPtr = {"_p_TPtr", "TPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ThresholdType = {"_p_ThresholdType", "ThresholdType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TransformDerivativeMatrix = {"_p_TransformDerivativeMatrix", "TransformDerivativeMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Type = {"_p_Type", "Type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Value = {"_p_Value", "Value *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Variance = {"_p_Variance", "Variance *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VariancePtr = {"_p_VariancePtr", "VariancePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Amp_t = {"_p_boost__shared_ptrT_lsst__afw__cameraGeom__Amp_t", "boost::shared_ptr< lsst::afw::cameraGeom::Amp > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Camera_t = {"_p_boost__shared_ptrT_lsst__afw__cameraGeom__Camera_t", "boost::shared_ptr< lsst::afw::cameraGeom::Camera > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Ccd_t = {"_p_boost__shared_ptrT_lsst__afw__cameraGeom__Ccd_t", "boost::shared_ptr< lsst::afw::cameraGeom::Ccd > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorMosaic_t = {"_p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorMosaic_t", "boost::shared_ptr< lsst::afw::cameraGeom::DetectorMosaic > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Detector_t = {"_p_boost__shared_ptrT_lsst__afw__cameraGeom__Detector_t", "boost::shared_ptr< lsst::afw::cameraGeom::Detector > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__ElectronicParams_t = {"_p_boost__shared_ptrT_lsst__afw__cameraGeom__ElectronicParams_t", "boost::shared_ptr< lsst::afw::cameraGeom::ElectronicParams > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Raft_t = {"_p_boost__shared_ptrT_lsst__afw__cameraGeom__Raft_t", "boost::shared_ptr< lsst::afw::cameraGeom::Raft > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__coord__Coord_t = {"_p_boost__shared_ptrT_lsst__afw__coord__Coord_t", "boost::shared_ptr< lsst::afw::coord::Coord > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__coord__EclipticCoord_t = {"_p_boost__shared_ptrT_lsst__afw__coord__EclipticCoord_t", "boost::shared_ptr< lsst::afw::coord::EclipticCoord > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__coord__Fk5Coord_t = {"_p_boost__shared_ptrT_lsst__afw__coord__Fk5Coord_t", "boost::shared_ptr< lsst::afw::coord::Fk5Coord > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__coord__GalacticCoord_t = {"_p_boost__shared_ptrT_lsst__afw__coord__GalacticCoord_t", "boost::shared_ptr< lsst::afw::coord::GalacticCoord > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__coord__IcrsCoord_t = {"_p_boost__shared_ptrT_lsst__afw__coord__IcrsCoord_t", "boost::shared_ptr< lsst::afw::coord::IcrsCoord > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__coord__TopocentricCoord_t = {"_p_boost__shared_ptrT_lsst__afw__coord__TopocentricCoord_t", "boost::shared_ptr< lsst::afw::coord::TopocentricCoord > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__detection__Astrometry_t = {"_p_boost__shared_ptrT_lsst__afw__detection__Astrometry_t", "boost::shared_ptr< lsst::afw::detection::Astrometry > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__detection__BaseSourceAttributesT_lsst__afw__detection__NUM_DIASOURCE_NULLABLE_FIELDS_t_t = {"_p_boost__shared_ptrT_lsst__afw__detection__BaseSourceAttributesT_lsst__afw__detection__NUM_DIASOURCE_NULLABLE_FIELDS_t_t", "boost::shared_ptr< lsst::afw::detection::BaseSourceAttributes< lsst::afw::detection::NUM_DIASOURCE_NULLABLE_FIELDS > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__detection__BaseSourceAttributesT_lsst__afw__detection__NUM_SOURCE_NULLABLE_FIELDS_t_t = {"_p_boost__shared_ptrT_lsst__afw__detection__BaseSourceAttributesT_lsst__afw__detection__NUM_SOURCE_NULLABLE_FIELDS_t_t", "boost::shared_ptr< lsst::afw::detection::BaseSourceAttributes< lsst::afw::detection::NUM_SOURCE_NULLABLE_FIELDS > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__detection__DiaSource_t = {"_p_boost__shared_ptrT_lsst__afw__detection__DiaSource_t", "boost::shared_ptr< lsst::afw::detection::DiaSource > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__detection__FootprintSetT_boost__uint16_t_lsst__afw__image__MaskPixel_t_t = {"_p_boost__shared_ptrT_lsst__afw__detection__FootprintSetT_boost__uint16_t_lsst__afw__image__MaskPixel_t_t", "boost::shared_ptr< lsst::afw::detection::FootprintSet< unsigned short,unsigned short > > *|boost::shared_ptr< lsst::afw::detection::FootprintSet< boost::uint16_t,lsst::afw::image::MaskPixel > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__detection__FootprintSetT_double_lsst__afw__image__MaskPixel_t_t = {"_p_boost__shared_ptrT_lsst__afw__detection__FootprintSetT_double_lsst__afw__image__MaskPixel_t_t", "boost::shared_ptr< lsst::afw::detection::FootprintSet< double,unsigned short > > *|boost::shared_ptr< lsst::afw::detection::FootprintSet< double,lsst::afw::image::MaskPixel > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__detection__FootprintSetT_float_lsst__afw__image__MaskPixel_t_t = {"_p_boost__shared_ptrT_lsst__afw__detection__FootprintSetT_float_lsst__afw__image__MaskPixel_t_t", "boost::shared_ptr< lsst::afw::detection::FootprintSet< float,unsigned short > > *|boost::shared_ptr< lsst::afw::detection::FootprintSet< float,lsst::afw::image::MaskPixel > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__detection__FootprintSetT_int_lsst__afw__image__MaskPixel_t_t = {"_p_boost__shared_ptrT_lsst__afw__detection__FootprintSetT_int_lsst__afw__image__MaskPixel_t_t", "boost::shared_ptr< lsst::afw::detection::FootprintSet< int,unsigned short > > *|boost::shared_ptr< lsst::afw::detection::FootprintSet< int,lsst::afw::image::MaskPixel > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__detection__Footprint_t = {"_p_boost__shared_ptrT_lsst__afw__detection__Footprint_t", "boost::shared_ptr< lsst::afw::detection::Footprint > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__detection__KernelPsf_t = {"_p_boost__shared_ptrT_lsst__afw__detection__KernelPsf_t", "boost::shared_ptr< lsst::afw::detection::KernelPsf > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__detection__MeasurementT_lsst__afw__detection__Astrometry_t_t = {"_p_boost__shared_ptrT_lsst__afw__detection__MeasurementT_lsst__afw__detection__Astrometry_t_t", "boost::shared_ptr< lsst::afw::detection::Measurement< lsst::afw::detection::Astrometry > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__detection__MeasurementT_lsst__afw__detection__Photometry_t_t = {"_p_boost__shared_ptrT_lsst__afw__detection__MeasurementT_lsst__afw__detection__Photometry_t_t", "boost::shared_ptr< lsst::afw::detection::Measurement< lsst::afw::detection::Photometry > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__detection__MeasurementT_lsst__afw__detection__Shape_t_t = {"_p_boost__shared_ptrT_lsst__afw__detection__MeasurementT_lsst__afw__detection__Shape_t_t", "boost::shared_ptr< lsst::afw::detection::Measurement< lsst::afw::detection::Shape > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__detection__Peak_t = {"_p_boost__shared_ptrT_lsst__afw__detection__Peak_t", "boost::shared_ptr< lsst::afw::detection::Peak > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__detection__PersistableDiaSourceVector_t = {"_p_boost__shared_ptrT_lsst__afw__detection__PersistableDiaSourceVector_t", "boost::shared_ptr< lsst::afw::detection::PersistableDiaSourceVector > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__detection__PersistableSourceVector_t = {"_p_boost__shared_ptrT_lsst__afw__detection__PersistableSourceVector_t", "boost::shared_ptr< lsst::afw::detection::PersistableSourceVector > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__detection__Photometry_t = {"_p_boost__shared_ptrT_lsst__afw__detection__Photometry_t", "boost::shared_ptr< lsst::afw::detection::Photometry > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__detection__Psf_t = {"_p_boost__shared_ptrT_lsst__afw__detection__Psf_t", "boost::shared_ptr< lsst::afw::detection::Psf > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__detection__SchemaEntry_t = {"_p_boost__shared_ptrT_lsst__afw__detection__SchemaEntry_t", "boost::shared_ptr< lsst::afw::detection::SchemaEntry > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__detection__Schema_t = {"_p_boost__shared_ptrT_lsst__afw__detection__Schema_t", "boost::shared_ptr< lsst::afw::detection::Schema > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__detection__Shape_t = {"_p_boost__shared_ptrT_lsst__afw__detection__Shape_t", "boost::shared_ptr< lsst::afw::detection::Shape > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__detection__Source_t = {"_p_boost__shared_ptrT_lsst__afw__detection__Source_t", "boost::shared_ptr< lsst::afw::detection::Source > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__detection__Span_t = {"_p_boost__shared_ptrT_lsst__afw__detection__Span_t", "boost::shared_ptr< lsst::afw::detection::Span > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__AffineTransform_t = {"_p_boost__shared_ptrT_lsst__afw__geom__AffineTransform_t", "boost::shared_ptr< lsst::afw::geom::AffineTransform > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t = {"_p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t", "boost::shared_ptr< lsst::afw::geom::LinearTransform > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__AxesEllipse_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__AxesEllipse_t", "boost::shared_ptr< lsst::afw::geom::ellipses::AxesEllipse > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t", "boost::shared_ptr< lsst::afw::geom::ellipses::Axes > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t", "boost::shared_ptr< lsst::afw::geom::ellipses::BaseCore > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseEllipse_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseEllipse_t", "boost::shared_ptr< lsst::afw::geom::ellipses::BaseEllipse > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__DistortionEllipse_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__DistortionEllipse_t", "boost::shared_ptr< lsst::afw::geom::ellipses::DistortionEllipse > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Distortion_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Distortion_t", "boost::shared_ptr< lsst::afw::geom::ellipses::Distortion > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__LogShearEllipse_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__LogShearEllipse_t", "boost::shared_ptr< lsst::afw::geom::ellipses::LogShearEllipse > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__LogShear_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__LogShear_t", "boost::shared_ptr< lsst::afw::geom::ellipses::LogShear > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__QuadrupoleEllipse_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__QuadrupoleEllipse_t", "boost::shared_ptr< lsst::afw::geom::ellipses::QuadrupoleEllipse > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t = {"_p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t", "boost::shared_ptr< lsst::afw::geom::ellipses::Quadrupole > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__Calib_t = {"_p_boost__shared_ptrT_lsst__afw__image__Calib_t", "boost::shared_ptr< lsst::afw::image::Calib > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_boost__uint16_t_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_boost__uint16_t_t_t", "boost::shared_ptr< lsst::afw::image::DecoratedImage< unsigned short > > *|boost::shared_ptr< lsst::afw::image::DecoratedImage< boost::uint16_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_double_t_t", "boost::shared_ptr< lsst::afw::image::DecoratedImage< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_float_t_t", "boost::shared_ptr< lsst::afw::image::DecoratedImage< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_int_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_int_t_t", "boost::shared_ptr< lsst::afw::image::DecoratedImage< int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__DefectBase_t = {"_p_boost__shared_ptrT_lsst__afw__image__DefectBase_t", "boost::shared_ptr< lsst::afw::image::DefectBase > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_boost__uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__ExposureT_boost__uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t", "boost::shared_ptr< lsst::afw::image::Exposure< unsigned short,unsigned short,float > > *|boost::shared_ptr< lsst::afw::image::Exposure< boost::uint16_t,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t", "boost::shared_ptr< lsst::afw::image::Exposure< double,unsigned short,float > > *|boost::shared_ptr< lsst::afw::image::Exposure< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t", "boost::shared_ptr< lsst::afw::image::Exposure< float,unsigned short,float > > *|boost::shared_ptr< lsst::afw::image::Exposure< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__ExposureT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t", "boost::shared_ptr< lsst::afw::image::Exposure< int,unsigned short,float > > *|boost::shared_ptr< lsst::afw::image::Exposure< int,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_boost__uint16_t_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_boost__uint16_t_t_t", "boost::shared_ptr< lsst::afw::image::ImageBase< unsigned short > > *|boost::shared_ptr< lsst::afw::image::ImageBase< boost::uint16_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_double_t_t", "boost::shared_ptr< lsst::afw::image::ImageBase< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_float_t_t", "boost::shared_ptr< lsst::afw::image::ImageBase< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_int_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_int_t_t", "boost::shared_ptr< lsst::afw::image::ImageBase< int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_double_t_t", "boost::shared_ptr< lsst::afw::image::ImageSlice< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_float_t_t", "boost::shared_ptr< lsst::afw::image::ImageSlice< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_boost__uint16_t_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__ImageT_boost__uint16_t_t_t", "boost::shared_ptr< lsst::afw::image::Image< unsigned short > > *|boost::shared_ptr< lsst::afw::image::Image< boost::uint16_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t", "boost::shared_ptr< lsst::afw::image::Image< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__ImageT_float_t_t", "boost::shared_ptr< lsst::afw::image::Image< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_int_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__ImageT_int_t_t", "boost::shared_ptr< lsst::afw::image::Image< int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__MaskT_boost__uint16_t_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__MaskT_boost__uint16_t_t_t", "boost::shared_ptr< lsst::afw::image::Mask< unsigned short > > *|boost::shared_ptr< lsst::afw::image::Mask< boost::uint16_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_boost__uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_boost__uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t", "boost::shared_ptr< lsst::afw::image::MaskedImage< unsigned short,unsigned short,float > > *|boost::shared_ptr< lsst::afw::image::MaskedImage< boost::uint16_t,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t", "boost::shared_ptr< lsst::afw::image::MaskedImage< double,unsigned short,float > > *|boost::shared_ptr< lsst::afw::image::MaskedImage< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t", "boost::shared_ptr< lsst::afw::image::MaskedImage< float,unsigned short,float > > *|boost::shared_ptr< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t = {"_p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t", "boost::shared_ptr< lsst::afw::image::MaskedImage< int,unsigned short,float > > *|boost::shared_ptr< lsst::afw::image::MaskedImage< int,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__TanWcs_t = {"_p_boost__shared_ptrT_lsst__afw__image__TanWcs_t", "boost::shared_ptr< lsst::afw::image::TanWcs > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__image__Wcs_t = {"_p_boost__shared_ptrT_lsst__afw__image__Wcs_t", "boost::shared_ptr< lsst::afw::image::Wcs > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_t = {"_p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_t", "boost::shared_ptr< lsst::afw::math::AnalyticKernel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_t = {"_p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_t", "boost::shared_ptr< lsst::afw::math::BilinearWarpingKernel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_double_t_t", "boost::shared_ptr< lsst::afw::math::Chebyshev1Function1< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_float_t_t", "boost::shared_ptr< lsst::afw::math::Chebyshev1Function1< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__DeltaFunctionKernel_t = {"_p_boost__shared_ptrT_lsst__afw__math__DeltaFunctionKernel_t", "boost::shared_ptr< lsst::afw::math::DeltaFunctionKernel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_double_t_t", "boost::shared_ptr< lsst::afw::math::DoubleGaussianFunction2< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_float_t_t", "boost::shared_ptr< lsst::afw::math::DoubleGaussianFunction2< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__FftLocalKernel_t = {"_p_boost__shared_ptrT_lsst__afw__math__FftLocalKernel_t", "boost::shared_ptr< lsst::afw::math::FftLocalKernel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__FixedKernel_t = {"_p_boost__shared_ptrT_lsst__afw__math__FixedKernel_t", "boost::shared_ptr< lsst::afw::math::FixedKernel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__FourierCutoutStack_t = {"_p_boost__shared_ptrT_lsst__afw__math__FourierCutoutStack_t", "boost::shared_ptr< lsst::afw::math::FourierCutoutStack > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__FourierCutout_t = {"_p_boost__shared_ptrT_lsst__afw__math__FourierCutout_t", "boost::shared_ptr< lsst::afw::math::FourierCutout > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__FourierLocalKernel_t = {"_p_boost__shared_ptrT_lsst__afw__math__FourierLocalKernel_t", "boost::shared_ptr< lsst::afw::math::FourierLocalKernel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_t", "boost::shared_ptr< lsst::afw::math::Function1< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_t", "boost::shared_ptr< lsst::afw::math::Function1< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t", "boost::shared_ptr< lsst::afw::math::Function2< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t", "boost::shared_ptr< lsst::afw::math::Function2< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t", "boost::shared_ptr< lsst::afw::math::Function< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t", "boost::shared_ptr< lsst::afw::math::Function< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_double_t_t", "boost::shared_ptr< lsst::afw::math::GaussianFunction1< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_float_t_t", "boost::shared_ptr< lsst::afw::math::GaussianFunction1< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_double_t_t", "boost::shared_ptr< lsst::afw::math::GaussianFunction2< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_float_t_t", "boost::shared_ptr< lsst::afw::math::GaussianFunction2< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__ImageLocalKernel_t = {"_p_boost__shared_ptrT_lsst__afw__math__ImageLocalKernel_t", "boost::shared_ptr< lsst::afw::math::ImageLocalKernel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_double_t_t", "boost::shared_ptr< lsst::afw::math::IntegerDeltaFunction2< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_float_t_t", "boost::shared_ptr< lsst::afw::math::IntegerDeltaFunction2< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__Kernel_t = {"_p_boost__shared_ptrT_lsst__afw__math__Kernel_t", "boost::shared_ptr< lsst::afw::math::Kernel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_double_t_t", "boost::shared_ptr< lsst::afw::math::LanczosFunction1< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_float_t_t", "boost::shared_ptr< lsst::afw::math::LanczosFunction1< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_double_t_t", "boost::shared_ptr< lsst::afw::math::LanczosFunction2< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_float_t_t", "boost::shared_ptr< lsst::afw::math::LanczosFunction2< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_t = {"_p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_t", "boost::shared_ptr< lsst::afw::math::LanczosWarpingKernel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t = {"_p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t", "boost::shared_ptr< lsst::afw::math::LinearCombinationKernel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_t = {"_p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_t", "boost::shared_ptr< lsst::afw::math::NearestWarpingKernel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_double_t_t", "boost::shared_ptr< lsst::afw::math::NullFunction1< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_float_t_t", "boost::shared_ptr< lsst::afw::math::NullFunction1< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_double_t_t", "boost::shared_ptr< lsst::afw::math::NullFunction2< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_float_t_t", "boost::shared_ptr< lsst::afw::math::NullFunction2< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_double_t_t", "boost::shared_ptr< lsst::afw::math::PolynomialFunction1< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_float_t_t", "boost::shared_ptr< lsst::afw::math::PolynomialFunction1< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_double_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_double_t_t", "boost::shared_ptr< lsst::afw::math::PolynomialFunction2< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_float_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_float_t_t", "boost::shared_ptr< lsst::afw::math::PolynomialFunction2< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_t = {"_p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_t", "boost::shared_ptr< lsst::afw::math::SeparableKernel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellCandidate_t = {"_p_boost__shared_ptrT_lsst__afw__math__SpatialCellCandidate_t", "boost::shared_ptr< lsst::afw::math::SpatialCellCandidate > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_lsst__afw__image__ImageT_double_t_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_lsst__afw__image__ImageT_double_t_t_t", "boost::shared_ptr< lsst::afw::math::SpatialCellImageCandidate< lsst::afw::image::Image< double > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_lsst__afw__image__ImageT_float_t_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_lsst__afw__image__ImageT_float_t_t_t", "boost::shared_ptr< lsst::afw::math::SpatialCellImageCandidate< lsst::afw::image::Image< float > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_lsst__afw__image__MaskedImageT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_lsst__afw__image__MaskedImageT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t_t", "boost::shared_ptr< lsst::afw::math::SpatialCellImageCandidate< lsst::afw::image::MaskedImage< double,unsigned short,float > > > *|boost::shared_ptr< lsst::afw::math::SpatialCellImageCandidate< lsst::afw::image::MaskedImage< double,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t_t = {"_p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t_t", "boost::shared_ptr< lsst::afw::math::SpatialCellImageCandidate< lsst::afw::image::MaskedImage< float,unsigned short,float > > > *|boost::shared_ptr< lsst::afw::math::SpatialCellImageCandidate< lsst::afw::image::MaskedImage< float,lsst::afw::image::MaskPixel,lsst::afw::image::VariancePixel > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCell_t = {"_p_boost__shared_ptrT_lsst__afw__math__SpatialCell_t", "boost::shared_ptr< lsst::afw::math::SpatialCell > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__daf__base__Citizen_t = {"_p_boost__shared_ptrT_lsst__daf__base__Citizen_t", "boost::shared_ptr< lsst::daf::base::Citizen > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__daf__base__Persistable_t = {"_p_boost__shared_ptrT_lsst__daf__base__Persistable_t", "boost::shared_ptr< lsst::daf::base::Persistable > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__daf__base__PropertySet_t = {"_p_boost__shared_ptrT_lsst__daf__base__PropertySet_t", "boost::shared_ptr< lsst::daf::base::PropertySet > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__daf__data__LsstBase_t = {"_p_boost__shared_ptrT_lsst__daf__data__LsstBase_t", "boost::shared_ptr< lsst::daf::data::LsstBase > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__daf__data__LsstData_t = {"_p_boost__shared_ptrT_lsst__daf__data__LsstData_t", "boost::shared_ptr< lsst::daf::data::LsstData > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__daf__data__LsstImpl_DC3_t = {"_p_boost__shared_ptrT_lsst__daf__data__LsstImpl_DC3_t", "boost::shared_ptr< lsst::daf::data::LsstImpl_DC3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__daf__data__Provenance_t = {"_p_boost__shared_ptrT_lsst__daf__data__Provenance_t", "boost::shared_ptr< lsst::daf::data::Provenance > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__daf__data__ReleaseProcess_t = {"_p_boost__shared_ptrT_lsst__daf__data__ReleaseProcess_t", "boost::shared_ptr< lsst::daf::data::ReleaseProcess > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__daf__persistence__DbStorage_t = {"_p_boost__shared_ptrT_lsst__daf__persistence__DbStorage_t", "boost::shared_ptr< lsst::daf::persistence::DbStorage > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__daf__persistence__DbTsvStorage_t = {"_p_boost__shared_ptrT_lsst__daf__persistence__DbTsvStorage_t", "boost::shared_ptr< lsst::daf::persistence::DbTsvStorage > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__daf__persistence__LogicalLocation_t = {"_p_boost__shared_ptrT_lsst__daf__persistence__LogicalLocation_t", "boost::shared_ptr< lsst::daf::persistence::LogicalLocation > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__daf__persistence__Persistence_t = {"_p_boost__shared_ptrT_lsst__daf__persistence__Persistence_t", "boost::shared_ptr< lsst::daf::persistence::Persistence > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__daf__persistence__Storage_t = {"_p_boost__shared_ptrT_lsst__daf__persistence__Storage_t", "boost::shared_ptr< lsst::daf::persistence::Storage > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__logging__BriefFormatter_t = {"_p_boost__shared_ptrT_lsst__pex__logging__BriefFormatter_t", "boost::shared_ptr< lsst::pex::logging::BriefFormatter > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__logging__FileDestination_t = {"_p_boost__shared_ptrT_lsst__pex__logging__FileDestination_t", "boost::shared_ptr< lsst::pex::logging::FileDestination > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__logging__IndentedFormatter_t = {"_p_boost__shared_ptrT_lsst__pex__logging__IndentedFormatter_t", "boost::shared_ptr< lsst::pex::logging::IndentedFormatter > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__logging__LogDestination_t = {"_p_boost__shared_ptrT_lsst__pex__logging__LogDestination_t", "boost::shared_ptr< lsst::pex::logging::LogDestination > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__logging__LogFormatter_t = {"_p_boost__shared_ptrT_lsst__pex__logging__LogFormatter_t", "boost::shared_ptr< lsst::pex::logging::LogFormatter > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__logging__NetLoggerFormatter_t = {"_p_boost__shared_ptrT_lsst__pex__logging__NetLoggerFormatter_t", "boost::shared_ptr< lsst::pex::logging::NetLoggerFormatter > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__policy__DefaultPolicyFile_t = {"_p_boost__shared_ptrT_lsst__pex__policy__DefaultPolicyFile_t", "boost::shared_ptr< lsst::pex::policy::DefaultPolicyFile > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__policy__Definition_t = {"_p_boost__shared_ptrT_lsst__pex__policy__Definition_t", "boost::shared_ptr< lsst::pex::policy::Definition > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__policy__Dictionary_t = {"_p_boost__shared_ptrT_lsst__pex__policy__Dictionary_t", "boost::shared_ptr< lsst::pex::policy::Dictionary > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyDestination_t = {"_p_boost__shared_ptrT_lsst__pex__policy__PolicyDestination_t", "boost::shared_ptr< lsst::pex::policy::PolicyDestination > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyFile_t = {"_p_boost__shared_ptrT_lsst__pex__policy__PolicyFile_t", "boost::shared_ptr< lsst::pex::policy::PolicyFile > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicySource_t = {"_p_boost__shared_ptrT_lsst__pex__policy__PolicySource_t", "boost::shared_ptr< lsst::pex::policy::PolicySource > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyStreamDestination_t = {"_p_boost__shared_ptrT_lsst__pex__policy__PolicyStreamDestination_t", "boost::shared_ptr< lsst::pex::policy::PolicyStreamDestination > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyStringDestination_t = {"_p_boost__shared_ptrT_lsst__pex__policy__PolicyStringDestination_t", "boost::shared_ptr< lsst::pex::policy::PolicyStringDestination > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyString_t = {"_p_boost__shared_ptrT_lsst__pex__policy__PolicyString_t", "boost::shared_ptr< lsst::pex::policy::PolicyString > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__policy__Policy_t = {"_p_boost__shared_ptrT_lsst__pex__policy__Policy_t", "boost::shared_ptr< lsst::pex::policy::Policy > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__pex__policy__UrnPolicyFile_t = {"_p_boost__shared_ptrT_lsst__pex__policy__UrnPolicyFile_t", "boost::shared_ptr< lsst::pex::policy::UrnPolicyFile > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_lsst__security__Security_t = {"_p_boost__shared_ptrT_lsst__security__Security_t", "boost::shared_ptr< lsst::security::Security > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char_type = {"_p_char_type", "char_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_iterator = {"_p_const_iterator", "const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_reference = {"_p_const_reference", "const_reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_reverse_iterator = {"_p_const_reverse_iterator", "const_reverse_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_x_iterator = {"_p_const_x_iterator", "const_x_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_xy_locator = {"_p_const_xy_locator", "const_xy_locator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_y_iterator = {"_p_const_y_iterator", "const_y_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_enum_std__ios_base__event_r_std__ios_base_int__void = {"_p_f_enum_std__ios_base__event_r_std__ios_base_int__void", "void (*)(enum std::ios_base::event,std::ios_base &,int)|std::ios_base::event_callback", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t", "std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t", "std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t", "std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__ios_base = {"_p_f_r_std__ios_base__r_std__ios_base", "std::ios_base &(*)(std::ios_base &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_fast_iterator = {"_p_fast_iterator", "fast_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_first_type = {"_p_first_type", "first_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|lsst::afw::image::VariancePixel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fmtflags = {"_p_fmtflags", "fmtflags *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_image_category = {"_p_image_category", "image_category *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|boost::int32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int_type = {"_p_int_type", "int_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iostate = {"_p_iostate", "iostate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator = {"_p_iterator", "iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kernel_fill_factor = {"_p_kernel_fill_factor", "kernel_fill_factor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_double = {"_p_long_double", "long double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int64_t *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__CoordinateExprT_2_t = {"_p_lsst__afw__geom__CoordinateExprT_2_t", "lsst::afw::geom::CoordinateExpr< 2 > *|lsst::afw::geom::CoordinateExpr2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__CoordinateExprT_3_t = {"_p_lsst__afw__geom__CoordinateExprT_3_t", "lsst::afw::geom::CoordinateExpr3 *|lsst::afw::geom::CoordinateExpr< 3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ExtentT_double_2_t = {"_p_lsst__afw__geom__ExtentT_double_2_t", "lsst::afw::geom::Extent2D *|lsst::afw::geom::Extent< double,2 > *|lsst::afw::geom::ExtentD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ExtentT_double_3_t = {"_p_lsst__afw__geom__ExtentT_double_3_t", "lsst::afw::geom::Extent< double,3 > *|lsst::afw::geom::Extent3D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ExtentT_int_2_t = {"_p_lsst__afw__geom__ExtentT_int_2_t", "lsst::afw::geom::ExtentI *|lsst::afw::geom::Extent2I *|lsst::afw::geom::Extent< int,2 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ExtentT_int_3_t = {"_p_lsst__afw__geom__ExtentT_int_3_t", "lsst::afw::geom::Extent< int,3 > *|lsst::afw::geom::Extent3I *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__PointT_double_2_t = {"_p_lsst__afw__geom__PointT_double_2_t", "lsst::afw::geom::Point2D *|lsst::afw::geom::Point< double,2 > *|lsst::afw::geom::PointD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__PointT_double_3_t = {"_p_lsst__afw__geom__PointT_double_3_t", "lsst::afw::geom::Point< double,3 > *|lsst::afw::geom::Point3D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__PointT_int_2_t = {"_p_lsst__afw__geom__PointT_int_2_t", "lsst::afw::geom::PointI *|lsst::afw::geom::Point2I *|lsst::afw::geom::Point< int,2 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__PointT_int_3_t = {"_p_lsst__afw__geom__PointT_int_3_t", "lsst::afw::geom::Point< int,3 > *|lsst::afw::geom::Point3I *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__BaseCore = {"_p_lsst__afw__geom__ellipses__BaseCore", "lsst::afw::geom::ellipses::Core *|lsst::afw::geom::ellipses::BaseCore *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__Quadrupole = {"_p_lsst__afw__geom__ellipses__Quadrupole", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__Distortion = {"_p_lsst__afw__geom__ellipses__Distortion", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__Axes = {"_p_lsst__afw__geom__ellipses__Axes", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__LogShear = {"_p_lsst__afw__geom__ellipses__LogShear", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__BaseEllipse = {"_p_lsst__afw__geom__ellipses__BaseEllipse", "lsst::afw::geom::ellipses::BaseEllipse *|lsst::afw::geom::ellipses::Ellipse *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__AxesEllipse = {"_p_lsst__afw__geom__ellipses__AxesEllipse", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__DistortionEllipse = {"_p_lsst__afw__geom__ellipses__DistortionEllipse", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__QuadrupoleEllipse = {"_p_lsst__afw__geom__ellipses__QuadrupoleEllipse", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__geom__ellipses__LogShearEllipse = {"_p_lsst__afw__geom__ellipses__LogShearEllipse", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__afw__image__PointT_double_t = {"_p_lsst__afw__image__PointT_double_t", "lsst::afw::image::PointD *|lsst::afw::image::Point< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__afw__image__PointT_int_t = {"_p_lsst__afw__image__PointT_int_t", "lsst::afw::image::PointI *|lsst::afw::image::Point< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__pex__exceptions__DomainErrorException = {"_p_lsst__pex__exceptions__DomainErrorException", "lsst::pex::exceptions::DomainErrorException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__pex__policy__DictionaryError = {"_p_lsst__pex__policy__DictionaryError", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__pex__policy__TypeError = {"_p_lsst__pex__policy__TypeError", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__pex__exceptions__InvalidParameterException = {"_p_lsst__pex__exceptions__InvalidParameterException", "lsst::pex::exceptions::InvalidParameterException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__pex__exceptions__IoErrorException = {"_p_lsst__pex__exceptions__IoErrorException", "lsst::pex::exceptions::IoErrorException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__pex__exceptions__LengthErrorException = {"_p_lsst__pex__exceptions__LengthErrorException", "lsst::pex::exceptions::LengthErrorException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__pex__exceptions__LogicErrorException = {"_p_lsst__pex__exceptions__LogicErrorException", "lsst::pex::exceptions::LogicErrorException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__pex__policy__ValidationError = {"_p_lsst__pex__policy__ValidationError", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__daf__base__TypeMismatchException = {"_p_lsst__daf__base__TypeMismatchException", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__pex__exceptions__MemoryException = {"_p_lsst__pex__exceptions__MemoryException", "lsst::pex::exceptions::MemoryException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__pex__exceptions__NotFoundException = {"_p_lsst__pex__exceptions__NotFoundException", "lsst::pex::exceptions::NotFoundException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__pex__policy__NameNotFound = {"_p_lsst__pex__policy__NameNotFound", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__pex__exceptions__OutOfRangeException = {"_p_lsst__pex__exceptions__OutOfRangeException", "lsst::pex::exceptions::OutOfRangeException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__pex__exceptions__OverflowErrorException = {"_p_lsst__pex__exceptions__OverflowErrorException", "lsst::pex::exceptions::OverflowErrorException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__pex__exceptions__RangeErrorException = {"_p_lsst__pex__exceptions__RangeErrorException", "lsst::pex::exceptions::RangeErrorException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__pex__exceptions__RuntimeErrorException = {"_p_lsst__pex__exceptions__RuntimeErrorException", "lsst::pex::exceptions::RuntimeErrorException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__pex__policy__UnsupportedSyntax = {"_p_lsst__pex__policy__UnsupportedSyntax", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__pex__policy__ParserError = {"_p_lsst__pex__policy__ParserError", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__pex__policy__BadNameError = {"_p_lsst__pex__policy__BadNameError", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__pex__policy__EOFError = {"_p_lsst__pex__policy__EOFError", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__pex__policy__SyntaxError = {"_p_lsst__pex__policy__SyntaxError", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__pex__policy__FormatSyntaxError = {"_p_lsst__pex__policy__FormatSyntaxError", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_lsst__pex__exceptions__TimeoutException = {"_p_lsst__pex__exceptions__TimeoutException", "lsst::pex::exceptions::TimeoutException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__pex__exceptions__UnderflowErrorException = {"_p_lsst__pex__exceptions__UnderflowErrorException", "lsst::pex::exceptions::UnderflowErrorException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lsst__pex__logging__LogRec = {"_p_lsst__pex__logging__LogRec", "lsst::pex::logging::Rec *|lsst::pex::logging::LogRec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapped_type = {"_p_mapped_type", "mapped_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_memId = {"_p_memId", "memId *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_off_type = {"_p_off_type", "off_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_openmode = {"_p_openmode", "openmode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pos_type = {"_p_pos_type", "pos_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_reference = {"_p_reference", "reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_reverse_iterator = {"_p_reverse_iterator", "reverse_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_second_type = {"_p_second_type", "second_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_seekdir = {"_p_seekdir", "seekdir *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|boost::int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|boost::int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "std::streamsize *|size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_state_type = {"_p_state_type", "state_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t = {"_p_std__basic_iosT_char_std__char_traitsT_char_t_t", "std::basic_ios< char > *|std::basic_ios< char,std::char_traits< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t", "std::basic_iostream< char,std::char_traits< char > > *|std::basic_iostream< char > *|std::iostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_istreamT_char_std__char_traitsT_char_t_t", "std::basic_istream< char > *|std::basic_istream< char,std::char_traits< char > > *|std::istream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__char_type = {"_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__char_type", "std::basic_istream< char >::char_type *|char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__off_type = {"_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__off_type", "std::basic_istream< char >::off_type *|streamoff *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type = {"_p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type", "std::basic_istream< char >::pos_type *|streampos *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t", "std::basic_ostream< char > *|std::basic_ostream< char,std::char_traits< char > > *|std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__off_type = {"_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__off_type", "std::basic_ostream< char >::off_type *|streamoff *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type = {"_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type", "std::basic_ostream< char >::pos_type *|streampos *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_streambufT_char_std__char_traitsT_char_t_t = {"_p_std__basic_streambufT_char_std__char_traitsT_char_t_t", "std::basic_streambuf< char,std::char_traits< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t = {"_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t", "std::basic_string< char,std::char_traits< char >,std::allocator< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ios_base = {"_p_std__ios_base", "std::ios_base *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__locale = {"_p_std__locale", "std::locale *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_boost__shared_ptrT_lsst__afw__detection__DiaSource_t_std__allocatorT_boost__shared_ptrT_lsst__afw__detection__DiaSource_t_t_t = {"_p_std__vectorT_boost__shared_ptrT_lsst__afw__detection__DiaSource_t_std__allocatorT_boost__shared_ptrT_lsst__afw__detection__DiaSource_t_t_t", "lsst::afw::detection::DiaSourceSet *|std::vector< boost::shared_ptr< lsst::afw::detection::DiaSource >,std::allocator< boost::shared_ptr< lsst::afw::detection::DiaSource > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_boost__shared_ptrT_lsst__afw__detection__Source_t_std__allocatorT_boost__shared_ptrT_lsst__afw__detection__Source_t_t_t = {"_p_std__vectorT_boost__shared_ptrT_lsst__afw__detection__Source_t_std__allocatorT_boost__shared_ptrT_lsst__afw__detection__Source_t_t_t", "lsst::afw::detection::SourceSet *|std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t = {"_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t", "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > > *|std::vector< boost::shared_ptr< lsst::afw::image::TanWcs >,std::allocator< boost::shared_ptr< lsst::afw::image::TanWcs > > > *|std::vector< lsst::afw::image::TanWcs::Ptr > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t__allocator_type = {"_p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t__allocator_type", "std::vector< boost::shared_ptr< lsst::afw::image::TanWcs > >::allocator_type *|std::allocator< boost::shared_ptr< lsst::afw::image::TanWcs > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__allocatorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_t_t = {"_p_std__vectorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__allocatorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_t_t", "lsst::afw::math::KernelList *|std::vector< boost::shared_ptr< lsst::afw::math::Kernel >,std::allocator< boost::shared_ptr< lsst::afw::math::Kernel > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_lsst__pex__exceptions__Tracepoint_std__allocatorT_lsst__pex__exceptions__Tracepoint_t_t = {"_p_std__vectorT_lsst__pex__exceptions__Tracepoint_std__allocatorT_lsst__pex__exceptions__Tracepoint_t_t", "std::vector< lsst::pex::exceptions::Tracepoint,std::allocator< lsst::pex::exceptions::Tracepoint > > *|lsst::pex::exceptions::Traceback *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t = {"_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t", "std::vector< std::vector< lsst::afw::detection::SourceMatch > > *|std::vector< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > >,std::allocator< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > > *|std::vector< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t__allocator_type = {"_p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t__allocator_type", "std::allocator< std::vector< lsst::afw::detection::SourceMatch,std::allocator< lsst::afw::detection::SourceMatch > > > *|std::vector< std::vector< lsst::afw::detection::SourceMatch > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t = {"_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t", "std::vector< lsst::afw::detection::SourceSet > *|std::vector< std::vector< lsst::afw::detection::Source::Ptr,std::allocator< lsst::afw::detection::Source::Ptr > >,std::allocator< std::vector< lsst::afw::detection::Source::Ptr,std::allocator< lsst::afw::detection::Source::Ptr > > > > *|std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > > *|std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > >,std::allocator< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t__allocator_type = {"_p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t__allocator_type", "std::allocator< std::vector< lsst::afw::detection::Source::Ptr,std::allocator< lsst::afw::detection::Source::Ptr > > > *|std::vector< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > >::allocator_type *|std::allocator< std::vector< boost::shared_ptr< lsst::afw::detection::Source >,std::allocator< boost::shared_ptr< lsst::afw::detection::Source > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__PySwigIterator = {"_p_swig__PySwigIterator", "swig::PySwigIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_traits_type = {"_p_traits_type", "traits_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|lsst::afw::image::MaskPixel *|boost::uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_x_iterator = {"_p_x_iterator", "x_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xy_locator = {"_p_xy_locator", "xy_locator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xy_x_iterator = {"_p_xy_x_iterator", "xy_x_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xy_y_iterator = {"_p_xy_y_iterator", "xy_y_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_y_iterator = {"_p_y_iterator", "y_iterator *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_AmpSet,
  &_swigt__p_BoolArray,
  &_swigt__p_CandidateList,
  &_swigt__p_CellList,
  &_swigt__p_Complex,
  &_swigt__p_ConstDictPtr,
  &_swigt__p_ConstPolicyPtrArray,
  &_swigt__p_ConstPtr,
  &_swigt__p_Container,
  &_swigt__p_ContainerIterator,
  &_swigt__p_Core,
  &_swigt__p_CovariancePtr,
  &_swigt__p_DetectorSet,
  &_swigt__p_DictPtr,
  &_swigt__p_DoubleArray,
  &_swigt__p_EigenVector,
  &_swigt__p_Element,
  &_swigt__p_Ellipse,
  &_swigt__p_Envelope,
  &_swigt__p_FilePtr,
  &_swigt__p_FilePtrArray,
  &_swigt__p_FootprintList,
  &_swigt__p_FourierCutoutVector,
  &_swigt__p_Function1Ptr,
  &_swigt__p_Function2Ptr,
  &_swigt__p_Image,
  &_swigt__p_ImageConstPtr,
  &_swigt__p_ImageList,
  &_swigt__p_ImagePtr,
  &_swigt__p_ImagePtrList,
  &_swigt__p_IntArray,
  &_swigt__p_IteratorRange,
  &_swigt__p_Jacobian,
  &_swigt__p_KernelFunction,
  &_swigt__p_KernelFunctionPtr,
  &_swigt__p_List,
  &_swigt__p_Mask,
  &_swigt__p_MaskPlaneDict,
  &_swigt__p_MaskPtr,
  &_swigt__p_MaskedImageT,
  &_swigt__p_Matrix,
  &_swigt__p_NullSpatialFunction,
  &_swigt__p_ParameterVector,
  &_swigt__p_Pixel,
  &_swigt__p_PixelConstReference,
  &_swigt__p_PixelReference,
  &_swigt__p_PolicyPtrArray,
  &_swigt__p_ProductDerivativeMatrix,
  &_swigt__p_Ptr,
  &_swigt__p_PtrType,
  &_swigt__p_Real,
  &_swigt__p_SinglePixel,
  &_swigt__p_SpanList,
  &_swigt__p_SpatialFunction,
  &_swigt__p_SpatialFunctionPtr,
  &_swigt__p_StreamPtr,
  &_swigt__p_StringArray,
  &_swigt__p_TPtr,
  &_swigt__p_ThresholdType,
  &_swigt__p_TransformDerivativeMatrix,
  &_swigt__p_Type,
  &_swigt__p_Value,
  &_swigt__p_Variance,
  &_swigt__p_VariancePtr,
  &_swigt__p_allocator_type,
  &_swigt__p_bool,
  &_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Amp_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Camera_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Ccd_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorMosaic_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Detector_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__ElectronicParams_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Raft_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__coord__Coord_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__coord__EclipticCoord_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__coord__Fk5Coord_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__coord__GalacticCoord_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__coord__IcrsCoord_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__coord__TopocentricCoord_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__detection__Astrometry_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__detection__BaseSourceAttributesT_lsst__afw__detection__NUM_DIASOURCE_NULLABLE_FIELDS_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__detection__BaseSourceAttributesT_lsst__afw__detection__NUM_SOURCE_NULLABLE_FIELDS_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__detection__DiaSource_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__detection__FootprintSetT_boost__uint16_t_lsst__afw__image__MaskPixel_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__detection__FootprintSetT_double_lsst__afw__image__MaskPixel_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__detection__FootprintSetT_float_lsst__afw__image__MaskPixel_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__detection__FootprintSetT_int_lsst__afw__image__MaskPixel_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__detection__Footprint_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__detection__KernelPsf_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__detection__MeasurementT_lsst__afw__detection__Astrometry_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__detection__MeasurementT_lsst__afw__detection__Photometry_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__detection__MeasurementT_lsst__afw__detection__Shape_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__detection__Peak_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__detection__PersistableDiaSourceVector_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__detection__PersistableSourceVector_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__detection__Photometry_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__detection__Psf_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__detection__SchemaEntry_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__detection__Schema_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__detection__Shape_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__detection__Source_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__detection__Span_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__AffineTransform_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__AxesEllipse_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseEllipse_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__DistortionEllipse_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Distortion_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__LogShearEllipse_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__LogShear_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__QuadrupoleEllipse_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__Calib_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_boost__uint16_t_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_int_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__DefectBase_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_boost__uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_boost__uint16_t_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_int_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_boost__uint16_t_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_int_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__MaskT_boost__uint16_t_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_boost__uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__TanWcs_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__image__Wcs_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__DeltaFunctionKernel_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__FftLocalKernel_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__FixedKernel_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__FourierCutoutStack_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__FourierCutout_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__FourierLocalKernel_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__ImageLocalKernel_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__Kernel_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_double_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_float_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellCandidate_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_lsst__afw__image__ImageT_double_t_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_lsst__afw__image__ImageT_float_t_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_lsst__afw__image__MaskedImageT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t_t,
  &_swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCell_t,
  &_swigt__p_boost__shared_ptrT_lsst__daf__base__Citizen_t,
  &_swigt__p_boost__shared_ptrT_lsst__daf__base__Persistable_t,
  &_swigt__p_boost__shared_ptrT_lsst__daf__base__PropertySet_t,
  &_swigt__p_boost__shared_ptrT_lsst__daf__data__LsstBase_t,
  &_swigt__p_boost__shared_ptrT_lsst__daf__data__LsstData_t,
  &_swigt__p_boost__shared_ptrT_lsst__daf__data__LsstImpl_DC3_t,
  &_swigt__p_boost__shared_ptrT_lsst__daf__data__Provenance_t,
  &_swigt__p_boost__shared_ptrT_lsst__daf__data__ReleaseProcess_t,
  &_swigt__p_boost__shared_ptrT_lsst__daf__persistence__DbStorage_t,
  &_swigt__p_boost__shared_ptrT_lsst__daf__persistence__DbTsvStorage_t,
  &_swigt__p_boost__shared_ptrT_lsst__daf__persistence__LogicalLocation_t,
  &_swigt__p_boost__shared_ptrT_lsst__daf__persistence__Persistence_t,
  &_swigt__p_boost__shared_ptrT_lsst__daf__persistence__Storage_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__logging__BriefFormatter_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__logging__FileDestination_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__logging__IndentedFormatter_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__logging__LogDestination_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__logging__LogFormatter_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__logging__NetLoggerFormatter_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__policy__DefaultPolicyFile_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__policy__Definition_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__policy__Dictionary_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyDestination_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyFile_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicySource_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyStreamDestination_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyStringDestination_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyString_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__policy__Policy_t,
  &_swigt__p_boost__shared_ptrT_lsst__pex__policy__UrnPolicyFile_t,
  &_swigt__p_boost__shared_ptrT_lsst__security__Security_t,
  &_swigt__p_char,
  &_swigt__p_char_type,
  &_swigt__p_const_iterator,
  &_swigt__p_const_reference,
  &_swigt__p_const_reverse_iterator,
  &_swigt__p_const_x_iterator,
  &_swigt__p_const_xy_locator,
  &_swigt__p_const_y_iterator,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_f_enum_std__ios_base__event_r_std__ios_base_int__void,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__ios_base,
  &_swigt__p_fast_iterator,
  &_swigt__p_first_type,
  &_swigt__p_float,
  &_swigt__p_fmtflags,
  &_swigt__p_image_category,
  &_swigt__p_int,
  &_swigt__p_int_type,
  &_swigt__p_iostate,
  &_swigt__p_iterator,
  &_swigt__p_kernel_fill_factor,
  &_swigt__p_key_type,
  &_swigt__p_long,
  &_swigt__p_long_double,
  &_swigt__p_long_long,
  &_swigt__p_lsst__afw__geom__CoordinateExprT_2_t,
  &_swigt__p_lsst__afw__geom__CoordinateExprT_3_t,
  &_swigt__p_lsst__afw__geom__ExtentT_double_2_t,
  &_swigt__p_lsst__afw__geom__ExtentT_double_3_t,
  &_swigt__p_lsst__afw__geom__ExtentT_int_2_t,
  &_swigt__p_lsst__afw__geom__ExtentT_int_3_t,
  &_swigt__p_lsst__afw__geom__PointT_double_2_t,
  &_swigt__p_lsst__afw__geom__PointT_double_3_t,
  &_swigt__p_lsst__afw__geom__PointT_int_2_t,
  &_swigt__p_lsst__afw__geom__PointT_int_3_t,
  &_swigt__p_lsst__afw__geom__ellipses__Axes,
  &_swigt__p_lsst__afw__geom__ellipses__AxesEllipse,
  &_swigt__p_lsst__afw__geom__ellipses__BaseCore,
  &_swigt__p_lsst__afw__geom__ellipses__BaseEllipse,
  &_swigt__p_lsst__afw__geom__ellipses__Distortion,
  &_swigt__p_lsst__afw__geom__ellipses__DistortionEllipse,
  &_swigt__p_lsst__afw__geom__ellipses__LogShear,
  &_swigt__p_lsst__afw__geom__ellipses__LogShearEllipse,
  &_swigt__p_lsst__afw__geom__ellipses__Quadrupole,
  &_swigt__p_lsst__afw__geom__ellipses__QuadrupoleEllipse,
  &_swigt__p_lsst__afw__image__PointT_double_t,
  &_swigt__p_lsst__afw__image__PointT_int_t,
  &_swigt__p_lsst__daf__base__TypeMismatchException,
  &_swigt__p_lsst__pex__exceptions__DomainErrorException,
  &_swigt__p_lsst__pex__exceptions__InvalidParameterException,
  &_swigt__p_lsst__pex__exceptions__IoErrorException,
  &_swigt__p_lsst__pex__exceptions__LengthErrorException,
  &_swigt__p_lsst__pex__exceptions__LogicErrorException,
  &_swigt__p_lsst__pex__exceptions__MemoryException,
  &_swigt__p_lsst__pex__exceptions__NotFoundException,
  &_swigt__p_lsst__pex__exceptions__OutOfRangeException,
  &_swigt__p_lsst__pex__exceptions__OverflowErrorException,
  &_swigt__p_lsst__pex__exceptions__RangeErrorException,
  &_swigt__p_lsst__pex__exceptions__RuntimeErrorException,
  &_swigt__p_lsst__pex__exceptions__TimeoutException,
  &_swigt__p_lsst__pex__exceptions__UnderflowErrorException,
  &_swigt__p_lsst__pex__logging__LogRec,
  &_swigt__p_lsst__pex__policy__BadNameError,
  &_swigt__p_lsst__pex__policy__DictionaryError,
  &_swigt__p_lsst__pex__policy__EOFError,
  &_swigt__p_lsst__pex__policy__FormatSyntaxError,
  &_swigt__p_lsst__pex__policy__NameNotFound,
  &_swigt__p_lsst__pex__policy__ParserError,
  &_swigt__p_lsst__pex__policy__SyntaxError,
  &_swigt__p_lsst__pex__policy__TypeError,
  &_swigt__p_lsst__pex__policy__UnsupportedSyntax,
  &_swigt__p_lsst__pex__policy__ValidationError,
  &_swigt__p_mapped_type,
  &_swigt__p_memId,
  &_swigt__p_off_type,
  &_swigt__p_openmode,
  &_swigt__p_p_PyObject,
  &_swigt__p_p_void,
  &_swigt__p_pos_type,
  &_swigt__p_reference,
  &_swigt__p_reverse_iterator,
  &_swigt__p_second_type,
  &_swigt__p_seekdir,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_t,
  &_swigt__p_size_type,
  &_swigt__p_state_type,
  &_swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__char_type,
  &_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__off_type,
  &_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type,
  &_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__off_type,
  &_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type,
  &_swigt__p_std__basic_streambufT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__ios_base,
  &_swigt__p_std__locale,
  &_swigt__p_std__vectorT_boost__shared_ptrT_lsst__afw__detection__DiaSource_t_std__allocatorT_boost__shared_ptrT_lsst__afw__detection__DiaSource_t_t_t,
  &_swigt__p_std__vectorT_boost__shared_ptrT_lsst__afw__detection__Source_t_std__allocatorT_boost__shared_ptrT_lsst__afw__detection__Source_t_t_t,
  &_swigt__p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t,
  &_swigt__p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t__allocator_type,
  &_swigt__p_std__vectorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__allocatorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_t_t,
  &_swigt__p_std__vectorT_lsst__pex__exceptions__Tracepoint_std__allocatorT_lsst__pex__exceptions__Tracepoint_t_t,
  &_swigt__p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t,
  &_swigt__p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t__allocator_type,
  &_swigt__p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t,
  &_swigt__p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t__allocator_type,
  &_swigt__p_swig__PySwigIterator,
  &_swigt__p_traits_type,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
  &_swigt__p_x_iterator,
  &_swigt__p_xy_locator,
  &_swigt__p_xy_x_iterator,
  &_swigt__p_xy_y_iterator,
  &_swigt__p_y_iterator,
};

static swig_cast_info _swigc__p_AmpSet[] = {  {&_swigt__p_AmpSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BoolArray[] = {  {&_swigt__p_BoolArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CandidateList[] = {  {&_swigt__p_CandidateList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CellList[] = {  {&_swigt__p_CellList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Complex[] = {  {&_swigt__p_Complex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstDictPtr[] = {  {&_swigt__p_ConstDictPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstPolicyPtrArray[] = {  {&_swigt__p_ConstPolicyPtrArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstPtr[] = {  {&_swigt__p_ConstPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Container[] = {  {&_swigt__p_Container, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ContainerIterator[] = {  {&_swigt__p_ContainerIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Core[] = {  {&_swigt__p_Core, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CovariancePtr[] = {  {&_swigt__p_CovariancePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DetectorSet[] = {  {&_swigt__p_DetectorSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DictPtr[] = {  {&_swigt__p_DictPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DoubleArray[] = {  {&_swigt__p_DoubleArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EigenVector[] = {  {&_swigt__p_EigenVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Element[] = {  {&_swigt__p_Element, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ellipse[] = {  {&_swigt__p_Ellipse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Envelope[] = {  {&_swigt__p_Envelope, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FilePtr[] = {  {&_swigt__p_FilePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FilePtrArray[] = {  {&_swigt__p_FilePtrArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FootprintList[] = {  {&_swigt__p_FootprintList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FourierCutoutVector[] = {  {&_swigt__p_FourierCutoutVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Function1Ptr[] = {  {&_swigt__p_Function1Ptr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Function2Ptr[] = {  {&_swigt__p_Function2Ptr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Image[] = {  {&_swigt__p_Image, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImageConstPtr[] = {  {&_swigt__p_ImageConstPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImageList[] = {  {&_swigt__p_ImageList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImagePtr[] = {  {&_swigt__p_ImagePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImagePtrList[] = {  {&_swigt__p_ImagePtrList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IntArray[] = {  {&_swigt__p_IntArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IteratorRange[] = {  {&_swigt__p_IteratorRange, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Jacobian[] = {  {&_swigt__p_Jacobian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KernelFunction[] = {  {&_swigt__p_KernelFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KernelFunctionPtr[] = {  {&_swigt__p_KernelFunctionPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_List[] = {  {&_swigt__p_List, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mask[] = {  {&_swigt__p_Mask, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MaskPlaneDict[] = {  {&_swigt__p_MaskPlaneDict, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MaskPtr[] = {  {&_swigt__p_MaskPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MaskedImageT[] = {  {&_swigt__p_MaskedImageT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Matrix[] = {  {&_swigt__p_Matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NullSpatialFunction[] = {  {&_swigt__p_NullSpatialFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ParameterVector[] = {  {&_swigt__p_ParameterVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pixel[] = {  {&_swigt__p_Pixel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PixelConstReference[] = {  {&_swigt__p_PixelConstReference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PixelReference[] = {  {&_swigt__p_PixelReference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PolicyPtrArray[] = {  {&_swigt__p_PolicyPtrArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ProductDerivativeMatrix[] = {  {&_swigt__p_ProductDerivativeMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ptr[] = {  {&_swigt__p_Ptr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PtrType[] = {  {&_swigt__p_PtrType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Real[] = {  {&_swigt__p_Real, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SinglePixel[] = {  {&_swigt__p_SinglePixel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpanList[] = {  {&_swigt__p_SpanList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpatialFunction[] = {  {&_swigt__p_SpatialFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpatialFunctionPtr[] = {  {&_swigt__p_SpatialFunctionPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StreamPtr[] = {  {&_swigt__p_StreamPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StringArray[] = {  {&_swigt__p_StringArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TPtr[] = {  {&_swigt__p_TPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ThresholdType[] = {  {&_swigt__p_ThresholdType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TransformDerivativeMatrix[] = {  {&_swigt__p_TransformDerivativeMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Type[] = {  {&_swigt__p_Type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Value[] = {  {&_swigt__p_Value, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Variance[] = {  {&_swigt__p_Variance, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VariancePtr[] = {  {&_swigt__p_VariancePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__Amp_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Amp_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__Camera_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Camera_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__Ccd_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Ccd_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorMosaic_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorMosaic_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__Detector_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Detector_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__ElectronicParams_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__ElectronicParams_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__Raft_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__cameraGeom__Raft_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__coord__Coord_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__coord__Coord_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__coord__EclipticCoord_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__coord__EclipticCoord_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__coord__Fk5Coord_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__coord__Fk5Coord_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__coord__GalacticCoord_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__coord__GalacticCoord_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__coord__IcrsCoord_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__coord__IcrsCoord_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__coord__TopocentricCoord_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__coord__TopocentricCoord_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__detection__Astrometry_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__Astrometry_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__detection__BaseSourceAttributesT_lsst__afw__detection__NUM_DIASOURCE_NULLABLE_FIELDS_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__BaseSourceAttributesT_lsst__afw__detection__NUM_DIASOURCE_NULLABLE_FIELDS_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__detection__BaseSourceAttributesT_lsst__afw__detection__NUM_SOURCE_NULLABLE_FIELDS_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__BaseSourceAttributesT_lsst__afw__detection__NUM_SOURCE_NULLABLE_FIELDS_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__detection__DiaSource_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__DiaSource_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__detection__FootprintSetT_boost__uint16_t_lsst__afw__image__MaskPixel_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__FootprintSetT_boost__uint16_t_lsst__afw__image__MaskPixel_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__detection__FootprintSetT_double_lsst__afw__image__MaskPixel_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__FootprintSetT_double_lsst__afw__image__MaskPixel_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__detection__FootprintSetT_float_lsst__afw__image__MaskPixel_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__FootprintSetT_float_lsst__afw__image__MaskPixel_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__detection__FootprintSetT_int_lsst__afw__image__MaskPixel_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__FootprintSetT_int_lsst__afw__image__MaskPixel_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__detection__Footprint_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__Footprint_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__detection__KernelPsf_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__KernelPsf_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__detection__MeasurementT_lsst__afw__detection__Astrometry_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__MeasurementT_lsst__afw__detection__Astrometry_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__detection__MeasurementT_lsst__afw__detection__Photometry_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__MeasurementT_lsst__afw__detection__Photometry_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__detection__MeasurementT_lsst__afw__detection__Shape_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__MeasurementT_lsst__afw__detection__Shape_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__detection__Peak_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__Peak_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__detection__PersistableDiaSourceVector_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__PersistableDiaSourceVector_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__detection__PersistableSourceVector_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__PersistableSourceVector_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__detection__Photometry_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__Photometry_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__detection__Psf_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__Psf_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__detection__SchemaEntry_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__SchemaEntry_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__detection__Schema_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__Schema_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__detection__Shape_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__Shape_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__detection__Source_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__Source_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__detection__Span_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__detection__Span_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__AffineTransform_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__AffineTransform_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__AxesEllipse_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__AxesEllipse_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseEllipse_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseEllipse_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__DistortionEllipse_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__DistortionEllipse_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Distortion_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Distortion_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__LogShearEllipse_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__LogShearEllipse_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__LogShear_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__LogShear_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__QuadrupoleEllipse_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__QuadrupoleEllipse_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__Calib_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__Calib_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_boost__uint16_t_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_boost__uint16_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_int_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__DefectBase_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__DefectBase_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__ExposureT_boost__uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_boost__uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__ExposureT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ExposureT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_boost__uint16_t_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_boost__uint16_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_int_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageT_boost__uint16_t_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_boost__uint16_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageT_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageT_int_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__ImageT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__MaskT_boost__uint16_t_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__MaskT_boost__uint16_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_boost__uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_boost__uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__TanWcs_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__TanWcs_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__image__Wcs_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__image__Wcs_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__DeltaFunctionKernel_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__DeltaFunctionKernel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__FftLocalKernel_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__FftLocalKernel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__FixedKernel_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__FixedKernel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__FourierCutoutStack_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__FourierCutoutStack_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__FourierCutout_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__FourierCutout_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__FourierLocalKernel_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__FourierLocalKernel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__ImageLocalKernel_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__ImageLocalKernel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__Kernel_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__Kernel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_double_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_float_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__SpatialCellCandidate_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellCandidate_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_lsst__afw__image__ImageT_double_t_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_lsst__afw__image__ImageT_double_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_lsst__afw__image__ImageT_float_t_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_lsst__afw__image__ImageT_float_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_lsst__afw__image__MaskedImageT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_lsst__afw__image__MaskedImageT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__afw__math__SpatialCell_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__afw__math__SpatialCell_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__daf__base__Citizen_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__daf__base__Citizen_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__daf__base__Persistable_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__daf__base__Persistable_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__daf__base__PropertySet_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__daf__base__PropertySet_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__daf__data__LsstBase_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__daf__data__LsstBase_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__daf__data__LsstData_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__daf__data__LsstData_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__daf__data__LsstImpl_DC3_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__daf__data__LsstImpl_DC3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__daf__data__Provenance_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__daf__data__Provenance_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__daf__data__ReleaseProcess_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__daf__data__ReleaseProcess_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__daf__persistence__DbStorage_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__daf__persistence__DbStorage_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__daf__persistence__DbTsvStorage_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__daf__persistence__DbTsvStorage_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__daf__persistence__LogicalLocation_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__daf__persistence__LogicalLocation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__daf__persistence__Persistence_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__daf__persistence__Persistence_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__daf__persistence__Storage_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__daf__persistence__Storage_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__logging__BriefFormatter_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__logging__BriefFormatter_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__logging__FileDestination_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__logging__FileDestination_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__logging__IndentedFormatter_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__logging__IndentedFormatter_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__logging__LogDestination_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__logging__LogDestination_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__logging__LogFormatter_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__logging__LogFormatter_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__logging__NetLoggerFormatter_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__logging__NetLoggerFormatter_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__policy__DefaultPolicyFile_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__DefaultPolicyFile_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__policy__Definition_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__Definition_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__policy__Dictionary_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__Dictionary_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__policy__PolicyDestination_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyDestination_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__policy__PolicyFile_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyFile_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__policy__PolicySource_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicySource_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__policy__PolicyStreamDestination_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyStreamDestination_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__policy__PolicyStringDestination_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyStringDestination_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__policy__PolicyString_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__PolicyString_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__policy__Policy_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__Policy_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__pex__policy__UrnPolicyFile_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__pex__policy__UrnPolicyFile_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_lsst__security__Security_t[] = {  {&_swigt__p_boost__shared_ptrT_lsst__security__Security_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__char_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char_type[] = {  {&_swigt__p_char_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_iterator[] = {  {&_swigt__p_const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_reference[] = {  {&_swigt__p_const_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_reverse_iterator[] = {  {&_swigt__p_const_reverse_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_x_iterator[] = {  {&_swigt__p_const_x_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_xy_locator[] = {  {&_swigt__p_const_xy_locator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_y_iterator[] = {  {&_swigt__p_const_y_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_enum_std__ios_base__event_r_std__ios_base_int__void[] = {  {&_swigt__p_f_enum_std__ios_base__event_r_std__ios_base_int__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__ios_base[] = {  {&_swigt__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__ios_base, 0, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t, _p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fast_iterator[] = {  {&_swigt__p_fast_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_first_type[] = {  {&_swigt__p_first_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fmtflags[] = {  {&_swigt__p_fmtflags, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_image_category[] = {  {&_swigt__p_image_category, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int_type[] = {  {&_swigt__p_int_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iostate[] = {  {&_swigt__p_iostate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator[] = {  {&_swigt__p_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kernel_fill_factor[] = {  {&_swigt__p_kernel_fill_factor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_double[] = {  {&_swigt__p_long_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__CoordinateExprT_2_t[] = {  {&_swigt__p_lsst__afw__geom__CoordinateExprT_2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__CoordinateExprT_3_t[] = {  {&_swigt__p_lsst__afw__geom__CoordinateExprT_3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ExtentT_double_2_t[] = {  {&_swigt__p_lsst__afw__geom__ExtentT_double_2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ExtentT_double_3_t[] = {  {&_swigt__p_lsst__afw__geom__ExtentT_double_3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ExtentT_int_2_t[] = {  {&_swigt__p_lsst__afw__geom__ExtentT_int_2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ExtentT_int_3_t[] = {  {&_swigt__p_lsst__afw__geom__ExtentT_int_3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__PointT_double_2_t[] = {  {&_swigt__p_lsst__afw__geom__PointT_double_2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__PointT_double_3_t[] = {  {&_swigt__p_lsst__afw__geom__PointT_double_3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__PointT_int_2_t[] = {  {&_swigt__p_lsst__afw__geom__PointT_int_2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__PointT_int_3_t[] = {  {&_swigt__p_lsst__afw__geom__PointT_int_3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__Quadrupole[] = {{&_swigt__p_lsst__afw__geom__ellipses__Quadrupole, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__Distortion[] = {{&_swigt__p_lsst__afw__geom__ellipses__Distortion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__Axes[] = {{&_swigt__p_lsst__afw__geom__ellipses__Axes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__LogShear[] = {{&_swigt__p_lsst__afw__geom__ellipses__LogShear, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__BaseCore[] = {  {&_swigt__p_lsst__afw__geom__ellipses__BaseCore, 0, 0, 0},  {&_swigt__p_lsst__afw__geom__ellipses__Quadrupole, _p_lsst__afw__geom__ellipses__QuadrupoleTo_p_lsst__afw__geom__ellipses__BaseCore, 0, 0},  {&_swigt__p_lsst__afw__geom__ellipses__Distortion, _p_lsst__afw__geom__ellipses__DistortionTo_p_lsst__afw__geom__ellipses__BaseCore, 0, 0},  {&_swigt__p_lsst__afw__geom__ellipses__Axes, _p_lsst__afw__geom__ellipses__AxesTo_p_lsst__afw__geom__ellipses__BaseCore, 0, 0},  {&_swigt__p_lsst__afw__geom__ellipses__LogShear, _p_lsst__afw__geom__ellipses__LogShearTo_p_lsst__afw__geom__ellipses__BaseCore, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__AxesEllipse[] = {{&_swigt__p_lsst__afw__geom__ellipses__AxesEllipse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__DistortionEllipse[] = {{&_swigt__p_lsst__afw__geom__ellipses__DistortionEllipse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__QuadrupoleEllipse[] = {{&_swigt__p_lsst__afw__geom__ellipses__QuadrupoleEllipse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__LogShearEllipse[] = {{&_swigt__p_lsst__afw__geom__ellipses__LogShearEllipse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__geom__ellipses__BaseEllipse[] = {  {&_swigt__p_lsst__afw__geom__ellipses__BaseEllipse, 0, 0, 0},  {&_swigt__p_lsst__afw__geom__ellipses__AxesEllipse, _p_lsst__afw__geom__ellipses__AxesEllipseTo_p_lsst__afw__geom__ellipses__BaseEllipse, 0, 0},  {&_swigt__p_lsst__afw__geom__ellipses__DistortionEllipse, _p_lsst__afw__geom__ellipses__DistortionEllipseTo_p_lsst__afw__geom__ellipses__BaseEllipse, 0, 0},  {&_swigt__p_lsst__afw__geom__ellipses__QuadrupoleEllipse, _p_lsst__afw__geom__ellipses__QuadrupoleEllipseTo_p_lsst__afw__geom__ellipses__BaseEllipse, 0, 0},  {&_swigt__p_lsst__afw__geom__ellipses__LogShearEllipse, _p_lsst__afw__geom__ellipses__LogShearEllipseTo_p_lsst__afw__geom__ellipses__BaseEllipse, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__PointT_double_t[] = {  {&_swigt__p_lsst__afw__image__PointT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__afw__image__PointT_int_t[] = {  {&_swigt__p_lsst__afw__image__PointT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__policy__DictionaryError[] = {{&_swigt__p_lsst__pex__policy__DictionaryError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__policy__TypeError[] = {{&_swigt__p_lsst__pex__policy__TypeError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__exceptions__DomainErrorException[] = {  {&_swigt__p_lsst__pex__exceptions__DomainErrorException, 0, 0, 0},  {&_swigt__p_lsst__pex__policy__DictionaryError, _p_lsst__pex__policy__DictionaryErrorTo_p_lsst__pex__exceptions__DomainErrorException, 0, 0},  {&_swigt__p_lsst__pex__policy__TypeError, _p_lsst__pex__policy__TypeErrorTo_p_lsst__pex__exceptions__DomainErrorException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__exceptions__InvalidParameterException[] = {  {&_swigt__p_lsst__pex__exceptions__InvalidParameterException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__exceptions__IoErrorException[] = {  {&_swigt__p_lsst__pex__exceptions__IoErrorException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__exceptions__LengthErrorException[] = {  {&_swigt__p_lsst__pex__exceptions__LengthErrorException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__policy__ValidationError[] = {{&_swigt__p_lsst__pex__policy__ValidationError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__daf__base__TypeMismatchException[] = {{&_swigt__p_lsst__daf__base__TypeMismatchException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__exceptions__LogicErrorException[] = {  {&_swigt__p_lsst__pex__policy__ValidationError, _p_lsst__pex__policy__ValidationErrorTo_p_lsst__pex__exceptions__LogicErrorException, 0, 0},  {&_swigt__p_lsst__pex__exceptions__LogicErrorException, 0, 0, 0},  {&_swigt__p_lsst__pex__exceptions__DomainErrorException, _p_lsst__pex__exceptions__DomainErrorExceptionTo_p_lsst__pex__exceptions__LogicErrorException, 0, 0},  {&_swigt__p_lsst__pex__exceptions__LengthErrorException, _p_lsst__pex__exceptions__LengthErrorExceptionTo_p_lsst__pex__exceptions__LogicErrorException, 0, 0},  {&_swigt__p_lsst__pex__exceptions__OutOfRangeException, _p_lsst__pex__exceptions__OutOfRangeExceptionTo_p_lsst__pex__exceptions__LogicErrorException, 0, 0},  {&_swigt__p_lsst__daf__base__TypeMismatchException, _p_lsst__daf__base__TypeMismatchExceptionTo_p_lsst__pex__exceptions__LogicErrorException, 0, 0},  {&_swigt__p_lsst__pex__policy__DictionaryError, _p_lsst__pex__policy__DictionaryErrorTo_p_lsst__pex__exceptions__LogicErrorException, 0, 0},  {&_swigt__p_lsst__pex__policy__TypeError, _p_lsst__pex__policy__TypeErrorTo_p_lsst__pex__exceptions__LogicErrorException, 0, 0},  {&_swigt__p_lsst__pex__exceptions__InvalidParameterException, _p_lsst__pex__exceptions__InvalidParameterExceptionTo_p_lsst__pex__exceptions__LogicErrorException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__exceptions__MemoryException[] = {  {&_swigt__p_lsst__pex__exceptions__MemoryException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__policy__NameNotFound[] = {{&_swigt__p_lsst__pex__policy__NameNotFound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__exceptions__NotFoundException[] = {  {&_swigt__p_lsst__pex__exceptions__NotFoundException, 0, 0, 0},  {&_swigt__p_lsst__pex__policy__NameNotFound, _p_lsst__pex__policy__NameNotFoundTo_p_lsst__pex__exceptions__NotFoundException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__exceptions__OutOfRangeException[] = {  {&_swigt__p_lsst__pex__exceptions__OutOfRangeException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__exceptions__OverflowErrorException[] = {  {&_swigt__p_lsst__pex__exceptions__OverflowErrorException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__exceptions__RangeErrorException[] = {  {&_swigt__p_lsst__pex__exceptions__RangeErrorException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__policy__UnsupportedSyntax[] = {{&_swigt__p_lsst__pex__policy__UnsupportedSyntax, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__policy__ParserError[] = {{&_swigt__p_lsst__pex__policy__ParserError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__policy__BadNameError[] = {{&_swigt__p_lsst__pex__policy__BadNameError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__policy__EOFError[] = {{&_swigt__p_lsst__pex__policy__EOFError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__policy__SyntaxError[] = {{&_swigt__p_lsst__pex__policy__SyntaxError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__policy__FormatSyntaxError[] = {{&_swigt__p_lsst__pex__policy__FormatSyntaxError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__exceptions__RuntimeErrorException[] = {  {&_swigt__p_lsst__pex__policy__UnsupportedSyntax, _p_lsst__pex__policy__UnsupportedSyntaxTo_p_lsst__pex__exceptions__RuntimeErrorException, 0, 0},  {&_swigt__p_lsst__pex__exceptions__RuntimeErrorException, 0, 0, 0},  {&_swigt__p_lsst__pex__exceptions__RangeErrorException, _p_lsst__pex__exceptions__RangeErrorExceptionTo_p_lsst__pex__exceptions__RuntimeErrorException, 0, 0},  {&_swigt__p_lsst__pex__exceptions__OverflowErrorException, _p_lsst__pex__exceptions__OverflowErrorExceptionTo_p_lsst__pex__exceptions__RuntimeErrorException, 0, 0},  {&_swigt__p_lsst__pex__exceptions__UnderflowErrorException, _p_lsst__pex__exceptions__UnderflowErrorExceptionTo_p_lsst__pex__exceptions__RuntimeErrorException, 0, 0},  {&_swigt__p_lsst__pex__exceptions__MemoryException, _p_lsst__pex__exceptions__MemoryExceptionTo_p_lsst__pex__exceptions__RuntimeErrorException, 0, 0},  {&_swigt__p_lsst__pex__exceptions__IoErrorException, _p_lsst__pex__exceptions__IoErrorExceptionTo_p_lsst__pex__exceptions__RuntimeErrorException, 0, 0},  {&_swigt__p_lsst__pex__exceptions__TimeoutException, _p_lsst__pex__exceptions__TimeoutExceptionTo_p_lsst__pex__exceptions__RuntimeErrorException, 0, 0},  {&_swigt__p_lsst__pex__policy__ParserError, _p_lsst__pex__policy__ParserErrorTo_p_lsst__pex__exceptions__RuntimeErrorException, 0, 0},  {&_swigt__p_lsst__pex__policy__BadNameError, _p_lsst__pex__policy__BadNameErrorTo_p_lsst__pex__exceptions__RuntimeErrorException, 0, 0},  {&_swigt__p_lsst__pex__policy__EOFError, _p_lsst__pex__policy__EOFErrorTo_p_lsst__pex__exceptions__RuntimeErrorException, 0, 0},  {&_swigt__p_lsst__pex__policy__SyntaxError, _p_lsst__pex__policy__SyntaxErrorTo_p_lsst__pex__exceptions__RuntimeErrorException, 0, 0},  {&_swigt__p_lsst__pex__policy__FormatSyntaxError, _p_lsst__pex__policy__FormatSyntaxErrorTo_p_lsst__pex__exceptions__RuntimeErrorException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__exceptions__TimeoutException[] = {  {&_swigt__p_lsst__pex__exceptions__TimeoutException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__exceptions__UnderflowErrorException[] = {  {&_swigt__p_lsst__pex__exceptions__UnderflowErrorException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lsst__pex__logging__LogRec[] = {  {&_swigt__p_lsst__pex__logging__LogRec, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapped_type[] = {  {&_swigt__p_mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_memId[] = {  {&_swigt__p_memId, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_off_type[] = {  {&_swigt__p_off_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_openmode[] = {  {&_swigt__p_openmode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pos_type[] = {  {&_swigt__p_pos_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_reference[] = {  {&_swigt__p_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_reverse_iterator[] = {  {&_swigt__p_reverse_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_second_type[] = {  {&_swigt__p_second_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_seekdir[] = {  {&_swigt__p_seekdir, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_state_type[] = {  {&_swigt__p_state_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_iosT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__char_type[] = {  {&_swigt__p_char, 0, 0, 0},  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__char_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__off_type[] = {  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__off_type, 0, 0, 0},  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__off_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type[] = {  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type, 0, 0, 0},  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__off_type[] = {  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__off_type, 0, 0, 0},  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__off_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type[] = {  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type, 0, 0, 0},  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_streambufT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t[] = {  {&_swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ios_base[] = {  {&_swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t, _p_std__basic_iosT_char_std__char_traitsT_char_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__ios_base, 0, 0, 0},  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__locale[] = {  {&_swigt__p_std__locale, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_boost__shared_ptrT_lsst__afw__detection__DiaSource_t_std__allocatorT_boost__shared_ptrT_lsst__afw__detection__DiaSource_t_t_t[] = {  {&_swigt__p_std__vectorT_boost__shared_ptrT_lsst__afw__detection__DiaSource_t_std__allocatorT_boost__shared_ptrT_lsst__afw__detection__DiaSource_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_boost__shared_ptrT_lsst__afw__detection__Source_t_std__allocatorT_boost__shared_ptrT_lsst__afw__detection__Source_t_t_t[] = {  {&_swigt__p_std__vectorT_boost__shared_ptrT_lsst__afw__detection__Source_t_std__allocatorT_boost__shared_ptrT_lsst__afw__detection__Source_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t[] = {  {&_swigt__p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__allocatorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_t_t[] = {  {&_swigt__p_std__vectorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__allocatorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_lsst__pex__exceptions__Tracepoint_std__allocatorT_lsst__pex__exceptions__Tracepoint_t_t[] = {  {&_swigt__p_std__vectorT_lsst__pex__exceptions__Tracepoint_std__allocatorT_lsst__pex__exceptions__Tracepoint_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__PySwigIterator[] = {  {&_swigt__p_swig__PySwigIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_traits_type[] = {  {&_swigt__p_traits_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_x_iterator[] = {  {&_swigt__p_x_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xy_locator[] = {  {&_swigt__p_xy_locator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xy_x_iterator[] = {  {&_swigt__p_xy_x_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xy_y_iterator[] = {  {&_swigt__p_xy_y_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_y_iterator[] = {  {&_swigt__p_y_iterator, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_AmpSet,
  _swigc__p_BoolArray,
  _swigc__p_CandidateList,
  _swigc__p_CellList,
  _swigc__p_Complex,
  _swigc__p_ConstDictPtr,
  _swigc__p_ConstPolicyPtrArray,
  _swigc__p_ConstPtr,
  _swigc__p_Container,
  _swigc__p_ContainerIterator,
  _swigc__p_Core,
  _swigc__p_CovariancePtr,
  _swigc__p_DetectorSet,
  _swigc__p_DictPtr,
  _swigc__p_DoubleArray,
  _swigc__p_EigenVector,
  _swigc__p_Element,
  _swigc__p_Ellipse,
  _swigc__p_Envelope,
  _swigc__p_FilePtr,
  _swigc__p_FilePtrArray,
  _swigc__p_FootprintList,
  _swigc__p_FourierCutoutVector,
  _swigc__p_Function1Ptr,
  _swigc__p_Function2Ptr,
  _swigc__p_Image,
  _swigc__p_ImageConstPtr,
  _swigc__p_ImageList,
  _swigc__p_ImagePtr,
  _swigc__p_ImagePtrList,
  _swigc__p_IntArray,
  _swigc__p_IteratorRange,
  _swigc__p_Jacobian,
  _swigc__p_KernelFunction,
  _swigc__p_KernelFunctionPtr,
  _swigc__p_List,
  _swigc__p_Mask,
  _swigc__p_MaskPlaneDict,
  _swigc__p_MaskPtr,
  _swigc__p_MaskedImageT,
  _swigc__p_Matrix,
  _swigc__p_NullSpatialFunction,
  _swigc__p_ParameterVector,
  _swigc__p_Pixel,
  _swigc__p_PixelConstReference,
  _swigc__p_PixelReference,
  _swigc__p_PolicyPtrArray,
  _swigc__p_ProductDerivativeMatrix,
  _swigc__p_Ptr,
  _swigc__p_PtrType,
  _swigc__p_Real,
  _swigc__p_SinglePixel,
  _swigc__p_SpanList,
  _swigc__p_SpatialFunction,
  _swigc__p_SpatialFunctionPtr,
  _swigc__p_StreamPtr,
  _swigc__p_StringArray,
  _swigc__p_TPtr,
  _swigc__p_ThresholdType,
  _swigc__p_TransformDerivativeMatrix,
  _swigc__p_Type,
  _swigc__p_Value,
  _swigc__p_Variance,
  _swigc__p_VariancePtr,
  _swigc__p_allocator_type,
  _swigc__p_bool,
  _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__Amp_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__Camera_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__Ccd_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__DetectorMosaic_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__Detector_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__ElectronicParams_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__cameraGeom__Raft_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__coord__Coord_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__coord__EclipticCoord_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__coord__Fk5Coord_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__coord__GalacticCoord_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__coord__IcrsCoord_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__coord__TopocentricCoord_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__detection__Astrometry_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__detection__BaseSourceAttributesT_lsst__afw__detection__NUM_DIASOURCE_NULLABLE_FIELDS_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__detection__BaseSourceAttributesT_lsst__afw__detection__NUM_SOURCE_NULLABLE_FIELDS_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__detection__DiaSource_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__detection__FootprintSetT_boost__uint16_t_lsst__afw__image__MaskPixel_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__detection__FootprintSetT_double_lsst__afw__image__MaskPixel_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__detection__FootprintSetT_float_lsst__afw__image__MaskPixel_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__detection__FootprintSetT_int_lsst__afw__image__MaskPixel_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__detection__Footprint_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__detection__KernelPsf_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__detection__MeasurementT_lsst__afw__detection__Astrometry_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__detection__MeasurementT_lsst__afw__detection__Photometry_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__detection__MeasurementT_lsst__afw__detection__Shape_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__detection__Peak_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__detection__PersistableDiaSourceVector_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__detection__PersistableSourceVector_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__detection__Photometry_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__detection__Psf_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__detection__SchemaEntry_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__detection__Schema_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__detection__Shape_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__detection__Source_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__detection__Span_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__AffineTransform_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__LinearTransform_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__AxesEllipse_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Axes_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseCore_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__BaseEllipse_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__DistortionEllipse_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Distortion_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__LogShearEllipse_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__LogShear_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__QuadrupoleEllipse_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__geom__ellipses__Quadrupole_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__Calib_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_boost__uint16_t_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__DecoratedImageT_int_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__DefectBase_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__ExposureT_boost__uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__ExposureT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__ExposureT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__ExposureT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_boost__uint16_t_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageBaseT_int_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageSliceT_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageT_boost__uint16_t_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageT_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageT_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__ImageT_int_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__MaskT_boost__uint16_t_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_boost__uint16_t_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__MaskedImageT_int_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__TanWcs_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__image__Wcs_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__AnalyticKernel_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__BilinearWarpingKernel_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__Chebyshev1Function1T_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__DeltaFunctionKernel_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__DoubleGaussianFunction2T_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__FftLocalKernel_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__FixedKernel_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__FourierCutoutStack_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__FourierCutout_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__FourierLocalKernel_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__Function1T_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__Function1T_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__Function2T_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__Function2T_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__FunctionT_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__FunctionT_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction1T_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__GaussianFunction2T_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__ImageLocalKernel_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__IntegerDeltaFunction2T_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__Kernel_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction1T_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__LanczosFunction2T_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__LanczosWarpingKernel_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__LinearCombinationKernel_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__NearestWarpingKernel_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__NullFunction1T_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__NullFunction2T_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction1T_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_double_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__PolynomialFunction2T_float_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__SeparableKernel_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__SpatialCellCandidate_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_lsst__afw__image__ImageT_double_t_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_lsst__afw__image__ImageT_float_t_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_lsst__afw__image__MaskedImageT_double_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__SpatialCellImageCandidateT_lsst__afw__image__MaskedImageT_float_lsst__afw__image__MaskPixel_lsst__afw__image__VariancePixel_t_t_t,
  _swigc__p_boost__shared_ptrT_lsst__afw__math__SpatialCell_t,
  _swigc__p_boost__shared_ptrT_lsst__daf__base__Citizen_t,
  _swigc__p_boost__shared_ptrT_lsst__daf__base__Persistable_t,
  _swigc__p_boost__shared_ptrT_lsst__daf__base__PropertySet_t,
  _swigc__p_boost__shared_ptrT_lsst__daf__data__LsstBase_t,
  _swigc__p_boost__shared_ptrT_lsst__daf__data__LsstData_t,
  _swigc__p_boost__shared_ptrT_lsst__daf__data__LsstImpl_DC3_t,
  _swigc__p_boost__shared_ptrT_lsst__daf__data__Provenance_t,
  _swigc__p_boost__shared_ptrT_lsst__daf__data__ReleaseProcess_t,
  _swigc__p_boost__shared_ptrT_lsst__daf__persistence__DbStorage_t,
  _swigc__p_boost__shared_ptrT_lsst__daf__persistence__DbTsvStorage_t,
  _swigc__p_boost__shared_ptrT_lsst__daf__persistence__LogicalLocation_t,
  _swigc__p_boost__shared_ptrT_lsst__daf__persistence__Persistence_t,
  _swigc__p_boost__shared_ptrT_lsst__daf__persistence__Storage_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__logging__BriefFormatter_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__logging__FileDestination_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__logging__IndentedFormatter_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__logging__LogDestination_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__logging__LogFormatter_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__logging__NetLoggerFormatter_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__policy__DefaultPolicyFile_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__policy__Definition_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__policy__Dictionary_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__policy__PolicyDestination_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__policy__PolicyFile_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__policy__PolicySource_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__policy__PolicyStreamDestination_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__policy__PolicyStringDestination_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__policy__PolicyString_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__policy__Policy_t,
  _swigc__p_boost__shared_ptrT_lsst__pex__policy__UrnPolicyFile_t,
  _swigc__p_boost__shared_ptrT_lsst__security__Security_t,
  _swigc__p_char,
  _swigc__p_char_type,
  _swigc__p_const_iterator,
  _swigc__p_const_reference,
  _swigc__p_const_reverse_iterator,
  _swigc__p_const_x_iterator,
  _swigc__p_const_xy_locator,
  _swigc__p_const_y_iterator,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_f_enum_std__ios_base__event_r_std__ios_base_int__void,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__ios_base,
  _swigc__p_fast_iterator,
  _swigc__p_first_type,
  _swigc__p_float,
  _swigc__p_fmtflags,
  _swigc__p_image_category,
  _swigc__p_int,
  _swigc__p_int_type,
  _swigc__p_iostate,
  _swigc__p_iterator,
  _swigc__p_kernel_fill_factor,
  _swigc__p_key_type,
  _swigc__p_long,
  _swigc__p_long_double,
  _swigc__p_long_long,
  _swigc__p_lsst__afw__geom__CoordinateExprT_2_t,
  _swigc__p_lsst__afw__geom__CoordinateExprT_3_t,
  _swigc__p_lsst__afw__geom__ExtentT_double_2_t,
  _swigc__p_lsst__afw__geom__ExtentT_double_3_t,
  _swigc__p_lsst__afw__geom__ExtentT_int_2_t,
  _swigc__p_lsst__afw__geom__ExtentT_int_3_t,
  _swigc__p_lsst__afw__geom__PointT_double_2_t,
  _swigc__p_lsst__afw__geom__PointT_double_3_t,
  _swigc__p_lsst__afw__geom__PointT_int_2_t,
  _swigc__p_lsst__afw__geom__PointT_int_3_t,
  _swigc__p_lsst__afw__geom__ellipses__Axes,
  _swigc__p_lsst__afw__geom__ellipses__AxesEllipse,
  _swigc__p_lsst__afw__geom__ellipses__BaseCore,
  _swigc__p_lsst__afw__geom__ellipses__BaseEllipse,
  _swigc__p_lsst__afw__geom__ellipses__Distortion,
  _swigc__p_lsst__afw__geom__ellipses__DistortionEllipse,
  _swigc__p_lsst__afw__geom__ellipses__LogShear,
  _swigc__p_lsst__afw__geom__ellipses__LogShearEllipse,
  _swigc__p_lsst__afw__geom__ellipses__Quadrupole,
  _swigc__p_lsst__afw__geom__ellipses__QuadrupoleEllipse,
  _swigc__p_lsst__afw__image__PointT_double_t,
  _swigc__p_lsst__afw__image__PointT_int_t,
  _swigc__p_lsst__daf__base__TypeMismatchException,
  _swigc__p_lsst__pex__exceptions__DomainErrorException,
  _swigc__p_lsst__pex__exceptions__InvalidParameterException,
  _swigc__p_lsst__pex__exceptions__IoErrorException,
  _swigc__p_lsst__pex__exceptions__LengthErrorException,
  _swigc__p_lsst__pex__exceptions__LogicErrorException,
  _swigc__p_lsst__pex__exceptions__MemoryException,
  _swigc__p_lsst__pex__exceptions__NotFoundException,
  _swigc__p_lsst__pex__exceptions__OutOfRangeException,
  _swigc__p_lsst__pex__exceptions__OverflowErrorException,
  _swigc__p_lsst__pex__exceptions__RangeErrorException,
  _swigc__p_lsst__pex__exceptions__RuntimeErrorException,
  _swigc__p_lsst__pex__exceptions__TimeoutException,
  _swigc__p_lsst__pex__exceptions__UnderflowErrorException,
  _swigc__p_lsst__pex__logging__LogRec,
  _swigc__p_lsst__pex__policy__BadNameError,
  _swigc__p_lsst__pex__policy__DictionaryError,
  _swigc__p_lsst__pex__policy__EOFError,
  _swigc__p_lsst__pex__policy__FormatSyntaxError,
  _swigc__p_lsst__pex__policy__NameNotFound,
  _swigc__p_lsst__pex__policy__ParserError,
  _swigc__p_lsst__pex__policy__SyntaxError,
  _swigc__p_lsst__pex__policy__TypeError,
  _swigc__p_lsst__pex__policy__UnsupportedSyntax,
  _swigc__p_lsst__pex__policy__ValidationError,
  _swigc__p_mapped_type,
  _swigc__p_memId,
  _swigc__p_off_type,
  _swigc__p_openmode,
  _swigc__p_p_PyObject,
  _swigc__p_p_void,
  _swigc__p_pos_type,
  _swigc__p_reference,
  _swigc__p_reverse_iterator,
  _swigc__p_second_type,
  _swigc__p_seekdir,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_t,
  _swigc__p_size_type,
  _swigc__p_state_type,
  _swigc__p_std__basic_iosT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__char_type,
  _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__off_type,
  _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t__pos_type,
  _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__off_type,
  _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t__pos_type,
  _swigc__p_std__basic_streambufT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__ios_base,
  _swigc__p_std__locale,
  _swigc__p_std__vectorT_boost__shared_ptrT_lsst__afw__detection__DiaSource_t_std__allocatorT_boost__shared_ptrT_lsst__afw__detection__DiaSource_t_t_t,
  _swigc__p_std__vectorT_boost__shared_ptrT_lsst__afw__detection__Source_t_std__allocatorT_boost__shared_ptrT_lsst__afw__detection__Source_t_t_t,
  _swigc__p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t,
  _swigc__p_std__vectorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_std__allocatorT_boost__shared_ptrT_lsst__afw__image__TanWcs_t_t_t__allocator_type,
  _swigc__p_std__vectorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_std__allocatorT_boost__shared_ptrT_lsst__afw__math__Kernel_t_t_t,
  _swigc__p_std__vectorT_lsst__pex__exceptions__Tracepoint_std__allocatorT_lsst__pex__exceptions__Tracepoint_t_t,
  _swigc__p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t,
  _swigc__p_std__vectorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__SourceMatch_std__allocatorT_lsst__afw__detection__SourceMatch_t_t_t_t__allocator_type,
  _swigc__p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t,
  _swigc__p_std__vectorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_std__allocatorT_std__vectorT_lsst__afw__detection__Source__Ptr_std__allocatorT_lsst__afw__detection__Source__Ptr_t_t_t_t__allocator_type,
  _swigc__p_swig__PySwigIterator,
  _swigc__p_traits_type,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
  _swigc__p_x_iterator,
  _swigc__p_xy_locator,
  _swigc__p_xy_x_iterator,
  _swigc__p_xy_y_iterator,
  _swigc__p_y_iterator,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{ SWIG_PY_POINTER, (char*)"endl_cb_ptr", 0, 0, (void *)((std::basic_ostream< char,std::char_traits< char > > & (*)(std::basic_ostream< char,std::char_traits< char > > &))(std::endl< char,std::char_traits< char > >)), &SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t },
{ SWIG_PY_POINTER, (char*)"ends_cb_ptr", 0, 0, (void *)((std::basic_ostream< char,std::char_traits< char > > & (*)(std::basic_ostream< char,std::char_traits< char > > &))(std::ends< char,std::char_traits< char > >)), &SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t },
{ SWIG_PY_POINTER, (char*)"flush_cb_ptr", 0, 0, (void *)((std::basic_ostream< char,std::char_traits< char > > & (*)(std::basic_ostream< char,std::char_traits< char > > &))(std::flush< char,std::char_traits< char > >)), &SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t },
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
    return PyString_FromString("<Swig global variables>");
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
    PyObject *str = PyString_FromString("(");
    swig_globalvar  *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", PyString_AsString(str));
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;  
    if (!type_init) {
      const PyTypeObject tmp
      = {
        PyObject_HEAD_INIT(NULL)
        0,                                  /* Number of items in variable part (ob_size) */
        (char *)"swigvarlink",              /* Type name (tp_name) */
        sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
        0,                                  /* Itemsize (tp_itemsize) */
        (destructor) swig_varlink_dealloc,   /* Deallocator (tp_dealloc) */ 
        (printfunc) swig_varlink_print,     /* Print (tp_print) */
        (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
        (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc)swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      varlink_type.ob_type = &PyType_Type;
      type_init = 1;
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          size_t shift = (ci->ptype) - types;
          swig_type_info *ty = types_initial[shift];
          size_t ldoc = (c - methods[i].ml_doc);
          size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
          char *ndoc = (char*)malloc(ldoc + lptr + 10);
          if (ndoc) {
            char *buff = ndoc;
            void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
            if (ptr) {
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIG_init(void) {
  PyObject *m, *d;
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
  d = PyModule_GetDict(m);
  
  SWIG_InitializeModule(0);
  SWIG_InstallConstants(d,swig_const_table);
  
  
  PyDict_SetItemString(d,(char*)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_boolalpha",Swig_var_ios_base_boolalpha_get, Swig_var_ios_base_boolalpha_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_dec",Swig_var_ios_base_dec_get, Swig_var_ios_base_dec_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_fixed",Swig_var_ios_base_fixed_get, Swig_var_ios_base_fixed_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_hex",Swig_var_ios_base_hex_get, Swig_var_ios_base_hex_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_internal",Swig_var_ios_base_internal_get, Swig_var_ios_base_internal_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_left",Swig_var_ios_base_left_get, Swig_var_ios_base_left_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_oct",Swig_var_ios_base_oct_get, Swig_var_ios_base_oct_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_right",Swig_var_ios_base_right_get, Swig_var_ios_base_right_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_scientific",Swig_var_ios_base_scientific_get, Swig_var_ios_base_scientific_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_showbase",Swig_var_ios_base_showbase_get, Swig_var_ios_base_showbase_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_showpoint",Swig_var_ios_base_showpoint_get, Swig_var_ios_base_showpoint_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_showpos",Swig_var_ios_base_showpos_get, Swig_var_ios_base_showpos_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_skipws",Swig_var_ios_base_skipws_get, Swig_var_ios_base_skipws_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_unitbuf",Swig_var_ios_base_unitbuf_get, Swig_var_ios_base_unitbuf_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_uppercase",Swig_var_ios_base_uppercase_get, Swig_var_ios_base_uppercase_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_adjustfield",Swig_var_ios_base_adjustfield_get, Swig_var_ios_base_adjustfield_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_basefield",Swig_var_ios_base_basefield_get, Swig_var_ios_base_basefield_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_floatfield",Swig_var_ios_base_floatfield_get, Swig_var_ios_base_floatfield_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_badbit",Swig_var_ios_base_badbit_get, Swig_var_ios_base_badbit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_eofbit",Swig_var_ios_base_eofbit_get, Swig_var_ios_base_eofbit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_failbit",Swig_var_ios_base_failbit_get, Swig_var_ios_base_failbit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_goodbit",Swig_var_ios_base_goodbit_get, Swig_var_ios_base_goodbit_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_app",Swig_var_ios_base_app_get, Swig_var_ios_base_app_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_ate",Swig_var_ios_base_ate_get, Swig_var_ios_base_ate_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_binary",Swig_var_ios_base_binary_get, Swig_var_ios_base_binary_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_ios_base_in",Swig_var_ios_base_ios_base_in_get, Swig_var_ios_base_ios_base_in_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_out",Swig_var_ios_base_out_get, Swig_var_ios_base_out_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_trunc",Swig_var_ios_base_trunc_get, Swig_var_ios_base_trunc_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_beg",Swig_var_ios_base_beg_get, Swig_var_ios_base_beg_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_cur",Swig_var_ios_base_cur_get, Swig_var_ios_base_cur_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ios_base_end",Swig_var_ios_base_end_get, Swig_var_ios_base_end_set);
  SWIG_Python_SetConstant(d, "ios_base_erase_event",SWIG_From_int(static_cast< int >(std::ios_base::erase_event)));
  SWIG_Python_SetConstant(d, "ios_base_imbue_event",SWIG_From_int(static_cast< int >(std::ios_base::imbue_event)));
  SWIG_Python_SetConstant(d, "ios_base_copyfmt_event",SWIG_From_int(static_cast< int >(std::ios_base::copyfmt_event)));
  SWIG_addvarlink(SWIG_globals(),(char*)"cin",Swig_var_cin_get, Swig_var_cin_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"cout",Swig_var_cout_get, Swig_var_cout_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"cerr",Swig_var_cerr_get, Swig_var_cerr_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"clog",Swig_var_clog_get, Swig_var_clog_set);
  
  
  
}

