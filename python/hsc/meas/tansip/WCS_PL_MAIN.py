# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

"""

Python interface to hsc::meas::tansip

"""

import _WCS_PL_MAIN
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    """Proxy of C++ PySwigIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _WCS_PL_MAIN.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args):
        """value(self) -> PyObject"""
        return _WCS_PL_MAIN.PySwigIterator_value(*args)

    def incr(*args):
        """
        incr(self, size_t n=1) -> PySwigIterator
        incr(self) -> PySwigIterator
        """
        return _WCS_PL_MAIN.PySwigIterator_incr(*args)

    def decr(*args):
        """
        decr(self, size_t n=1) -> PySwigIterator
        decr(self) -> PySwigIterator
        """
        return _WCS_PL_MAIN.PySwigIterator_decr(*args)

    def distance(*args):
        """distance(self, PySwigIterator x) -> ptrdiff_t"""
        return _WCS_PL_MAIN.PySwigIterator_distance(*args)

    def equal(*args):
        """equal(self, PySwigIterator x) -> bool"""
        return _WCS_PL_MAIN.PySwigIterator_equal(*args)

    def copy(*args):
        """copy(self) -> PySwigIterator"""
        return _WCS_PL_MAIN.PySwigIterator_copy(*args)

    def next(*args):
        """next(self) -> PyObject"""
        return _WCS_PL_MAIN.PySwigIterator_next(*args)

    def previous(*args):
        """previous(self) -> PyObject"""
        return _WCS_PL_MAIN.PySwigIterator_previous(*args)

    def advance(*args):
        """advance(self, ptrdiff_t n) -> PySwigIterator"""
        return _WCS_PL_MAIN.PySwigIterator_advance(*args)

    def __eq__(*args):
        """__eq__(self, PySwigIterator x) -> bool"""
        return _WCS_PL_MAIN.PySwigIterator___eq__(*args)

    def __ne__(*args):
        """__ne__(self, PySwigIterator x) -> bool"""
        return _WCS_PL_MAIN.PySwigIterator___ne__(*args)

    def __iadd__(*args):
        """__iadd__(self, ptrdiff_t n) -> PySwigIterator"""
        return _WCS_PL_MAIN.PySwigIterator___iadd__(*args)

    def __isub__(*args):
        """__isub__(self, ptrdiff_t n) -> PySwigIterator"""
        return _WCS_PL_MAIN.PySwigIterator___isub__(*args)

    def __add__(*args):
        """__add__(self, ptrdiff_t n) -> PySwigIterator"""
        return _WCS_PL_MAIN.PySwigIterator___add__(*args)

    def __sub__(*args):
        """
        __sub__(self, ptrdiff_t n) -> PySwigIterator
        __sub__(self, PySwigIterator x) -> ptrdiff_t
        """
        return _WCS_PL_MAIN.PySwigIterator___sub__(*args)

    def __iter__(self): return self
PySwigIterator_swigregister = _WCS_PL_MAIN.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class ios_base(_object):
    """Proxy of C++ ios_base class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ios_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ios_base, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    erase_event = _WCS_PL_MAIN.ios_base_erase_event
    imbue_event = _WCS_PL_MAIN.ios_base_imbue_event
    copyfmt_event = _WCS_PL_MAIN.ios_base_copyfmt_event
    def register_callback(*args):
        """register_callback(self, event_callback __fn, int __index)"""
        return _WCS_PL_MAIN.ios_base_register_callback(*args)

    def flags(*args):
        """
        flags(self) -> fmtflags
        flags(self, fmtflags __fmtfl) -> fmtflags
        """
        return _WCS_PL_MAIN.ios_base_flags(*args)

    def setf(*args):
        """
        setf(self, fmtflags __fmtfl) -> fmtflags
        setf(self, fmtflags __fmtfl, fmtflags __mask) -> fmtflags
        """
        return _WCS_PL_MAIN.ios_base_setf(*args)

    def unsetf(*args):
        """unsetf(self, fmtflags __mask)"""
        return _WCS_PL_MAIN.ios_base_unsetf(*args)

    def precision(*args):
        """
        precision(self) -> streamsize
        precision(self, streamsize __prec) -> streamsize
        """
        return _WCS_PL_MAIN.ios_base_precision(*args)

    def width(*args):
        """
        width(self) -> streamsize
        width(self, streamsize __wide) -> streamsize
        """
        return _WCS_PL_MAIN.ios_base_width(*args)

    def sync_with_stdio(*args):
        """
        sync_with_stdio(bool __sync=True) -> bool
        sync_with_stdio() -> bool
        """
        return _WCS_PL_MAIN.ios_base_sync_with_stdio(*args)

    if _newclass:sync_with_stdio = staticmethod(sync_with_stdio)
    __swig_getmethods__["sync_with_stdio"] = lambda x: sync_with_stdio
    def imbue(*args):
        """imbue(self, locale __loc) -> locale"""
        return _WCS_PL_MAIN.ios_base_imbue(*args)

    def getloc(*args):
        """getloc(self) -> locale"""
        return _WCS_PL_MAIN.ios_base_getloc(*args)

    def xalloc(*args):
        """xalloc() -> int"""
        return _WCS_PL_MAIN.ios_base_xalloc(*args)

    if _newclass:xalloc = staticmethod(xalloc)
    __swig_getmethods__["xalloc"] = lambda x: xalloc
    def iword(*args):
        """iword(self, int __ix) -> long"""
        return _WCS_PL_MAIN.ios_base_iword(*args)

    def pword(*args):
        """pword(self, int __ix) -> void"""
        return _WCS_PL_MAIN.ios_base_pword(*args)

    __swig_destroy__ = _WCS_PL_MAIN.delete_ios_base
    __del__ = lambda self : None;
ios_base_swigregister = _WCS_PL_MAIN.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _WCS_PL_MAIN.cvar
ios_base.boolalpha = _WCS_PL_MAIN.cvar.ios_base_boolalpha
ios_base.dec = _WCS_PL_MAIN.cvar.ios_base_dec
ios_base.fixed = _WCS_PL_MAIN.cvar.ios_base_fixed
ios_base.hex = _WCS_PL_MAIN.cvar.ios_base_hex
ios_base.internal = _WCS_PL_MAIN.cvar.ios_base_internal
ios_base.left = _WCS_PL_MAIN.cvar.ios_base_left
ios_base.oct = _WCS_PL_MAIN.cvar.ios_base_oct
ios_base.right = _WCS_PL_MAIN.cvar.ios_base_right
ios_base.scientific = _WCS_PL_MAIN.cvar.ios_base_scientific
ios_base.showbase = _WCS_PL_MAIN.cvar.ios_base_showbase
ios_base.showpoint = _WCS_PL_MAIN.cvar.ios_base_showpoint
ios_base.showpos = _WCS_PL_MAIN.cvar.ios_base_showpos
ios_base.skipws = _WCS_PL_MAIN.cvar.ios_base_skipws
ios_base.unitbuf = _WCS_PL_MAIN.cvar.ios_base_unitbuf
ios_base.uppercase = _WCS_PL_MAIN.cvar.ios_base_uppercase
ios_base.adjustfield = _WCS_PL_MAIN.cvar.ios_base_adjustfield
ios_base.basefield = _WCS_PL_MAIN.cvar.ios_base_basefield
ios_base.floatfield = _WCS_PL_MAIN.cvar.ios_base_floatfield
ios_base.badbit = _WCS_PL_MAIN.cvar.ios_base_badbit
ios_base.eofbit = _WCS_PL_MAIN.cvar.ios_base_eofbit
ios_base.failbit = _WCS_PL_MAIN.cvar.ios_base_failbit
ios_base.goodbit = _WCS_PL_MAIN.cvar.ios_base_goodbit
ios_base.app = _WCS_PL_MAIN.cvar.ios_base_app
ios_base.ate = _WCS_PL_MAIN.cvar.ios_base_ate
ios_base.binary = _WCS_PL_MAIN.cvar.ios_base_binary
ios_base.ios_base_in = _WCS_PL_MAIN.cvar.ios_base_ios_base_in
ios_base.out = _WCS_PL_MAIN.cvar.ios_base_out
ios_base.trunc = _WCS_PL_MAIN.cvar.ios_base_trunc
ios_base.beg = _WCS_PL_MAIN.cvar.ios_base_beg
ios_base.cur = _WCS_PL_MAIN.cvar.ios_base_cur
ios_base.end = _WCS_PL_MAIN.cvar.ios_base_end

def ios_base_sync_with_stdio(*args):
  """
    sync_with_stdio(bool __sync=True) -> bool
    ios_base_sync_with_stdio() -> bool
    """
  return _WCS_PL_MAIN.ios_base_sync_with_stdio(*args)

def ios_base_xalloc(*args):
  """ios_base_xalloc() -> int"""
  return _WCS_PL_MAIN.ios_base_xalloc(*args)

class ios(ios_base):
    """Proxy of C++ ios class"""
    __swig_setmethods__ = {}
    for _s in [ios_base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ios, name, value)
    __swig_getmethods__ = {}
    for _s in [ios_base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ios, name)
    __repr__ = _swig_repr
    def rdstate(*args):
        """rdstate(self) -> iostate"""
        return _WCS_PL_MAIN.ios_rdstate(*args)

    def clear(*args):
        """
        clear(self, iostate __state=goodbit)
        clear(self)
        """
        return _WCS_PL_MAIN.ios_clear(*args)

    def setstate(*args):
        """setstate(self, iostate __state)"""
        return _WCS_PL_MAIN.ios_setstate(*args)

    def good(*args):
        """good(self) -> bool"""
        return _WCS_PL_MAIN.ios_good(*args)

    def eof(*args):
        """eof(self) -> bool"""
        return _WCS_PL_MAIN.ios_eof(*args)

    def fail(*args):
        """fail(self) -> bool"""
        return _WCS_PL_MAIN.ios_fail(*args)

    def bad(*args):
        """bad(self) -> bool"""
        return _WCS_PL_MAIN.ios_bad(*args)

    def exceptions(*args):
        """
        exceptions(self) -> iostate
        exceptions(self, iostate __except)
        """
        return _WCS_PL_MAIN.ios_exceptions(*args)

    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ios"""
        this = _WCS_PL_MAIN.new_ios(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _WCS_PL_MAIN.delete_ios
    __del__ = lambda self : None;
    def tie(*args):
        """
        tie(self) -> ostream
        tie(self, ostream __tiestr) -> ostream
        """
        return _WCS_PL_MAIN.ios_tie(*args)

    def rdbuf(*args):
        """
        rdbuf(self) -> std::basic_streambuf<(char,std::char_traits<(char)>)>
        rdbuf(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> std::basic_streambuf<(char,std::char_traits<(char)>)>
        """
        return _WCS_PL_MAIN.ios_rdbuf(*args)

    def copyfmt(*args):
        """copyfmt(self, ios __rhs) -> ios"""
        return _WCS_PL_MAIN.ios_copyfmt(*args)

    def fill(*args):
        """
        fill(self) -> char_type
        fill(self, char_type __ch) -> char_type
        """
        return _WCS_PL_MAIN.ios_fill(*args)

    def imbue(*args):
        """imbue(self, locale __loc) -> locale"""
        return _WCS_PL_MAIN.ios_imbue(*args)

    def narrow(*args):
        """narrow(self, char_type __c, char __dfault) -> char"""
        return _WCS_PL_MAIN.ios_narrow(*args)

    def widen(*args):
        """widen(self, char __c) -> char_type"""
        return _WCS_PL_MAIN.ios_widen(*args)

ios_swigregister = _WCS_PL_MAIN.ios_swigregister
ios_swigregister(ios)

class ostream(ios):
    """Proxy of C++ ostream class"""
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ostream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ostream"""
        this = _WCS_PL_MAIN.new_ostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _WCS_PL_MAIN.delete_ostream
    __del__ = lambda self : None;
    def __lshift__(*args):
        """
        __lshift__(self, ostream __pf) -> ostream
        __lshift__(self, ios __pf) -> ostream
        __lshift__(self, ios_base __pf) -> ostream
        __lshift__(self, long __n) -> ostream
        __lshift__(self, unsigned long __n) -> ostream
        __lshift__(self, bool __n) -> ostream
        __lshift__(self, short __n) -> ostream
        __lshift__(self, unsigned short __n) -> ostream
        __lshift__(self, int __n) -> ostream
        __lshift__(self, unsigned int __n) -> ostream
        __lshift__(self, long long __n) -> ostream
        __lshift__(self, unsigned long long __n) -> ostream
        __lshift__(self, double __f) -> ostream
        __lshift__(self, float __f) -> ostream
        __lshift__(self, long double __f) -> ostream
        __lshift__(self, void __p) -> ostream
        __lshift__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ostream
        __lshift__(self, std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)> s) -> ostream
        """
        return _WCS_PL_MAIN.ostream___lshift__(*args)

    def put(*args):
        """put(self, char_type __c) -> ostream"""
        return _WCS_PL_MAIN.ostream_put(*args)

    def write(*args):
        """write(self, char_type __s, streamsize __n) -> ostream"""
        return _WCS_PL_MAIN.ostream_write(*args)

    def flush(*args):
        """flush(self) -> ostream"""
        return _WCS_PL_MAIN.ostream_flush(*args)

    def tellp(*args):
        """tellp(self) -> pos_type"""
        return _WCS_PL_MAIN.ostream_tellp(*args)

    def seekp(*args):
        """
        seekp(self, pos_type ?) -> ostream
        seekp(self, off_type ?, seekdir ?) -> ostream
        """
        return _WCS_PL_MAIN.ostream_seekp(*args)

ostream_swigregister = _WCS_PL_MAIN.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    """Proxy of C++ istream class"""
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, istream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, istream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream"""
        this = _WCS_PL_MAIN.new_istream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _WCS_PL_MAIN.delete_istream
    __del__ = lambda self : None;
    def __rshift__(*args):
        """
        __rshift__(self, istream __pf) -> istream
        __rshift__(self, ios __pf) -> istream
        __rshift__(self, ios_base __pf) -> istream
        __rshift__(self, bool __n) -> istream
        __rshift__(self, short __n) -> istream
        __rshift__(self, unsigned short __n) -> istream
        __rshift__(self, int __n) -> istream
        __rshift__(self, unsigned int __n) -> istream
        __rshift__(self, long __n) -> istream
        __rshift__(self, unsigned long __n) -> istream
        __rshift__(self, long long __n) -> istream
        __rshift__(self, unsigned long long __n) -> istream
        __rshift__(self, float __f) -> istream
        __rshift__(self, double __f) -> istream
        __rshift__(self, long double __f) -> istream
        __rshift__(self, void __p) -> istream
        __rshift__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream
        """
        return _WCS_PL_MAIN.istream___rshift__(*args)

    def gcount(*args):
        """gcount(self) -> streamsize"""
        return _WCS_PL_MAIN.istream_gcount(*args)

    def get(*args):
        """
        get(self) -> int_type
        get(self, char_type __c) -> istream
        get(self, char_type __s, streamsize __n, char_type __delim) -> istream
        get(self, char_type __s, streamsize __n) -> istream
        get(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb, 
            char_type __delim) -> istream
        get(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream
        """
        return _WCS_PL_MAIN.istream_get(*args)

    def getline(*args):
        """
        getline(self, char_type __s, streamsize __n, char_type __delim) -> istream
        getline(self, char_type __s, streamsize __n) -> istream
        """
        return _WCS_PL_MAIN.istream_getline(*args)

    def ignore(*args):
        """
        ignore(self, streamsize __n=1, int_type __delim=std::char_traits< char >::eof()) -> istream
        ignore(self, streamsize __n=1) -> istream
        ignore(self) -> istream
        """
        return _WCS_PL_MAIN.istream_ignore(*args)

    def peek(*args):
        """peek(self) -> int_type"""
        return _WCS_PL_MAIN.istream_peek(*args)

    def read(*args):
        """read(self, char_type __s, streamsize __n) -> istream"""
        return _WCS_PL_MAIN.istream_read(*args)

    def readsome(*args):
        """readsome(self, char_type __s, streamsize __n) -> streamsize"""
        return _WCS_PL_MAIN.istream_readsome(*args)

    def putback(*args):
        """putback(self, char_type __c) -> istream"""
        return _WCS_PL_MAIN.istream_putback(*args)

    def unget(*args):
        """unget(self) -> istream"""
        return _WCS_PL_MAIN.istream_unget(*args)

    def sync(*args):
        """sync(self) -> int"""
        return _WCS_PL_MAIN.istream_sync(*args)

    def tellg(*args):
        """tellg(self) -> pos_type"""
        return _WCS_PL_MAIN.istream_tellg(*args)

    def seekg(*args):
        """
        seekg(self, pos_type ?) -> istream
        seekg(self, off_type ?, seekdir ?) -> istream
        """
        return _WCS_PL_MAIN.istream_seekg(*args)

istream_swigregister = _WCS_PL_MAIN.istream_swigregister
istream_swigregister(istream)

class iostream(istream,ostream):
    """Proxy of C++ iostream class"""
    __swig_setmethods__ = {}
    for _s in [istream,ostream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, iostream, name, value)
    __swig_getmethods__ = {}
    for _s in [istream,ostream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> iostream"""
        this = _WCS_PL_MAIN.new_iostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _WCS_PL_MAIN.delete_iostream
    __del__ = lambda self : None;
iostream_swigregister = _WCS_PL_MAIN.iostream_swigregister
iostream_swigregister(iostream)

endl_cb_ptr = _WCS_PL_MAIN.endl_cb_ptr
endl = _WCS_PL_MAIN.endl
ends_cb_ptr = _WCS_PL_MAIN.ends_cb_ptr
ends = _WCS_PL_MAIN.ends
flush_cb_ptr = _WCS_PL_MAIN.flush_cb_ptr
flush = _WCS_PL_MAIN.flush
import lsst.pex.exceptions

import lsst.utils

def version(HeadURL = r"$HeadURL: ssh://hsc-gw2.mtk.nao.ac.jp/ana/hgrepo/hscAstrom/python/hsc/meas/read/okura_read.i $"):
    version_svn = lsst.utils.guessSvnVersion(HeadURL)

    try:
        import eups
    except ImportError:
        return version_svn
    else:
        try:
            version_eups = eups.setup("solvetansip")
        except AttributeError:
            return version_svn

    if version_eups == version_svn:
        return version_svn
    else:
        return "%s (setup: %s)" % (version_svn, version_eups)

import lsst.afw.image.imageLib
import lsst.daf.base.baseLib
import lsst.pex.exceptions.exceptionsLib
import lsst.pex.policy.policyLib
import lsst.daf.persistence.persistenceLib
import lsst.pex.logging.loggingLib
import lsst.daf.data.dataLib
import lsst.security.securityLib
import lsst.afw.geom.geomLib
import lsst.afw.coord.coordLib
import lsst.afw.cameraGeom.cameraGeomLib
import lsst.afw.detection.detectionLib
import lsst.afw.geom.ellipses.ellipsesLib
import lsst.afw.math.mathLib
import lsst.afw.math.shapelets.shapeletsLib
class SourceGroup(_object):
    """Proxy of C++ SourceGroup class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SourceGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SourceGroup, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _WCS_PL_MAIN.SourceGroup_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _WCS_PL_MAIN.SourceGroup___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::size_type"""
        return _WCS_PL_MAIN.SourceGroup___len__(*args)

    def pop(*args):
        """pop(self) -> std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::value_type"""
        return _WCS_PL_MAIN.SourceGroup_pop(*args)

    def __getslice__(*args):
        """
        __getslice__(self, std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::difference_type i, 
            std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::difference_type j) -> SourceGroup
        """
        return _WCS_PL_MAIN.SourceGroup___getslice__(*args)

    def __setslice__(*args):
        """
        __setslice__(self, std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::difference_type i, 
            std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::difference_type j, 
            SourceGroup v)
        """
        return _WCS_PL_MAIN.SourceGroup___setslice__(*args)

    def __delslice__(*args):
        """
        __delslice__(self, std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::difference_type i, 
            std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::difference_type j)
        """
        return _WCS_PL_MAIN.SourceGroup___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::difference_type i)"""
        return _WCS_PL_MAIN.SourceGroup___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::difference_type i) -> std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::value_type"""
        return _WCS_PL_MAIN.SourceGroup___getitem__(*args)

    def __setitem__(*args):
        """
        __setitem__(self, std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::difference_type i, 
            std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::value_type x)
        """
        return _WCS_PL_MAIN.SourceGroup___setitem__(*args)

    def append(*args):
        """append(self, std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::value_type x)"""
        return _WCS_PL_MAIN.SourceGroup_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _WCS_PL_MAIN.SourceGroup_empty(*args)

    def size(*args):
        """size(self) -> std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::size_type"""
        return _WCS_PL_MAIN.SourceGroup_size(*args)

    def clear(*args):
        """clear(self)"""
        return _WCS_PL_MAIN.SourceGroup_clear(*args)

    def swap(*args):
        """swap(self, SourceGroup v)"""
        return _WCS_PL_MAIN.SourceGroup_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::allocator_type"""
        return _WCS_PL_MAIN.SourceGroup_get_allocator(*args)

    def begin(*args):
        """begin(self) -> std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::const_iterator"""
        return _WCS_PL_MAIN.SourceGroup_begin(*args)

    def end(*args):
        """end(self) -> std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::const_iterator"""
        return _WCS_PL_MAIN.SourceGroup_end(*args)

    def rbegin(*args):
        """rbegin(self) -> std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::const_reverse_iterator"""
        return _WCS_PL_MAIN.SourceGroup_rbegin(*args)

    def rend(*args):
        """rend(self) -> std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::const_reverse_iterator"""
        return _WCS_PL_MAIN.SourceGroup_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _WCS_PL_MAIN.SourceGroup_pop_back(*args)

    def erase(*args):
        """
        erase(self, std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::iterator pos) -> std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::iterator
        erase(self, std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::iterator first, 
            std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::iterator last) -> std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::iterator
        """
        return _WCS_PL_MAIN.SourceGroup_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> SourceGroup
        __init__(self, SourceGroup ?) -> SourceGroup
        __init__(self, std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::size_type size) -> SourceGroup
        __init__(self, std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::size_type size, 
            std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::value_type value) -> SourceGroup
        """
        this = _WCS_PL_MAIN.new_SourceGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::value_type x)"""
        return _WCS_PL_MAIN.SourceGroup_push_back(*args)

    def front(*args):
        """front(self) -> std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::value_type"""
        return _WCS_PL_MAIN.SourceGroup_front(*args)

    def back(*args):
        """back(self) -> std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::value_type"""
        return _WCS_PL_MAIN.SourceGroup_back(*args)

    def assign(*args):
        """
        assign(self, std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::size_type n, 
            std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::value_type x)
        """
        return _WCS_PL_MAIN.SourceGroup_assign(*args)

    def resize(*args):
        """
        resize(self, std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::size_type new_size)
        resize(self, std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::size_type new_size, 
            std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::value_type x)
        """
        return _WCS_PL_MAIN.SourceGroup_resize(*args)

    def insert(*args):
        """
        insert(self, std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::iterator pos, 
            std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::value_type x) -> std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::iterator
        insert(self, std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::iterator pos, 
            std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::size_type n, 
            std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::value_type x)
        """
        return _WCS_PL_MAIN.SourceGroup_insert(*args)

    def reserve(*args):
        """reserve(self, std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::size_type n)"""
        return _WCS_PL_MAIN.SourceGroup_reserve(*args)

    def capacity(*args):
        """capacity(self) -> std::vector<(std::vector<(boost::shared_ptr<(lsst::afw::detection::Source)>,std::allocator<(boost::shared_ptr<(lsst::afw::detection::Source)>)>)>)>::size_type"""
        return _WCS_PL_MAIN.SourceGroup_capacity(*args)

    __swig_destroy__ = _WCS_PL_MAIN.delete_SourceGroup
    __del__ = lambda self : None;
SourceGroup_swigregister = _WCS_PL_MAIN.SourceGroup_swigregister
SourceGroup_swigregister(SourceGroup)

class vvSourceMatch(_object):
    """Proxy of C++ vvSourceMatch class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, vvSourceMatch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vvSourceMatch, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _WCS_PL_MAIN.vvSourceMatch_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _WCS_PL_MAIN.vvSourceMatch___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _WCS_PL_MAIN.vvSourceMatch___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _WCS_PL_MAIN.vvSourceMatch_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> vvSourceMatch"""
        return _WCS_PL_MAIN.vvSourceMatch___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, vvSourceMatch v)"""
        return _WCS_PL_MAIN.vvSourceMatch___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _WCS_PL_MAIN.vvSourceMatch___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _WCS_PL_MAIN.vvSourceMatch___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _WCS_PL_MAIN.vvSourceMatch___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _WCS_PL_MAIN.vvSourceMatch___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _WCS_PL_MAIN.vvSourceMatch_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _WCS_PL_MAIN.vvSourceMatch_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _WCS_PL_MAIN.vvSourceMatch_size(*args)

    def clear(*args):
        """clear(self)"""
        return _WCS_PL_MAIN.vvSourceMatch_clear(*args)

    def swap(*args):
        """swap(self, vvSourceMatch v)"""
        return _WCS_PL_MAIN.vvSourceMatch_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _WCS_PL_MAIN.vvSourceMatch_get_allocator(*args)

    def begin(*args):
        """begin(self) -> const_iterator"""
        return _WCS_PL_MAIN.vvSourceMatch_begin(*args)

    def end(*args):
        """end(self) -> const_iterator"""
        return _WCS_PL_MAIN.vvSourceMatch_end(*args)

    def rbegin(*args):
        """rbegin(self) -> const_reverse_iterator"""
        return _WCS_PL_MAIN.vvSourceMatch_rbegin(*args)

    def rend(*args):
        """rend(self) -> const_reverse_iterator"""
        return _WCS_PL_MAIN.vvSourceMatch_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _WCS_PL_MAIN.vvSourceMatch_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _WCS_PL_MAIN.vvSourceMatch_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> vvSourceMatch
        __init__(self, vvSourceMatch ?) -> vvSourceMatch
        __init__(self, size_type size) -> vvSourceMatch
        __init__(self, size_type size, value_type value) -> vvSourceMatch
        """
        this = _WCS_PL_MAIN.new_vvSourceMatch(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _WCS_PL_MAIN.vvSourceMatch_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _WCS_PL_MAIN.vvSourceMatch_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _WCS_PL_MAIN.vvSourceMatch_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _WCS_PL_MAIN.vvSourceMatch_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _WCS_PL_MAIN.vvSourceMatch_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _WCS_PL_MAIN.vvSourceMatch_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _WCS_PL_MAIN.vvSourceMatch_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _WCS_PL_MAIN.vvSourceMatch_capacity(*args)

    __swig_destroy__ = _WCS_PL_MAIN.delete_vvSourceMatch
    __del__ = lambda self : None;
vvSourceMatch_swigregister = _WCS_PL_MAIN.vvSourceMatch_swigregister
vvSourceMatch_swigregister(vvSourceMatch)

class resultWcs_V(_object):
    """Proxy of C++ resultWcs_V class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, resultWcs_V, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, resultWcs_V, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _WCS_PL_MAIN.resultWcs_V_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _WCS_PL_MAIN.resultWcs_V___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::size_type"""
        return _WCS_PL_MAIN.resultWcs_V___len__(*args)

    def pop(*args):
        """pop(self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type"""
        return _WCS_PL_MAIN.resultWcs_V_pop(*args)

    def __getslice__(*args):
        """
        __getslice__(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::difference_type i, 
            std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::difference_type j) -> resultWcs_V
        """
        return _WCS_PL_MAIN.resultWcs_V___getslice__(*args)

    def __setslice__(*args):
        """
        __setslice__(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::difference_type i, 
            std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::difference_type j, 
            resultWcs_V v)
        """
        return _WCS_PL_MAIN.resultWcs_V___setslice__(*args)

    def __delslice__(*args):
        """
        __delslice__(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::difference_type i, 
            std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::difference_type j)
        """
        return _WCS_PL_MAIN.resultWcs_V___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::difference_type i)"""
        return _WCS_PL_MAIN.resultWcs_V___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::difference_type i) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type"""
        return _WCS_PL_MAIN.resultWcs_V___getitem__(*args)

    def __setitem__(*args):
        """
        __setitem__(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::difference_type i, 
            std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type x)
        """
        return _WCS_PL_MAIN.resultWcs_V___setitem__(*args)

    def append(*args):
        """append(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type x)"""
        return _WCS_PL_MAIN.resultWcs_V_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _WCS_PL_MAIN.resultWcs_V_empty(*args)

    def size(*args):
        """size(self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::size_type"""
        return _WCS_PL_MAIN.resultWcs_V_size(*args)

    def clear(*args):
        """clear(self)"""
        return _WCS_PL_MAIN.resultWcs_V_clear(*args)

    def swap(*args):
        """swap(self, resultWcs_V v)"""
        return _WCS_PL_MAIN.resultWcs_V_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::allocator_type"""
        return _WCS_PL_MAIN.resultWcs_V_get_allocator(*args)

    def begin(*args):
        """begin(self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::const_iterator"""
        return _WCS_PL_MAIN.resultWcs_V_begin(*args)

    def end(*args):
        """end(self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::const_iterator"""
        return _WCS_PL_MAIN.resultWcs_V_end(*args)

    def rbegin(*args):
        """rbegin(self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::const_reverse_iterator"""
        return _WCS_PL_MAIN.resultWcs_V_rbegin(*args)

    def rend(*args):
        """rend(self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::const_reverse_iterator"""
        return _WCS_PL_MAIN.resultWcs_V_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _WCS_PL_MAIN.resultWcs_V_pop_back(*args)

    def erase(*args):
        """
        erase(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::iterator pos) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::iterator
        erase(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::iterator first, 
            std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::iterator last) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::iterator
        """
        return _WCS_PL_MAIN.resultWcs_V_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> resultWcs_V
        __init__(self, resultWcs_V ?) -> resultWcs_V
        __init__(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::size_type size) -> resultWcs_V
        __init__(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::size_type size, 
            std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type value) -> resultWcs_V
        """
        this = _WCS_PL_MAIN.new_resultWcs_V(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type x)"""
        return _WCS_PL_MAIN.resultWcs_V_push_back(*args)

    def front(*args):
        """front(self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type"""
        return _WCS_PL_MAIN.resultWcs_V_front(*args)

    def back(*args):
        """back(self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type"""
        return _WCS_PL_MAIN.resultWcs_V_back(*args)

    def assign(*args):
        """
        assign(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::size_type n, 
            std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type x)
        """
        return _WCS_PL_MAIN.resultWcs_V_assign(*args)

    def resize(*args):
        """
        resize(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::size_type new_size)
        resize(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::size_type new_size, 
            std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type x)
        """
        return _WCS_PL_MAIN.resultWcs_V_resize(*args)

    def insert(*args):
        """
        insert(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::iterator pos, 
            std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type x) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::iterator
        insert(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::iterator pos, 
            std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::size_type n, 
            std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type x)
        """
        return _WCS_PL_MAIN.resultWcs_V_insert(*args)

    def reserve(*args):
        """reserve(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::size_type n)"""
        return _WCS_PL_MAIN.resultWcs_V_reserve(*args)

    def capacity(*args):
        """capacity(self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::size_type"""
        return _WCS_PL_MAIN.resultWcs_V_capacity(*args)

    __swig_destroy__ = _WCS_PL_MAIN.delete_resultWcs_V
    __del__ = lambda self : None;
resultWcs_V_swigregister = _WCS_PL_MAIN.resultWcs_V_swigregister
resultWcs_V_swigregister(resultWcs_V)

class CPROP_V(_object):
    """Proxy of C++ CPROP_V class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, CPROP_V, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPROP_V, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _WCS_PL_MAIN.CPROP_V_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _WCS_PL_MAIN.CPROP_V___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _WCS_PL_MAIN.CPROP_V___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _WCS_PL_MAIN.CPROP_V_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> CPROP_V"""
        return _WCS_PL_MAIN.CPROP_V___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, CPROP_V v)"""
        return _WCS_PL_MAIN.CPROP_V___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _WCS_PL_MAIN.CPROP_V___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _WCS_PL_MAIN.CPROP_V___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _WCS_PL_MAIN.CPROP_V___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _WCS_PL_MAIN.CPROP_V___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _WCS_PL_MAIN.CPROP_V_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _WCS_PL_MAIN.CPROP_V_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _WCS_PL_MAIN.CPROP_V_size(*args)

    def clear(*args):
        """clear(self)"""
        return _WCS_PL_MAIN.CPROP_V_clear(*args)

    def swap(*args):
        """swap(self, CPROP_V v)"""
        return _WCS_PL_MAIN.CPROP_V_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _WCS_PL_MAIN.CPROP_V_get_allocator(*args)

    def begin(*args):
        """begin(self) -> const_iterator"""
        return _WCS_PL_MAIN.CPROP_V_begin(*args)

    def end(*args):
        """end(self) -> const_iterator"""
        return _WCS_PL_MAIN.CPROP_V_end(*args)

    def rbegin(*args):
        """rbegin(self) -> const_reverse_iterator"""
        return _WCS_PL_MAIN.CPROP_V_rbegin(*args)

    def rend(*args):
        """rend(self) -> const_reverse_iterator"""
        return _WCS_PL_MAIN.CPROP_V_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _WCS_PL_MAIN.CPROP_V_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _WCS_PL_MAIN.CPROP_V_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> CPROP_V
        __init__(self, CPROP_V ?) -> CPROP_V
        __init__(self, size_type size) -> CPROP_V
        __init__(self, size_type size, value_type value) -> CPROP_V
        """
        this = _WCS_PL_MAIN.new_CPROP_V(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _WCS_PL_MAIN.CPROP_V_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _WCS_PL_MAIN.CPROP_V_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _WCS_PL_MAIN.CPROP_V_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _WCS_PL_MAIN.CPROP_V_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _WCS_PL_MAIN.CPROP_V_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _WCS_PL_MAIN.CPROP_V_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _WCS_PL_MAIN.CPROP_V_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _WCS_PL_MAIN.CPROP_V_capacity(*args)

    __swig_destroy__ = _WCS_PL_MAIN.delete_CPROP_V
    __del__ = lambda self : None;
CPROP_V_swigregister = _WCS_PL_MAIN.CPROP_V_swigregister
CPROP_V_swigregister(CPROP_V)

class CSIP_V(_object):
    """Proxy of C++ CSIP_V class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, CSIP_V, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CSIP_V, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _WCS_PL_MAIN.CSIP_V_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _WCS_PL_MAIN.CSIP_V___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _WCS_PL_MAIN.CSIP_V___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _WCS_PL_MAIN.CSIP_V_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> CSIP_V"""
        return _WCS_PL_MAIN.CSIP_V___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, CSIP_V v)"""
        return _WCS_PL_MAIN.CSIP_V___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _WCS_PL_MAIN.CSIP_V___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _WCS_PL_MAIN.CSIP_V___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _WCS_PL_MAIN.CSIP_V___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _WCS_PL_MAIN.CSIP_V___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _WCS_PL_MAIN.CSIP_V_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _WCS_PL_MAIN.CSIP_V_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _WCS_PL_MAIN.CSIP_V_size(*args)

    def clear(*args):
        """clear(self)"""
        return _WCS_PL_MAIN.CSIP_V_clear(*args)

    def swap(*args):
        """swap(self, CSIP_V v)"""
        return _WCS_PL_MAIN.CSIP_V_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _WCS_PL_MAIN.CSIP_V_get_allocator(*args)

    def begin(*args):
        """begin(self) -> const_iterator"""
        return _WCS_PL_MAIN.CSIP_V_begin(*args)

    def end(*args):
        """end(self) -> const_iterator"""
        return _WCS_PL_MAIN.CSIP_V_end(*args)

    def rbegin(*args):
        """rbegin(self) -> const_reverse_iterator"""
        return _WCS_PL_MAIN.CSIP_V_rbegin(*args)

    def rend(*args):
        """rend(self) -> const_reverse_iterator"""
        return _WCS_PL_MAIN.CSIP_V_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _WCS_PL_MAIN.CSIP_V_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _WCS_PL_MAIN.CSIP_V_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> CSIP_V
        __init__(self, CSIP_V ?) -> CSIP_V
        __init__(self, size_type size) -> CSIP_V
        __init__(self, size_type size, value_type value) -> CSIP_V
        """
        this = _WCS_PL_MAIN.new_CSIP_V(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _WCS_PL_MAIN.CSIP_V_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _WCS_PL_MAIN.CSIP_V_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _WCS_PL_MAIN.CSIP_V_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _WCS_PL_MAIN.CSIP_V_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _WCS_PL_MAIN.CSIP_V_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _WCS_PL_MAIN.CSIP_V_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _WCS_PL_MAIN.CSIP_V_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _WCS_PL_MAIN.CSIP_V_capacity(*args)

    __swig_destroy__ = _WCS_PL_MAIN.delete_CSIP_V
    __del__ = lambda self : None;
CSIP_V_swigregister = _WCS_PL_MAIN.CSIP_V_swigregister
CSIP_V_swigregister(CSIP_V)

class PAIR_V(_object):
    """Proxy of C++ PAIR_V class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PAIR_V, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PAIR_V, name)
    __repr__ = _swig_repr
    def iterator(*args):
        """iterator(self, PyObject PYTHON_SELF) -> PySwigIterator"""
        return _WCS_PL_MAIN.PAIR_V_iterator(*args)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args):
        """__nonzero__(self) -> bool"""
        return _WCS_PL_MAIN.PAIR_V___nonzero__(*args)

    def __len__(*args):
        """__len__(self) -> size_type"""
        return _WCS_PL_MAIN.PAIR_V___len__(*args)

    def pop(*args):
        """pop(self) -> value_type"""
        return _WCS_PL_MAIN.PAIR_V_pop(*args)

    def __getslice__(*args):
        """__getslice__(self, difference_type i, difference_type j) -> PAIR_V"""
        return _WCS_PL_MAIN.PAIR_V___getslice__(*args)

    def __setslice__(*args):
        """__setslice__(self, difference_type i, difference_type j, PAIR_V v)"""
        return _WCS_PL_MAIN.PAIR_V___setslice__(*args)

    def __delslice__(*args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _WCS_PL_MAIN.PAIR_V___delslice__(*args)

    def __delitem__(*args):
        """__delitem__(self, difference_type i)"""
        return _WCS_PL_MAIN.PAIR_V___delitem__(*args)

    def __getitem__(*args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _WCS_PL_MAIN.PAIR_V___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, difference_type i, value_type x)"""
        return _WCS_PL_MAIN.PAIR_V___setitem__(*args)

    def append(*args):
        """append(self, value_type x)"""
        return _WCS_PL_MAIN.PAIR_V_append(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _WCS_PL_MAIN.PAIR_V_empty(*args)

    def size(*args):
        """size(self) -> size_type"""
        return _WCS_PL_MAIN.PAIR_V_size(*args)

    def clear(*args):
        """clear(self)"""
        return _WCS_PL_MAIN.PAIR_V_clear(*args)

    def swap(*args):
        """swap(self, PAIR_V v)"""
        return _WCS_PL_MAIN.PAIR_V_swap(*args)

    def get_allocator(*args):
        """get_allocator(self) -> allocator_type"""
        return _WCS_PL_MAIN.PAIR_V_get_allocator(*args)

    def begin(*args):
        """begin(self) -> const_iterator"""
        return _WCS_PL_MAIN.PAIR_V_begin(*args)

    def end(*args):
        """end(self) -> const_iterator"""
        return _WCS_PL_MAIN.PAIR_V_end(*args)

    def rbegin(*args):
        """rbegin(self) -> const_reverse_iterator"""
        return _WCS_PL_MAIN.PAIR_V_rbegin(*args)

    def rend(*args):
        """rend(self) -> const_reverse_iterator"""
        return _WCS_PL_MAIN.PAIR_V_rend(*args)

    def pop_back(*args):
        """pop_back(self)"""
        return _WCS_PL_MAIN.PAIR_V_pop_back(*args)

    def erase(*args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _WCS_PL_MAIN.PAIR_V_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> PAIR_V
        __init__(self, PAIR_V ?) -> PAIR_V
        __init__(self, size_type size) -> PAIR_V
        __init__(self, size_type size, value_type value) -> PAIR_V
        """
        this = _WCS_PL_MAIN.new_PAIR_V(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args):
        """push_back(self, value_type x)"""
        return _WCS_PL_MAIN.PAIR_V_push_back(*args)

    def front(*args):
        """front(self) -> value_type"""
        return _WCS_PL_MAIN.PAIR_V_front(*args)

    def back(*args):
        """back(self) -> value_type"""
        return _WCS_PL_MAIN.PAIR_V_back(*args)

    def assign(*args):
        """assign(self, size_type n, value_type x)"""
        return _WCS_PL_MAIN.PAIR_V_assign(*args)

    def resize(*args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _WCS_PL_MAIN.PAIR_V_resize(*args)

    def insert(*args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _WCS_PL_MAIN.PAIR_V_insert(*args)

    def reserve(*args):
        """reserve(self, size_type n)"""
        return _WCS_PL_MAIN.PAIR_V_reserve(*args)

    def capacity(*args):
        """capacity(self) -> size_type"""
        return _WCS_PL_MAIN.PAIR_V_capacity(*args)

    __swig_destroy__ = _WCS_PL_MAIN.delete_PAIR_V
    __del__ = lambda self : None;
PAIR_V_swigregister = _WCS_PL_MAIN.PAIR_V_swigregister
PAIR_V_swigregister(PAIR_V)

class CL_WCSACCP(_object):
    """Proxy of C++ CL_WCSACCP class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, CL_WCSACCP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CL_WCSACCP, name)
    __repr__ = _swig_repr
    __swig_setmethods__["WCSPtr"] = _WCS_PL_MAIN.CL_WCSACCP_WCSPtr_set
    __swig_getmethods__["WCSPtr"] = _WCS_PL_MAIN.CL_WCSACCP_WCSPtr_get
    if _newclass:WCSPtr = _swig_property(_WCS_PL_MAIN.CL_WCSACCP_WCSPtr_get, _WCS_PL_MAIN.CL_WCSACCP_WCSPtr_set)
    __swig_setmethods__["APROP"] = _WCS_PL_MAIN.CL_WCSACCP_APROP_set
    __swig_getmethods__["APROP"] = _WCS_PL_MAIN.CL_WCSACCP_APROP_get
    if _newclass:APROP = _swig_property(_WCS_PL_MAIN.CL_WCSACCP_APROP_get, _WCS_PL_MAIN.CL_WCSACCP_APROP_set)
    __swig_setmethods__["CPROP"] = _WCS_PL_MAIN.CL_WCSACCP_CPROP_set
    __swig_getmethods__["CPROP"] = _WCS_PL_MAIN.CL_WCSACCP_CPROP_get
    if _newclass:CPROP = _swig_property(_WCS_PL_MAIN.CL_WCSACCP_CPROP_get, _WCS_PL_MAIN.CL_WCSACCP_CPROP_set)
    __swig_setmethods__["CSIP"] = _WCS_PL_MAIN.CL_WCSACCP_CSIP_set
    __swig_getmethods__["CSIP"] = _WCS_PL_MAIN.CL_WCSACCP_CSIP_get
    if _newclass:CSIP = _swig_property(_WCS_PL_MAIN.CL_WCSACCP_CSIP_get, _WCS_PL_MAIN.CL_WCSACCP_CSIP_set)
    __swig_setmethods__["PAIR"] = _WCS_PL_MAIN.CL_WCSACCP_PAIR_set
    __swig_getmethods__["PAIR"] = _WCS_PL_MAIN.CL_WCSACCP_PAIR_get
    if _newclass:PAIR = _swig_property(_WCS_PL_MAIN.CL_WCSACCP_PAIR_get, _WCS_PL_MAIN.CL_WCSACCP_PAIR_set)
    __swig_setmethods__["CPROPList"] = _WCS_PL_MAIN.CL_WCSACCP_CPROPList_set
    __swig_getmethods__["CPROPList"] = _WCS_PL_MAIN.CL_WCSACCP_CPROPList_get
    if _newclass:CPROPList = _swig_property(_WCS_PL_MAIN.CL_WCSACCP_CPROPList_get, _WCS_PL_MAIN.CL_WCSACCP_CPROPList_set)
    __swig_setmethods__["CSIPList"] = _WCS_PL_MAIN.CL_WCSACCP_CSIPList_set
    __swig_getmethods__["CSIPList"] = _WCS_PL_MAIN.CL_WCSACCP_CSIPList_get
    if _newclass:CSIPList = _swig_property(_WCS_PL_MAIN.CL_WCSACCP_CSIPList_get, _WCS_PL_MAIN.CL_WCSACCP_CSIPList_set)
    def __init__(self, *args): 
        """__init__(self) -> CL_WCSACCP"""
        this = _WCS_PL_MAIN.new_CL_WCSACCP(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _WCS_PL_MAIN.delete_CL_WCSACCP
    __del__ = lambda self : None;
CL_WCSACCP_swigregister = _WCS_PL_MAIN.CL_WCSACCP_swigregister
CL_WCSACCP_swigregister(CL_WCSACCP)


def F_WCS_TANSIP_V(*args):
  """F_WCS_TANSIP_V(vvSourceMatch ?, Ptr ?, Ptr ?, Ptr ?) -> CL_WCSACCP"""
  return _WCS_PL_MAIN.F_WCS_TANSIP_V(*args)

def F_WCS_TANSIP_V_local(*args):
  """F_WCS_TANSIP_V_local(string ?, Ptr ?, Ptr ?, Ptr ?) -> CL_WCSACCP"""
  return _WCS_PL_MAIN.F_WCS_TANSIP_V_local(*args)

def F_WCS_GETWCSLIST(*args):
  """F_WCS_GETWCSLIST(CL_WCSACCP ?) -> resultWcs_V"""
  return _WCS_PL_MAIN.F_WCS_GETWCSLIST(*args)

def F_WCS_GETAPROP(*args):
  """F_WCS_GETAPROP(CL_WCSACCP ?) -> CL_APROP"""
  return _WCS_PL_MAIN.F_WCS_GETAPROP(*args)

def F_WCS_GETCPROP(*args):
  """F_WCS_GETCPROP(CL_WCSACCP ?) -> CL_CPROP"""
  return _WCS_PL_MAIN.F_WCS_GETCPROP(*args)

def F_WCS_GETCSIP(*args):
  """F_WCS_GETCSIP(CL_WCSACCP ?) -> CL_CSIP"""
  return _WCS_PL_MAIN.F_WCS_GETCSIP(*args)

def F_WCS_GETPAIR(*args):
  """F_WCS_GETPAIR(CL_WCSACCP ?) -> CL_PAIR"""
  return _WCS_PL_MAIN.F_WCS_GETPAIR(*args)

def F_WCS_GETCPROPLIST(*args):
  """F_WCS_GETCPROPLIST(CL_WCSACCP ?) -> CPROP_V"""
  return _WCS_PL_MAIN.F_WCS_GETCPROPLIST(*args)

def F_WCS_GETCSIPLIST(*args):
  """F_WCS_GETCSIPLIST(CL_WCSACCP ?) -> CSIP_V"""
  return _WCS_PL_MAIN.F_WCS_GETCSIPLIST(*args)

def F_WCS_EMPTYMETADATA(*args):
  """F_WCS_EMPTYMETADATA() -> Ptr"""
  return _WCS_PL_MAIN.F_WCS_EMPTYMETADATA(*args)


