# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


"""

Python interface to hsc::meas::tansip

"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SLVTS_SWIGLib', [dirname(__file__)])
        except ImportError:
            import _SLVTS_SWIGLib
            return _SLVTS_SWIGLib
        if fp is not None:
            try:
                _mod = imp.load_module('_SLVTS_SWIGLib', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _SLVTS_SWIGLib = swig_import_helper()
    del swig_import_helper
else:
    import _SLVTS_SWIGLib
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SLVTS_SWIGLib.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(self) -> PyObject"""
        return _SLVTS_SWIGLib.SwigPyIterator_value(self)

    def incr(self, n = 1):
        """
        incr(self, size_t n = 1) -> SwigPyIterator
        incr(self) -> SwigPyIterator
        """
        return _SLVTS_SWIGLib.SwigPyIterator_incr(self, n)

    def decr(self, n = 1):
        """
        decr(self, size_t n = 1) -> SwigPyIterator
        decr(self) -> SwigPyIterator
        """
        return _SLVTS_SWIGLib.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """distance(self, SwigPyIterator x) -> ptrdiff_t"""
        return _SLVTS_SWIGLib.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """equal(self, SwigPyIterator x) -> bool"""
        return _SLVTS_SWIGLib.SwigPyIterator_equal(self, *args)

    def copy(self):
        """copy(self) -> SwigPyIterator"""
        return _SLVTS_SWIGLib.SwigPyIterator_copy(self)

    def next(self):
        """next(self) -> PyObject"""
        return _SLVTS_SWIGLib.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(self) -> PyObject"""
        return _SLVTS_SWIGLib.SwigPyIterator___next__(self)

    def previous(self):
        """previous(self) -> PyObject"""
        return _SLVTS_SWIGLib.SwigPyIterator_previous(self)

    def advance(self, *args):
        """advance(self, ptrdiff_t n) -> SwigPyIterator"""
        return _SLVTS_SWIGLib.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """__eq__(self, SwigPyIterator x) -> bool"""
        return _SLVTS_SWIGLib.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, SwigPyIterator x) -> bool"""
        return _SLVTS_SWIGLib.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _SLVTS_SWIGLib.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _SLVTS_SWIGLib.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """__add__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _SLVTS_SWIGLib.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, ptrdiff_t n) -> SwigPyIterator
        __sub__(self, SwigPyIterator x) -> ptrdiff_t
        """
        return _SLVTS_SWIGLib.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _SLVTS_SWIGLib.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ios_base(_object):
    """Proxy of C++ std::ios_base class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ios_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ios_base, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _SLVTS_SWIGLib.ios_base_erase_event
    imbue_event = _SLVTS_SWIGLib.ios_base_imbue_event
    copyfmt_event = _SLVTS_SWIGLib.ios_base_copyfmt_event
    def register_callback(self, *args):
        """register_callback(self, event_callback __fn, int __index)"""
        return _SLVTS_SWIGLib.ios_base_register_callback(self, *args)

    def flags(self, *args):
        """
        flags(self) -> fmtflags
        flags(self, fmtflags __fmtfl) -> fmtflags
        """
        return _SLVTS_SWIGLib.ios_base_flags(self, *args)

    def setf(self, *args):
        """
        setf(self, fmtflags __fmtfl) -> fmtflags
        setf(self, fmtflags __fmtfl, fmtflags __mask) -> fmtflags
        """
        return _SLVTS_SWIGLib.ios_base_setf(self, *args)

    def unsetf(self, *args):
        """unsetf(self, fmtflags __mask)"""
        return _SLVTS_SWIGLib.ios_base_unsetf(self, *args)

    def precision(self, *args):
        """
        precision(self) -> streamsize
        precision(self, streamsize __prec) -> streamsize
        """
        return _SLVTS_SWIGLib.ios_base_precision(self, *args)

    def width(self, *args):
        """
        width(self) -> streamsize
        width(self, streamsize __wide) -> streamsize
        """
        return _SLVTS_SWIGLib.ios_base_width(self, *args)

    def sync_with_stdio(__sync = True):
        """
        sync_with_stdio(bool __sync = True) -> bool
        sync_with_stdio() -> bool
        """
        return _SLVTS_SWIGLib.ios_base_sync_with_stdio(__sync)

    if _newclass:sync_with_stdio = staticmethod(sync_with_stdio)
    __swig_getmethods__["sync_with_stdio"] = lambda x: sync_with_stdio
    def imbue(self, *args):
        """imbue(self, locale __loc) -> locale"""
        return _SLVTS_SWIGLib.ios_base_imbue(self, *args)

    def getloc(self):
        """getloc(self) -> locale"""
        return _SLVTS_SWIGLib.ios_base_getloc(self)

    def xalloc():
        """xalloc() -> int"""
        return _SLVTS_SWIGLib.ios_base_xalloc()

    if _newclass:xalloc = staticmethod(xalloc)
    __swig_getmethods__["xalloc"] = lambda x: xalloc
    def iword(self, *args):
        """iword(self, int __ix) -> long"""
        return _SLVTS_SWIGLib.ios_base_iword(self, *args)

    def pword(self, *args):
        """pword(self, int __ix) -> void"""
        return _SLVTS_SWIGLib.ios_base_pword(self, *args)

    __swig_destroy__ = _SLVTS_SWIGLib.delete_ios_base
    __del__ = lambda self : None;
ios_base_swigregister = _SLVTS_SWIGLib.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _SLVTS_SWIGLib.cvar
ios_base.boolalpha = _SLVTS_SWIGLib.cvar.ios_base_boolalpha
ios_base.dec = _SLVTS_SWIGLib.cvar.ios_base_dec
ios_base.fixed = _SLVTS_SWIGLib.cvar.ios_base_fixed
ios_base.hex = _SLVTS_SWIGLib.cvar.ios_base_hex
ios_base.internal = _SLVTS_SWIGLib.cvar.ios_base_internal
ios_base.left = _SLVTS_SWIGLib.cvar.ios_base_left
ios_base.oct = _SLVTS_SWIGLib.cvar.ios_base_oct
ios_base.right = _SLVTS_SWIGLib.cvar.ios_base_right
ios_base.scientific = _SLVTS_SWIGLib.cvar.ios_base_scientific
ios_base.showbase = _SLVTS_SWIGLib.cvar.ios_base_showbase
ios_base.showpoint = _SLVTS_SWIGLib.cvar.ios_base_showpoint
ios_base.showpos = _SLVTS_SWIGLib.cvar.ios_base_showpos
ios_base.skipws = _SLVTS_SWIGLib.cvar.ios_base_skipws
ios_base.unitbuf = _SLVTS_SWIGLib.cvar.ios_base_unitbuf
ios_base.uppercase = _SLVTS_SWIGLib.cvar.ios_base_uppercase
ios_base.adjustfield = _SLVTS_SWIGLib.cvar.ios_base_adjustfield
ios_base.basefield = _SLVTS_SWIGLib.cvar.ios_base_basefield
ios_base.floatfield = _SLVTS_SWIGLib.cvar.ios_base_floatfield
ios_base.badbit = _SLVTS_SWIGLib.cvar.ios_base_badbit
ios_base.eofbit = _SLVTS_SWIGLib.cvar.ios_base_eofbit
ios_base.failbit = _SLVTS_SWIGLib.cvar.ios_base_failbit
ios_base.goodbit = _SLVTS_SWIGLib.cvar.ios_base_goodbit
ios_base.app = _SLVTS_SWIGLib.cvar.ios_base_app
ios_base.ate = _SLVTS_SWIGLib.cvar.ios_base_ate
ios_base.binary = _SLVTS_SWIGLib.cvar.ios_base_binary
ios_base.ios_base_in = _SLVTS_SWIGLib.cvar.ios_base_ios_base_in
ios_base.out = _SLVTS_SWIGLib.cvar.ios_base_out
ios_base.trunc = _SLVTS_SWIGLib.cvar.ios_base_trunc
ios_base.beg = _SLVTS_SWIGLib.cvar.ios_base_beg
ios_base.cur = _SLVTS_SWIGLib.cvar.ios_base_cur
ios_base.end = _SLVTS_SWIGLib.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync = True):
  """
    sync_with_stdio(bool __sync = True) -> bool
    ios_base_sync_with_stdio() -> bool
    """
  return _SLVTS_SWIGLib.ios_base_sync_with_stdio(__sync)

def ios_base_xalloc():
  """ios_base_xalloc() -> int"""
  return _SLVTS_SWIGLib.ios_base_xalloc()

class ios(ios_base):
    """Proxy of C++ std::basic_ios<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [ios_base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ios, name, value)
    __swig_getmethods__ = {}
    for _s in [ios_base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ios, name)
    __repr__ = _swig_repr
    def rdstate(self):
        """rdstate(self) -> iostate"""
        return _SLVTS_SWIGLib.ios_rdstate(self)

    def clear(self, *args):
        """
        clear(self, iostate __state = goodbit)
        clear(self)
        """
        return _SLVTS_SWIGLib.ios_clear(self, *args)

    def setstate(self, *args):
        """setstate(self, iostate __state)"""
        return _SLVTS_SWIGLib.ios_setstate(self, *args)

    def good(self):
        """good(self) -> bool"""
        return _SLVTS_SWIGLib.ios_good(self)

    def eof(self):
        """eof(self) -> bool"""
        return _SLVTS_SWIGLib.ios_eof(self)

    def fail(self):
        """fail(self) -> bool"""
        return _SLVTS_SWIGLib.ios_fail(self)

    def bad(self):
        """bad(self) -> bool"""
        return _SLVTS_SWIGLib.ios_bad(self)

    def exceptions(self, *args):
        """
        exceptions(self) -> iostate
        exceptions(self, iostate __except)
        """
        return _SLVTS_SWIGLib.ios_exceptions(self, *args)

    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ios"""
        this = _SLVTS_SWIGLib.new_ios(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SLVTS_SWIGLib.delete_ios
    __del__ = lambda self : None;
    def tie(self, *args):
        """
        tie(self) -> ostream
        tie(self, ostream __tiestr) -> ostream
        """
        return _SLVTS_SWIGLib.ios_tie(self, *args)

    def rdbuf(self, *args):
        """
        rdbuf(self) -> std::basic_streambuf<(char,std::char_traits<(char)>)>
        rdbuf(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> std::basic_streambuf<(char,std::char_traits<(char)>)>
        """
        return _SLVTS_SWIGLib.ios_rdbuf(self, *args)

    def copyfmt(self, *args):
        """copyfmt(self, ios __rhs) -> ios"""
        return _SLVTS_SWIGLib.ios_copyfmt(self, *args)

    def fill(self, *args):
        """
        fill(self) -> char_type
        fill(self, char_type __ch) -> char_type
        """
        return _SLVTS_SWIGLib.ios_fill(self, *args)

    def imbue(self, *args):
        """imbue(self, locale __loc) -> locale"""
        return _SLVTS_SWIGLib.ios_imbue(self, *args)

    def narrow(self, *args):
        """narrow(self, char_type __c, char __dfault) -> char"""
        return _SLVTS_SWIGLib.ios_narrow(self, *args)

    def widen(self, *args):
        """widen(self, char __c) -> char_type"""
        return _SLVTS_SWIGLib.ios_widen(self, *args)

ios_swigregister = _SLVTS_SWIGLib.ios_swigregister
ios_swigregister(ios)

class ostream(ios):
    """Proxy of C++ std::basic_ostream<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ostream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ostream"""
        this = _SLVTS_SWIGLib.new_ostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SLVTS_SWIGLib.delete_ostream
    __del__ = lambda self : None;
    def __lshift__(self, *args):
        """
        __lshift__(self, ostream __pf) -> ostream
        __lshift__(self, ios __pf) -> ostream
        __lshift__(self, ios_base __pf) -> ostream
        __lshift__(self, long __n) -> ostream
        __lshift__(self, unsigned long __n) -> ostream
        __lshift__(self, bool __n) -> ostream
        __lshift__(self, short __n) -> ostream
        __lshift__(self, unsigned short __n) -> ostream
        __lshift__(self, int __n) -> ostream
        __lshift__(self, unsigned int __n) -> ostream
        __lshift__(self, long long __n) -> ostream
        __lshift__(self, unsigned long long __n) -> ostream
        __lshift__(self, double __f) -> ostream
        __lshift__(self, float __f) -> ostream
        __lshift__(self, long double __f) -> ostream
        __lshift__(self, void __p) -> ostream
        __lshift__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ostream
        __lshift__(self, std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)> s) -> ostream
        """
        return _SLVTS_SWIGLib.ostream___lshift__(self, *args)

    def put(self, *args):
        """put(self, char_type __c) -> ostream"""
        return _SLVTS_SWIGLib.ostream_put(self, *args)

    def write(self, *args):
        """write(self, char_type __s, streamsize __n) -> ostream"""
        return _SLVTS_SWIGLib.ostream_write(self, *args)

    def flush(self):
        """flush(self) -> ostream"""
        return _SLVTS_SWIGLib.ostream_flush(self)

    def tellp(self):
        """tellp(self) -> pos_type"""
        return _SLVTS_SWIGLib.ostream_tellp(self)

    def seekp(self, *args):
        """
        seekp(self, pos_type arg0) -> ostream
        seekp(self, off_type arg0, seekdir arg1) -> ostream
        """
        return _SLVTS_SWIGLib.ostream_seekp(self, *args)

ostream_swigregister = _SLVTS_SWIGLib.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    """Proxy of C++ std::basic_istream<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, istream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, istream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream"""
        this = _SLVTS_SWIGLib.new_istream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SLVTS_SWIGLib.delete_istream
    __del__ = lambda self : None;
    def __rshift__(self, *args):
        """
        __rshift__(self, istream __pf) -> istream
        __rshift__(self, ios __pf) -> istream
        __rshift__(self, ios_base __pf) -> istream
        __rshift__(self, bool __n) -> istream
        __rshift__(self, short __n) -> istream
        __rshift__(self, unsigned short __n) -> istream
        __rshift__(self, int __n) -> istream
        __rshift__(self, unsigned int __n) -> istream
        __rshift__(self, long __n) -> istream
        __rshift__(self, unsigned long __n) -> istream
        __rshift__(self, long long __n) -> istream
        __rshift__(self, unsigned long long __n) -> istream
        __rshift__(self, float __f) -> istream
        __rshift__(self, double __f) -> istream
        __rshift__(self, long double __f) -> istream
        __rshift__(self, void __p) -> istream
        __rshift__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream
        """
        return _SLVTS_SWIGLib.istream___rshift__(self, *args)

    def gcount(self):
        """gcount(self) -> streamsize"""
        return _SLVTS_SWIGLib.istream_gcount(self)

    def get(self, *args):
        """
        get(self) -> int_type
        get(self, char_type __c) -> istream
        get(self, char_type __s, streamsize __n, char_type __delim) -> istream
        get(self, char_type __s, streamsize __n) -> istream
        get(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb, 
            char_type __delim) -> istream
        get(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream
        """
        return _SLVTS_SWIGLib.istream_get(self, *args)

    def getline(self, *args):
        """
        getline(self, char_type __s, streamsize __n, char_type __delim) -> istream
        getline(self, char_type __s, streamsize __n) -> istream
        """
        return _SLVTS_SWIGLib.istream_getline(self, *args)

    def ignore(self, *args):
        """
        ignore(self, streamsize __n = 1, int_type __delim = std::char_traits< char >::eof()) -> istream
        ignore(self, streamsize __n = 1) -> istream
        ignore(self) -> istream
        """
        return _SLVTS_SWIGLib.istream_ignore(self, *args)

    def peek(self):
        """peek(self) -> int_type"""
        return _SLVTS_SWIGLib.istream_peek(self)

    def read(self, *args):
        """read(self, char_type __s, streamsize __n) -> istream"""
        return _SLVTS_SWIGLib.istream_read(self, *args)

    def readsome(self, *args):
        """readsome(self, char_type __s, streamsize __n) -> streamsize"""
        return _SLVTS_SWIGLib.istream_readsome(self, *args)

    def putback(self, *args):
        """putback(self, char_type __c) -> istream"""
        return _SLVTS_SWIGLib.istream_putback(self, *args)

    def unget(self):
        """unget(self) -> istream"""
        return _SLVTS_SWIGLib.istream_unget(self)

    def sync(self):
        """sync(self) -> int"""
        return _SLVTS_SWIGLib.istream_sync(self)

    def tellg(self):
        """tellg(self) -> pos_type"""
        return _SLVTS_SWIGLib.istream_tellg(self)

    def seekg(self, *args):
        """
        seekg(self, pos_type arg0) -> istream
        seekg(self, off_type arg0, seekdir arg1) -> istream
        """
        return _SLVTS_SWIGLib.istream_seekg(self, *args)

istream_swigregister = _SLVTS_SWIGLib.istream_swigregister
istream_swigregister(istream)

class iostream(istream,ostream):
    """Proxy of C++ std::basic_iostream<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [istream,ostream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, iostream, name, value)
    __swig_getmethods__ = {}
    for _s in [istream,ostream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> iostream"""
        this = _SLVTS_SWIGLib.new_iostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SLVTS_SWIGLib.delete_iostream
    __del__ = lambda self : None;
iostream_swigregister = _SLVTS_SWIGLib.iostream_swigregister
iostream_swigregister(iostream)

endl_cb_ptr = _SLVTS_SWIGLib.endl_cb_ptr

def endl(*args):
  """endl(ostream arg0) -> ostream"""
  return _SLVTS_SWIGLib.endl(*args)
endl = _SLVTS_SWIGLib.endl
ends_cb_ptr = _SLVTS_SWIGLib.ends_cb_ptr

def ends(*args):
  """ends(ostream arg0) -> ostream"""
  return _SLVTS_SWIGLib.ends(*args)
ends = _SLVTS_SWIGLib.ends
flush_cb_ptr = _SLVTS_SWIGLib.flush_cb_ptr

def flush(*args):
  """flush(ostream arg0) -> ostream"""
  return _SLVTS_SWIGLib.flush(*args)
flush = _SLVTS_SWIGLib.flush
SHARED_PTR_DISOWN = _SLVTS_SWIGLib.SHARED_PTR_DISOWN
LSST_BASE_BASE_H = _SLVTS_SWIGLib.LSST_BASE_BASE_H
import lsst.pex.exceptions

import lsst.utils

def version(HeadURL = r"$HeadURL: ssh://hsc-gw2.mtk.nao.ac.jp/ana/hgrepo/hscAstrom/python/hsc/meas/read/okura_read.i $"):
    version_svn = lsst.utils.guessSvnVersion(HeadURL)

    try:
        import eups
    except ImportError:
        return version_svn
    else:
        try:
            version_eups = eups.setup("solvetansip")
        except AttributeError:
            return version_svn

    if version_eups == version_svn:
        return version_svn
    else:
        return "%s (setup: %s)" % (version_svn, version_eups)

import lsst.afw.image.imageLib
import lsst.daf.base.baseLib
import lsst.pex.exceptions.exceptionsLib
import lsst.pex.policy.policyLib
import lsst.daf.persistence.persistenceLib
import lsst.pex.logging.loggingLib
import lsst.afw.geom.geomLib
import lsst.afw.coord.coordLib
import lsst.afw.fits.fitsLib
import lsst.afw.table.io.ioLib
import lsst.afw.cameraGeom.cameraGeomLib
import lsst.afw.geom.ellipses.ellipsesLib
class VS(_object):
    """Proxy of C++ std::vector<(std::string)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, VS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VS, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _SLVTS_SWIGLib.VS_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _SLVTS_SWIGLib.VS___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _SLVTS_SWIGLib.VS___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _SLVTS_SWIGLib.VS___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _SLVTS_SWIGLib.VS_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> VectorString"""
        return _SLVTS_SWIGLib.VS___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, difference_type i, difference_type j, VectorString v = std::vector< std::string,std::allocator< std::string > >())
        __setslice__(self, difference_type i, difference_type j)
        """
        return _SLVTS_SWIGLib.VS___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _SLVTS_SWIGLib.VS___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _SLVTS_SWIGLib.VS___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> VectorString
        __getitem__(self, difference_type i) -> value_type
        """
        return _SLVTS_SWIGLib.VS___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, VectorString v)
        __setitem__(self, PySliceObject slice)
        __setitem__(self, difference_type i, value_type x)
        """
        return _SLVTS_SWIGLib.VS___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _SLVTS_SWIGLib.VS_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _SLVTS_SWIGLib.VS_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _SLVTS_SWIGLib.VS_size(self)

    def clear(self):
        """clear(self)"""
        return _SLVTS_SWIGLib.VS_clear(self)

    def swap(self, *args):
        """swap(self, VectorString v)"""
        return _SLVTS_SWIGLib.VS_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _SLVTS_SWIGLib.VS_get_allocator(self)

    def begin(self):
        """begin(self) -> iterator"""
        return _SLVTS_SWIGLib.VS_begin(self)

    def end(self):
        """end(self) -> iterator"""
        return _SLVTS_SWIGLib.VS_end(self)

    def rbegin(self):
        """rbegin(self) -> reverse_iterator"""
        return _SLVTS_SWIGLib.VS_rbegin(self)

    def rend(self):
        """rend(self) -> reverse_iterator"""
        return _SLVTS_SWIGLib.VS_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _SLVTS_SWIGLib.VS_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _SLVTS_SWIGLib.VS_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> VS
        __init__(self, VectorString arg0) -> VS
        __init__(self, size_type size) -> VS
        __init__(self, size_type size, value_type value) -> VS
        """
        this = _SLVTS_SWIGLib.new_VS(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _SLVTS_SWIGLib.VS_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _SLVTS_SWIGLib.VS_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _SLVTS_SWIGLib.VS_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _SLVTS_SWIGLib.VS_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _SLVTS_SWIGLib.VS_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _SLVTS_SWIGLib.VS_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _SLVTS_SWIGLib.VS_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _SLVTS_SWIGLib.VS_capacity(self)

    __swig_destroy__ = _SLVTS_SWIGLib.delete_VS
    __del__ = lambda self : None;
VS_swigregister = _SLVTS_SWIGLib.VS_swigregister
VS_swigregister(VS)

class VVS(_object):
    """Proxy of C++ std::vector<(std::vector<(std::string)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, VVS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VVS, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _SLVTS_SWIGLib.VVS_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _SLVTS_SWIGLib.VVS___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _SLVTS_SWIGLib.VVS___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _SLVTS_SWIGLib.VVS___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _SLVTS_SWIGLib.VVS_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> VVS"""
        return _SLVTS_SWIGLib.VVS___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, difference_type i, difference_type j, VVS v = std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >())
        __setslice__(self, difference_type i, difference_type j)
        """
        return _SLVTS_SWIGLib.VVS___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _SLVTS_SWIGLib.VVS___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _SLVTS_SWIGLib.VVS___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> VVS
        __getitem__(self, difference_type i) -> value_type
        """
        return _SLVTS_SWIGLib.VVS___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, VVS v)
        __setitem__(self, PySliceObject slice)
        __setitem__(self, difference_type i, value_type x)
        """
        return _SLVTS_SWIGLib.VVS___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _SLVTS_SWIGLib.VVS_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _SLVTS_SWIGLib.VVS_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _SLVTS_SWIGLib.VVS_size(self)

    def clear(self):
        """clear(self)"""
        return _SLVTS_SWIGLib.VVS_clear(self)

    def swap(self, *args):
        """swap(self, VVS v)"""
        return _SLVTS_SWIGLib.VVS_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _SLVTS_SWIGLib.VVS_get_allocator(self)

    def begin(self):
        """begin(self) -> iterator"""
        return _SLVTS_SWIGLib.VVS_begin(self)

    def end(self):
        """end(self) -> iterator"""
        return _SLVTS_SWIGLib.VVS_end(self)

    def rbegin(self):
        """rbegin(self) -> reverse_iterator"""
        return _SLVTS_SWIGLib.VVS_rbegin(self)

    def rend(self):
        """rend(self) -> reverse_iterator"""
        return _SLVTS_SWIGLib.VVS_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _SLVTS_SWIGLib.VVS_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _SLVTS_SWIGLib.VVS_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> VVS
        __init__(self, VVS arg0) -> VVS
        __init__(self, size_type size) -> VVS
        __init__(self, size_type size, value_type value) -> VVS
        """
        this = _SLVTS_SWIGLib.new_VVS(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _SLVTS_SWIGLib.VVS_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _SLVTS_SWIGLib.VVS_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _SLVTS_SWIGLib.VVS_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _SLVTS_SWIGLib.VVS_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _SLVTS_SWIGLib.VVS_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _SLVTS_SWIGLib.VVS_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _SLVTS_SWIGLib.VVS_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _SLVTS_SWIGLib.VVS_capacity(self)

    __swig_destroy__ = _SLVTS_SWIGLib.delete_VVS
    __del__ = lambda self : None;
VVS_swigregister = _SLVTS_SWIGLib.VVS_swigregister
VVS_swigregister(VVS)

class VVVS(_object):
    """Proxy of C++ std::vector<(std::vector<(std::vector<(std::string)>)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, VVVS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VVVS, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _SLVTS_SWIGLib.VVVS_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _SLVTS_SWIGLib.VVVS___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _SLVTS_SWIGLib.VVVS___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _SLVTS_SWIGLib.VVVS___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _SLVTS_SWIGLib.VVVS_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> VVVS"""
        return _SLVTS_SWIGLib.VVVS___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, difference_type i, difference_type j, VVVS v = std::vector< std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >,std::allocator< std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > > >())
        __setslice__(self, difference_type i, difference_type j)
        """
        return _SLVTS_SWIGLib.VVVS___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _SLVTS_SWIGLib.VVVS___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _SLVTS_SWIGLib.VVVS___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> VVVS
        __getitem__(self, difference_type i) -> value_type
        """
        return _SLVTS_SWIGLib.VVVS___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, VVVS v)
        __setitem__(self, PySliceObject slice)
        __setitem__(self, difference_type i, value_type x)
        """
        return _SLVTS_SWIGLib.VVVS___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _SLVTS_SWIGLib.VVVS_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _SLVTS_SWIGLib.VVVS_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _SLVTS_SWIGLib.VVVS_size(self)

    def clear(self):
        """clear(self)"""
        return _SLVTS_SWIGLib.VVVS_clear(self)

    def swap(self, *args):
        """swap(self, VVVS v)"""
        return _SLVTS_SWIGLib.VVVS_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _SLVTS_SWIGLib.VVVS_get_allocator(self)

    def begin(self):
        """begin(self) -> iterator"""
        return _SLVTS_SWIGLib.VVVS_begin(self)

    def end(self):
        """end(self) -> iterator"""
        return _SLVTS_SWIGLib.VVVS_end(self)

    def rbegin(self):
        """rbegin(self) -> reverse_iterator"""
        return _SLVTS_SWIGLib.VVVS_rbegin(self)

    def rend(self):
        """rend(self) -> reverse_iterator"""
        return _SLVTS_SWIGLib.VVVS_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _SLVTS_SWIGLib.VVVS_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _SLVTS_SWIGLib.VVVS_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> VVVS
        __init__(self, VVVS arg0) -> VVVS
        __init__(self, size_type size) -> VVVS
        __init__(self, size_type size, value_type value) -> VVVS
        """
        this = _SLVTS_SWIGLib.new_VVVS(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _SLVTS_SWIGLib.VVVS_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _SLVTS_SWIGLib.VVVS_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _SLVTS_SWIGLib.VVVS_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _SLVTS_SWIGLib.VVVS_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _SLVTS_SWIGLib.VVVS_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _SLVTS_SWIGLib.VVVS_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _SLVTS_SWIGLib.VVVS_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _SLVTS_SWIGLib.VVVS_capacity(self)

    __swig_destroy__ = _SLVTS_SWIGLib.delete_VVVS
    __del__ = lambda self : None;
VVVS_swigregister = _SLVTS_SWIGLib.VVVS_swigregister
VVVS_swigregister(VVVS)

class VSLVTS(_object):
    """Proxy of C++ std::vector<(p.CL_SLVTS)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, VSLVTS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VSLVTS, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _SLVTS_SWIGLib.VSLVTS_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _SLVTS_SWIGLib.VSLVTS___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _SLVTS_SWIGLib.VSLVTS___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _SLVTS_SWIGLib.VSLVTS___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _SLVTS_SWIGLib.VSLVTS_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> VSLVTS"""
        return _SLVTS_SWIGLib.VSLVTS___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, difference_type i, difference_type j, VSLVTS v = std::vector< CL_SLVTS *,std::allocator< CL_SLVTS * > >())
        __setslice__(self, difference_type i, difference_type j)
        """
        return _SLVTS_SWIGLib.VSLVTS___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _SLVTS_SWIGLib.VSLVTS___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _SLVTS_SWIGLib.VSLVTS___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> VSLVTS
        __getitem__(self, difference_type i) -> value_type
        """
        return _SLVTS_SWIGLib.VSLVTS___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, VSLVTS v)
        __setitem__(self, PySliceObject slice)
        __setitem__(self, difference_type i, value_type x)
        """
        return _SLVTS_SWIGLib.VSLVTS___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _SLVTS_SWIGLib.VSLVTS_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _SLVTS_SWIGLib.VSLVTS_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _SLVTS_SWIGLib.VSLVTS_size(self)

    def clear(self):
        """clear(self)"""
        return _SLVTS_SWIGLib.VSLVTS_clear(self)

    def swap(self, *args):
        """swap(self, VSLVTS v)"""
        return _SLVTS_SWIGLib.VSLVTS_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _SLVTS_SWIGLib.VSLVTS_get_allocator(self)

    def begin(self):
        """begin(self) -> iterator"""
        return _SLVTS_SWIGLib.VSLVTS_begin(self)

    def end(self):
        """end(self) -> iterator"""
        return _SLVTS_SWIGLib.VSLVTS_end(self)

    def rbegin(self):
        """rbegin(self) -> reverse_iterator"""
        return _SLVTS_SWIGLib.VSLVTS_rbegin(self)

    def rend(self):
        """rend(self) -> reverse_iterator"""
        return _SLVTS_SWIGLib.VSLVTS_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _SLVTS_SWIGLib.VSLVTS_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _SLVTS_SWIGLib.VSLVTS_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> VSLVTS
        __init__(self, VSLVTS arg0) -> VSLVTS
        __init__(self, size_type size) -> VSLVTS
        __init__(self, size_type size, value_type value) -> VSLVTS
        """
        this = _SLVTS_SWIGLib.new_VSLVTS(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _SLVTS_SWIGLib.VSLVTS_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _SLVTS_SWIGLib.VSLVTS_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _SLVTS_SWIGLib.VSLVTS_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _SLVTS_SWIGLib.VSLVTS_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _SLVTS_SWIGLib.VSLVTS_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _SLVTS_SWIGLib.VSLVTS_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _SLVTS_SWIGLib.VSLVTS_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _SLVTS_SWIGLib.VSLVTS_capacity(self)

    __swig_destroy__ = _SLVTS_SWIGLib.delete_VSLVTS
    __del__ = lambda self : None;
VSLVTS_swigregister = _SLVTS_SWIGLib.VSLVTS_swigregister
VSLVTS_swigregister(VSLVTS)


def SOLVETANSIP(*args):
  """SOLVETANSIP(VVVS SLVTS_Argvs) -> VSLVTS"""
  return _SLVTS_SWIGLib.SOLVETANSIP(*args)
class resultWcs_V(_object):
    """Proxy of C++ std::vector<(lsst::afw::image::TanWcs::Ptr)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, resultWcs_V, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, resultWcs_V, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _SLVTS_SWIGLib.resultWcs_V_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _SLVTS_SWIGLib.resultWcs_V___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _SLVTS_SWIGLib.resultWcs_V___bool__(self)

    def __len__(self):
        """__len__(self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::size_type"""
        return _SLVTS_SWIGLib.resultWcs_V___len__(self)

    def pop(self):
        """pop(self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type"""
        return _SLVTS_SWIGLib.resultWcs_V_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::difference_type i, 
            std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::difference_type j) -> resultWcs_V
        """
        return _SLVTS_SWIGLib.resultWcs_V___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::difference_type i, 
            std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::difference_type j, 
            resultWcs_V v = std::vector< boost::shared_ptr< lsst::afw::image::TanWcs >,std::allocator< boost::shared_ptr< lsst::afw::image::TanWcs > > >())
        __setslice__(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::difference_type i, 
            std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::difference_type j)
        """
        return _SLVTS_SWIGLib.resultWcs_V___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::difference_type i, 
            std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::difference_type j)
        """
        return _SLVTS_SWIGLib.resultWcs_V___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _SLVTS_SWIGLib.resultWcs_V___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> resultWcs_V
        __getitem__(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::difference_type i) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type
        """
        return _SLVTS_SWIGLib.resultWcs_V___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, resultWcs_V v)
        __setitem__(self, PySliceObject slice)
        __setitem__(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::difference_type i, 
            std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type x)
        """
        return _SLVTS_SWIGLib.resultWcs_V___setitem__(self, *args)

    def append(self, *args):
        """append(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type x)"""
        return _SLVTS_SWIGLib.resultWcs_V_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _SLVTS_SWIGLib.resultWcs_V_empty(self)

    def size(self):
        """size(self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::size_type"""
        return _SLVTS_SWIGLib.resultWcs_V_size(self)

    def clear(self):
        """clear(self)"""
        return _SLVTS_SWIGLib.resultWcs_V_clear(self)

    def swap(self, *args):
        """swap(self, resultWcs_V v)"""
        return _SLVTS_SWIGLib.resultWcs_V_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::allocator_type"""
        return _SLVTS_SWIGLib.resultWcs_V_get_allocator(self)

    def begin(self):
        """begin(self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::iterator"""
        return _SLVTS_SWIGLib.resultWcs_V_begin(self)

    def end(self):
        """end(self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::iterator"""
        return _SLVTS_SWIGLib.resultWcs_V_end(self)

    def rbegin(self):
        """rbegin(self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::reverse_iterator"""
        return _SLVTS_SWIGLib.resultWcs_V_rbegin(self)

    def rend(self):
        """rend(self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::reverse_iterator"""
        return _SLVTS_SWIGLib.resultWcs_V_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _SLVTS_SWIGLib.resultWcs_V_pop_back(self)

    def erase(self, *args):
        """
        erase(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::iterator pos) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::iterator
        erase(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::iterator first, 
            std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::iterator last) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::iterator
        """
        return _SLVTS_SWIGLib.resultWcs_V_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> resultWcs_V
        __init__(self, resultWcs_V arg0) -> resultWcs_V
        __init__(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::size_type size) -> resultWcs_V
        __init__(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::size_type size, 
            std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type value) -> resultWcs_V
        """
        this = _SLVTS_SWIGLib.new_resultWcs_V(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type x)"""
        return _SLVTS_SWIGLib.resultWcs_V_push_back(self, *args)

    def front(self):
        """front(self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type"""
        return _SLVTS_SWIGLib.resultWcs_V_front(self)

    def back(self):
        """back(self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type"""
        return _SLVTS_SWIGLib.resultWcs_V_back(self)

    def assign(self, *args):
        """
        assign(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::size_type n, 
            std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type x)
        """
        return _SLVTS_SWIGLib.resultWcs_V_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::size_type new_size)
        resize(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::size_type new_size, 
            std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type x)
        """
        return _SLVTS_SWIGLib.resultWcs_V_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::iterator pos, 
            std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type x) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::iterator
        insert(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::iterator pos, 
            std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::size_type n, 
            std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::value_type x)
        """
        return _SLVTS_SWIGLib.resultWcs_V_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::size_type n)"""
        return _SLVTS_SWIGLib.resultWcs_V_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> std::vector<(boost::shared_ptr<(lsst::afw::image::TanWcs)>)>::size_type"""
        return _SLVTS_SWIGLib.resultWcs_V_capacity(self)

    __swig_destroy__ = _SLVTS_SWIGLib.delete_resultWcs_V
    __del__ = lambda self : None;
resultWcs_V_swigregister = _SLVTS_SWIGLib.resultWcs_V_swigregister
resultWcs_V_swigregister(resultWcs_V)

class SourceMatchVector(_object):
    """Proxy of C++ std::vector<(boost::shared_ptr<(hsc::meas::tansip::SourceMatch)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SourceMatchVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SourceMatchVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _SLVTS_SWIGLib.SourceMatchVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _SLVTS_SWIGLib.SourceMatchVector___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _SLVTS_SWIGLib.SourceMatchVector___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _SLVTS_SWIGLib.SourceMatchVector___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _SLVTS_SWIGLib.SourceMatchVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> SourceMatchVector"""
        return _SLVTS_SWIGLib.SourceMatchVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, difference_type i, difference_type j, SourceMatchVector v = std::vector< boost::shared_ptr< hsc::meas::tansip::SourceMatch >,std::allocator< boost::shared_ptr< hsc::meas::tansip::SourceMatch > > >())
        __setslice__(self, difference_type i, difference_type j)
        """
        return _SLVTS_SWIGLib.SourceMatchVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _SLVTS_SWIGLib.SourceMatchVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _SLVTS_SWIGLib.SourceMatchVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> SourceMatchVector
        __getitem__(self, difference_type i) -> value_type
        """
        return _SLVTS_SWIGLib.SourceMatchVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, SourceMatchVector v)
        __setitem__(self, PySliceObject slice)
        __setitem__(self, difference_type i, value_type x)
        """
        return _SLVTS_SWIGLib.SourceMatchVector___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _SLVTS_SWIGLib.SourceMatchVector_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _SLVTS_SWIGLib.SourceMatchVector_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _SLVTS_SWIGLib.SourceMatchVector_size(self)

    def clear(self):
        """clear(self)"""
        return _SLVTS_SWIGLib.SourceMatchVector_clear(self)

    def swap(self, *args):
        """swap(self, SourceMatchVector v)"""
        return _SLVTS_SWIGLib.SourceMatchVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _SLVTS_SWIGLib.SourceMatchVector_get_allocator(self)

    def begin(self):
        """begin(self) -> iterator"""
        return _SLVTS_SWIGLib.SourceMatchVector_begin(self)

    def end(self):
        """end(self) -> iterator"""
        return _SLVTS_SWIGLib.SourceMatchVector_end(self)

    def rbegin(self):
        """rbegin(self) -> reverse_iterator"""
        return _SLVTS_SWIGLib.SourceMatchVector_rbegin(self)

    def rend(self):
        """rend(self) -> reverse_iterator"""
        return _SLVTS_SWIGLib.SourceMatchVector_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _SLVTS_SWIGLib.SourceMatchVector_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _SLVTS_SWIGLib.SourceMatchVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> SourceMatchVector
        __init__(self, SourceMatchVector arg0) -> SourceMatchVector
        __init__(self, size_type size) -> SourceMatchVector
        __init__(self, size_type size, value_type value) -> SourceMatchVector
        """
        this = _SLVTS_SWIGLib.new_SourceMatchVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _SLVTS_SWIGLib.SourceMatchVector_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _SLVTS_SWIGLib.SourceMatchVector_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _SLVTS_SWIGLib.SourceMatchVector_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _SLVTS_SWIGLib.SourceMatchVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _SLVTS_SWIGLib.SourceMatchVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _SLVTS_SWIGLib.SourceMatchVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _SLVTS_SWIGLib.SourceMatchVector_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _SLVTS_SWIGLib.SourceMatchVector_capacity(self)

    __swig_destroy__ = _SLVTS_SWIGLib.delete_SourceMatchVector
    __del__ = lambda self : None;
SourceMatchVector_swigregister = _SLVTS_SWIGLib.SourceMatchVector_swigregister
SourceMatchVector_swigregister(SourceMatchVector)

class SourceMatchVectorVector(_object):
    """Proxy of C++ std::vector<(std::vector<(boost::shared_ptr<(hsc::meas::tansip::SourceMatch)>)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SourceMatchVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SourceMatchVectorVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _SLVTS_SWIGLib.SourceMatchVectorVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _SLVTS_SWIGLib.SourceMatchVectorVector___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _SLVTS_SWIGLib.SourceMatchVectorVector___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _SLVTS_SWIGLib.SourceMatchVectorVector___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _SLVTS_SWIGLib.SourceMatchVectorVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> SourceMatchVectorVector"""
        return _SLVTS_SWIGLib.SourceMatchVectorVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, difference_type i, difference_type j, SourceMatchVectorVector v = std::vector< std::vector< boost::shared_ptr< hsc::meas::tansip::SourceMatch >,std::allocator< boost::shared_ptr< hsc::meas::tansip::SourceMatch > > >,std::allocator< std::vector< boost::shared_ptr< hsc::meas::tansip::SourceMatch >,std::allocator< boost::shared_ptr< hsc::meas::tansip::SourceMatch > > > > >())
        __setslice__(self, difference_type i, difference_type j)
        """
        return _SLVTS_SWIGLib.SourceMatchVectorVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _SLVTS_SWIGLib.SourceMatchVectorVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _SLVTS_SWIGLib.SourceMatchVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> SourceMatchVectorVector
        __getitem__(self, difference_type i) -> value_type
        """
        return _SLVTS_SWIGLib.SourceMatchVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, SourceMatchVectorVector v)
        __setitem__(self, PySliceObject slice)
        __setitem__(self, difference_type i, value_type x)
        """
        return _SLVTS_SWIGLib.SourceMatchVectorVector___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _SLVTS_SWIGLib.SourceMatchVectorVector_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _SLVTS_SWIGLib.SourceMatchVectorVector_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _SLVTS_SWIGLib.SourceMatchVectorVector_size(self)

    def clear(self):
        """clear(self)"""
        return _SLVTS_SWIGLib.SourceMatchVectorVector_clear(self)

    def swap(self, *args):
        """swap(self, SourceMatchVectorVector v)"""
        return _SLVTS_SWIGLib.SourceMatchVectorVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _SLVTS_SWIGLib.SourceMatchVectorVector_get_allocator(self)

    def begin(self):
        """begin(self) -> iterator"""
        return _SLVTS_SWIGLib.SourceMatchVectorVector_begin(self)

    def end(self):
        """end(self) -> iterator"""
        return _SLVTS_SWIGLib.SourceMatchVectorVector_end(self)

    def rbegin(self):
        """rbegin(self) -> reverse_iterator"""
        return _SLVTS_SWIGLib.SourceMatchVectorVector_rbegin(self)

    def rend(self):
        """rend(self) -> reverse_iterator"""
        return _SLVTS_SWIGLib.SourceMatchVectorVector_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _SLVTS_SWIGLib.SourceMatchVectorVector_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _SLVTS_SWIGLib.SourceMatchVectorVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> SourceMatchVectorVector
        __init__(self, SourceMatchVectorVector arg0) -> SourceMatchVectorVector
        __init__(self, size_type size) -> SourceMatchVectorVector
        __init__(self, size_type size, value_type value) -> SourceMatchVectorVector
        """
        this = _SLVTS_SWIGLib.new_SourceMatchVectorVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _SLVTS_SWIGLib.SourceMatchVectorVector_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _SLVTS_SWIGLib.SourceMatchVectorVector_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _SLVTS_SWIGLib.SourceMatchVectorVector_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _SLVTS_SWIGLib.SourceMatchVectorVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _SLVTS_SWIGLib.SourceMatchVectorVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _SLVTS_SWIGLib.SourceMatchVectorVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _SLVTS_SWIGLib.SourceMatchVectorVector_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _SLVTS_SWIGLib.SourceMatchVectorVector_capacity(self)

    __swig_destroy__ = _SLVTS_SWIGLib.delete_SourceMatchVectorVector
    __del__ = lambda self : None;
SourceMatchVectorVector_swigregister = _SLVTS_SWIGLib.SourceMatchVectorVector_swigregister
SourceMatchVectorVector_swigregister(SourceMatchVectorVector)

class SourceMatch(_object):
    """Proxy of C++ hsc::meas::tansip::SourceMatch class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SourceMatch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SourceMatch, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, SourceIdType id, Coord sky, Point2D pixels, Point2D pixelErrors, 
            double flux) -> SourceMatch
        __init__(self, lsst::afw::table::ReferenceMatch match) -> SourceMatch
        """
        this = _SLVTS_SWIGLib.new_SourceMatch(*args)
        try: self.this.append(this)
        except: self.this = this
    def getId(self):
        """getId(self) -> SourceIdType"""
        return _SLVTS_SWIGLib.SourceMatch_getId(self)

    def getRa(self):
        """getRa(self) -> double"""
        return _SLVTS_SWIGLib.SourceMatch_getRa(self)

    def getDec(self):
        """getDec(self) -> double"""
        return _SLVTS_SWIGLib.SourceMatch_getDec(self)

    def getX(self):
        """getX(self) -> double"""
        return _SLVTS_SWIGLib.SourceMatch_getX(self)

    def getY(self):
        """getY(self) -> double"""
        return _SLVTS_SWIGLib.SourceMatch_getY(self)

    def getXErr(self):
        """getXErr(self) -> double"""
        return _SLVTS_SWIGLib.SourceMatch_getXErr(self)

    def getYErr(self):
        """getYErr(self) -> double"""
        return _SLVTS_SWIGLib.SourceMatch_getYErr(self)

    def getFlux(self):
        """getFlux(self) -> double"""
        return _SLVTS_SWIGLib.SourceMatch_getFlux(self)

    __swig_destroy__ = _SLVTS_SWIGLib.delete_SourceMatch
    __del__ = lambda self : None;
SourceMatch_swigregister = _SLVTS_SWIGLib.SourceMatch_swigregister
SourceMatch_swigregister(SourceMatch)


def GET_SUM_NUMCCD(*args):
  """GET_SUM_NUMCCD(CL_SLVTS SLVTS) -> int"""
  return _SLVTS_SWIGLib.GET_SUM_NUMCCD(*args)

def GET_SUM_NUMREF(*args):
  """GET_SUM_NUMREF(CL_SLVTS SLVTS) -> int"""
  return _SLVTS_SWIGLib.GET_SUM_NUMREF(*args)

def GET_SUM_NUMFIT(*args):
  """GET_SUM_NUMFIT(CL_SLVTS SLVTS) -> int"""
  return _SLVTS_SWIGLib.GET_SUM_NUMFIT(*args)

def GET_SUM_CRPIX(*args):
  """GET_SUM_CRPIX(CL_SLVTS SLVTS) -> VectorDouble"""
  return _SLVTS_SWIGLib.GET_SUM_CRPIX(*args)

def GET_SUM_CRVAL(*args):
  """GET_SUM_CRVAL(CL_SLVTS SLVTS) -> VectorDouble"""
  return _SLVTS_SWIGLib.GET_SUM_CRVAL(*args)

def GET_SUM_OAPIX(*args):
  """GET_SUM_OAPIX(CL_SLVTS SLVTS) -> VectorDouble"""
  return _SLVTS_SWIGLib.GET_SUM_OAPIX(*args)

def GET_SUM_CD(*args):
  """GET_SUM_CD(CL_SLVTS SLVTS) -> VectorDouble"""
  return _SLVTS_SWIGLib.GET_SUM_CD(*args)

def GET_SUM_ANGLE(*args):
  """GET_SUM_ANGLE(CL_SLVTS SLVTS) -> double"""
  return _SLVTS_SWIGLib.GET_SUM_ANGLE(*args)

def GET_SUM_MAX_CRPIX_G(*args):
  """GET_SUM_MAX_CRPIX_G(CL_SLVTS SLVTS) -> VectorDouble"""
  return _SLVTS_SWIGLib.GET_SUM_MAX_CRPIX_G(*args)

def GET_SUM_CD_CORANGLE(*args):
  """GET_SUM_CD_CORANGLE(CL_SLVTS SLVTS) -> VectorDouble"""
  return _SLVTS_SWIGLib.GET_SUM_CD_CORANGLE(*args)

def GET_SUM_RMSASIP(*args):
  """GET_SUM_RMSASIP(CL_SLVTS SLVTS) -> VectorDouble"""
  return _SLVTS_SWIGLib.GET_SUM_RMSASIP(*args)

def GET_SUM_RMSPSIP(*args):
  """GET_SUM_RMSPSIP(CL_SLVTS SLVTS) -> VectorDouble"""
  return _SLVTS_SWIGLib.GET_SUM_RMSPSIP(*args)

def GET_CCD_ID(*args):
  """GET_CCD_ID(CL_SLVTS SLVTS) -> VectorInt"""
  return _SLVTS_SWIGLib.GET_CCD_ID(*args)

def GET_CCD_NUMREF(*args):
  """GET_CCD_NUMREF(CL_SLVTS SLVTS) -> VectorInt"""
  return _SLVTS_SWIGLib.GET_CCD_NUMREF(*args)

def GET_CCD_NUMFIT(*args):
  """GET_CCD_NUMFIT(CL_SLVTS SLVTS) -> VectorInt"""
  return _SLVTS_SWIGLib.GET_CCD_NUMFIT(*args)

def GET_CCD_ORDERSIP(*args):
  """GET_CCD_ORDERSIP(CL_SLVTS SLVTS) -> VectorInt"""
  return _SLVTS_SWIGLib.GET_CCD_ORDERSIP(*args)

def GET_CCD_ORDERPSIP(*args):
  """GET_CCD_ORDERPSIP(CL_SLVTS SLVTS) -> VectorInt"""
  return _SLVTS_SWIGLib.GET_CCD_ORDERPSIP(*args)

def GET_CCD_GPOS_L(*args):
  """GET_CCD_GPOS_L(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_CCD_GPOS_L(*args)

def GET_CCD_GPOS_C(*args):
  """GET_CCD_GPOS_C(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_CCD_GPOS_C(*args)

def GET_CCD_CR(*args):
  """GET_CCD_CR(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_CCD_CR(*args)

def GET_CCD_OA(*args):
  """GET_CCD_OA(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_CCD_OA(*args)

def GET_CCD_CD(*args):
  """GET_CCD_CD(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_CCD_CD(*args)

def GET_CCD_ERRSIP(*args):
  """GET_CCD_ERRSIP(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_CCD_ERRSIP(*args)

def GET_CCD_ERRPSIP(*args):
  """GET_CCD_ERRPSIP(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_CCD_ERRPSIP(*args)

def GET_CCD_COEFSIPA(*args):
  """GET_CCD_COEFSIPA(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_CCD_COEFSIPA(*args)

def GET_CCD_COEFSIPB(*args):
  """GET_CCD_COEFSIPB(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_CCD_COEFSIPB(*args)

def GET_CCD_COEFPSIPA(*args):
  """GET_CCD_COEFPSIPA(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_CCD_COEFPSIPA(*args)

def GET_CCD_COEFPSIPB(*args):
  """GET_CCD_COEFPSIPB(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_CCD_COEFPSIPB(*args)

def GET_REF_ID(*args):
  """GET_REF_ID(CL_SLVTS SLVTS) -> VectorLongLong"""
  return _SLVTS_SWIGLib.GET_REF_ID(*args)

def GET_REF_CID(*args):
  """GET_REF_CID(CL_SLVTS SLVTS) -> VectorInt"""
  return _SLVTS_SWIGLib.GET_REF_CID(*args)

def GET_REF_FLAG(*args):
  """GET_REF_FLAG(CL_SLVTS SLVTS) -> VectorInt"""
  return _SLVTS_SWIGLib.GET_REF_FLAG(*args)

def GET_REF_POS_CELESTIAL_RADEC(*args):
  """GET_REF_POS_CELESTIAL_RADEC(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_CELESTIAL_RADEC(*args)

def GET_REF_POS_CELESTIAL_IMWLD(*args):
  """GET_REF_POS_CELESTIAL_IMWLD(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_CELESTIAL_IMWLD(*args)

def GET_REF_POS_CELESTIAL_IMPIX_L(*args):
  """GET_REF_POS_CELESTIAL_IMPIX_L(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_CELESTIAL_IMPIX_L(*args)

def GET_REF_POS_CELESTIAL_IMPIX_G(*args):
  """GET_REF_POS_CELESTIAL_IMPIX_G(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_CELESTIAL_IMPIX_G(*args)

def GET_REF_POS_CELESTIAL_CRPIX_L(*args):
  """GET_REF_POS_CELESTIAL_CRPIX_L(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_CELESTIAL_CRPIX_L(*args)

def GET_REF_POS_CELESTIAL_CRPIX_G(*args):
  """GET_REF_POS_CELESTIAL_CRPIX_G(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_CELESTIAL_CRPIX_G(*args)

def GET_REF_POS_CELESTIAL_LOCAL_L(*args):
  """GET_REF_POS_CELESTIAL_LOCAL_L(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_CELESTIAL_LOCAL_L(*args)

def GET_REF_POS_CELESTIAL_LOCAL_G(*args):
  """GET_REF_POS_CELESTIAL_LOCAL_G(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_CELESTIAL_LOCAL_G(*args)

def GET_REF_POS_CELESTIAL_LOCAL_C(*args):
  """GET_REF_POS_CELESTIAL_LOCAL_C(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_CELESTIAL_LOCAL_C(*args)

def GET_REF_POS_CELESTIAL_PSIP_CRPIX_L(*args):
  """GET_REF_POS_CELESTIAL_PSIP_CRPIX_L(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_CELESTIAL_PSIP_CRPIX_L(*args)

def GET_REF_POS_CELESTIAL_PSIP_CRPIX_G(*args):
  """GET_REF_POS_CELESTIAL_PSIP_CRPIX_G(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_CELESTIAL_PSIP_CRPIX_G(*args)

def GET_REF_POS_CELESTIAL_PSIP_LOCAL_L(*args):
  """GET_REF_POS_CELESTIAL_PSIP_LOCAL_L(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_CELESTIAL_PSIP_LOCAL_L(*args)

def GET_REF_POS_CELESTIAL_PSIP_LOCAL_G(*args):
  """GET_REF_POS_CELESTIAL_PSIP_LOCAL_G(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_CELESTIAL_PSIP_LOCAL_G(*args)

def GET_REF_POS_CELESTIAL_PSIP_LOCAL_C(*args):
  """GET_REF_POS_CELESTIAL_PSIP_LOCAL_C(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_CELESTIAL_PSIP_LOCAL_C(*args)

def GET_REF_POS_DETECTED_LOCAL_L(*args):
  """GET_REF_POS_DETECTED_LOCAL_L(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_DETECTED_LOCAL_L(*args)

def GET_REF_POS_DETECTED_LOCAL_G(*args):
  """GET_REF_POS_DETECTED_LOCAL_G(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_DETECTED_LOCAL_G(*args)

def GET_REF_POS_DETECTED_LOCAL_C(*args):
  """GET_REF_POS_DETECTED_LOCAL_C(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_DETECTED_LOCAL_C(*args)

def GET_REF_POS_DETECTED_CRPIX_L(*args):
  """GET_REF_POS_DETECTED_CRPIX_L(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_DETECTED_CRPIX_L(*args)

def GET_REF_POS_DETECTED_CRPIX_G(*args):
  """GET_REF_POS_DETECTED_CRPIX_G(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_DETECTED_CRPIX_G(*args)

def GET_REF_POS_DETECTED_IMPIX_L(*args):
  """GET_REF_POS_DETECTED_IMPIX_L(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_DETECTED_IMPIX_L(*args)

def GET_REF_POS_DETECTED_IMPIX_G(*args):
  """GET_REF_POS_DETECTED_IMPIX_G(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_DETECTED_IMPIX_G(*args)

def GET_REF_POS_DETECTED_IMWLD_L(*args):
  """GET_REF_POS_DETECTED_IMWLD_L(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_DETECTED_IMWLD_L(*args)

def GET_REF_POS_DETECTED_IMWLD_G(*args):
  """GET_REF_POS_DETECTED_IMWLD_G(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_DETECTED_IMWLD_G(*args)

def GET_REF_POS_DETECTED_RADEC_L(*args):
  """GET_REF_POS_DETECTED_RADEC_L(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_DETECTED_RADEC_L(*args)

def GET_REF_POS_DETECTED_RADEC_G(*args):
  """GET_REF_POS_DETECTED_RADEC_G(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_DETECTED_RADEC_G(*args)

def GET_REF_POS_DETECTED_ASIP_CRPIX_L(*args):
  """GET_REF_POS_DETECTED_ASIP_CRPIX_L(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_DETECTED_ASIP_CRPIX_L(*args)

def GET_REF_POS_DETECTED_ASIP_CRPIX_G(*args):
  """GET_REF_POS_DETECTED_ASIP_CRPIX_G(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_DETECTED_ASIP_CRPIX_G(*args)

def GET_REF_POS_DETECTED_ASIP_IMPIX_L(*args):
  """GET_REF_POS_DETECTED_ASIP_IMPIX_L(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_DETECTED_ASIP_IMPIX_L(*args)

def GET_REF_POS_DETECTED_ASIP_IMPIX_G(*args):
  """GET_REF_POS_DETECTED_ASIP_IMPIX_G(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_DETECTED_ASIP_IMPIX_G(*args)

def GET_REF_POS_DETECTED_ASIP_IMWLD_L(*args):
  """GET_REF_POS_DETECTED_ASIP_IMWLD_L(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_DETECTED_ASIP_IMWLD_L(*args)

def GET_REF_POS_DETECTED_ASIP_IMWLD_G(*args):
  """GET_REF_POS_DETECTED_ASIP_IMWLD_G(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_DETECTED_ASIP_IMWLD_G(*args)

def GET_REF_POS_DETECTED_ASIP_RADEC_L(*args):
  """GET_REF_POS_DETECTED_ASIP_RADEC_L(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_DETECTED_ASIP_RADEC_L(*args)

def GET_REF_POS_DETECTED_ASIP_RADEC_G(*args):
  """GET_REF_POS_DETECTED_ASIP_RADEC_G(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_POS_DETECTED_ASIP_RADEC_G(*args)

def GET_REF_CAMERADISTPSIP(*args):
  """GET_REF_CAMERADISTPSIP(CL_SLVTS SLVTS) -> std::vector<(std::vector<(double,std::allocator<(double)>)>,std::allocator<(std::vector<(double,std::allocator<(double)>)>)>)>"""
  return _SLVTS_SWIGLib.GET_REF_CAMERADISTPSIP(*args)

def SET_EMPTYMETADATA():
  """SET_EMPTYMETADATA() -> dafbase::PropertySet::Ptr"""
  return _SLVTS_SWIGLib.SET_EMPTYMETADATA()

def SET_METADATA(*args):
  """SET_METADATA(VSLVTS SLVTS, dafbase::PropertySet::Ptr meta)"""
  return _SLVTS_SWIGLib.SET_METADATA(*args)

def SET_TANWCS(*args):
  """SET_TANWCS(VSLVTS VSLVTS) -> resultWcs_V"""
  return _SLVTS_SWIGLib.SET_TANWCS(*args)
# This file is compatible with both classic and new-style classes.


